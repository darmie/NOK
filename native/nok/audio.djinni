sound = interface +c {
    get_compressedData():binary;
    get_uncompressedData():list<f32>;
    get_length(): f32;
    get_channels(): i32;
    get_sampleRate(): i32;

    set_compressedData(b:binary);
    set_uncompressedData(d:list<f32>);
    set_length(length: f32);
    set_channels(channels: i32);
    set_sampleRate(rate: i32);

    unload();

    static create(): sound;
}


audio_channel = interface +c {
    get_data():list<f32>;

    static create(looping: bool): audio_channel;
    nextSamples(requestedSamples: list<f32>, requestedLength: i32, sampleRate: i32);
    play();
    pause();
    stop();
    get_length(): f32;
    get_position(): f32;
    set_position(pos: f32);
    get_volume(): f32;
    set_volume(vol: f32);

    get_finished(): bool;

    max(a: i32, b: i32);
    min(a: i32, b: i32);
}

resampling_audio_channel = interface +c {
    get_data():list<f32>;
    get_samplesRate(): i32;

    static create(looping: bool, sampleRate: i32): audio_channel;

    sample(position: i32, sampleRate: i32):f32;

    lerp(v0: f32, v1: f32, t: f32);

    sampleLength(sampleRate: i32): i32;

    nextSamples(requestedSamples: list<f32>, requestedLength: i32, sampleRate: i32);
    play();
    pause();
    stop();
    get_length(): f32;
    get_position(): f32;
    set_position(pos: f32);
    get_volume(): f32;
    set_volume(vol: f32);

    get_finished(): bool;

    max(a: i32, b: i32);
    min(a: i32, b: i32);
}

stream_channel = interface +c {
    get_data():list<f32>;

    static create(data:binary, looping: bool): audio_channel;
    nextSamples(requestedSamples: list<f32>, requestedLength: i32, sampleRate: i32);
    play();
    pause();
    stop();
    get_length(): f32;
    get_position(): f32;
    set_position(pos: f32);
    get_volume(): f32;
    set_volume(vol: f32);

    get_finished(): bool;

    max(a: i32, b: i32);
    min(a: i32, b: i32);
}



audio_buffer = interface +c {
    static create(size: i32, channels: i32, samplesPerSecond: i32);
    get_channels(): i32;
    get_samplesPerSecond(): i32;
    get_data():list<f32>;
    get_size(): i32;
    get_readLocation():i32;
    get_writeLocation():i32;

    set_channels(channels: i32);
    set_samplesPerSecond(samples: i32);
    set_data(data:list<f32>);
    set_size(s: i32);
    set_readLocation(loc:i32);
    set_writeLocation(loc:i32);
}


audio = interface +c {
    get_samplesPerSecond(): i32;

    stream(sound: sound, loop: bool): audio_channel;
}

audio1 = interface +c {
    static init();

    max(a: f32, b: f32): f32;
    min(a: f32, b: f32): f32;

    mix(samplesBox: i32, buffer: audio_buffer): f32;
    play(sound: sound, loop: bool): audio_channel;
    playAgain(channel: audio_channel);
    stream(sound: sound, loop: bool): audio_channel;
}