sound = record {
    filename: string;
    format:buffer_format;
    volume: f32;
    size: i32;
    sampleRatePos: f32;
    length: f32;
}


sound_stream = record {
    filename: string;
    nextSample: f32;
    channels: i32;
    sampleRate: i32;
    looping: bool;
    ended: bool;
    length: f32;
    position:f32;
    volume: f32;
}



buffer_format = record {
    channels: i32;
    samplesPerSecond: i32;
    bitsPerSample: i32;
}

audio_buffer = record {
    format: buffer_format;
    data: binary;
    dataSize: i32;
    readLocation: i32;
    writeLocation: i32;
}

channel = record {
    sound: sound;
    position: f32;
    loop: bool;
    volume: f32;
    pitch: f32;
}

stream_channel = record {
    stream: sound_stream;
    position: i32;
}

# video_channel = record {
#     stream: video_sound_stream;
#     position: i32;
# }

audio3_channel = record {
    origin: vec3;
    buffer: audio_format;
    active: bool;
}

audio1 = interface +c {

    static init(): audio1;
    static play(sound: sound, loop: bool, pitch: f32, unique: bool): channel;
    static stop(sound: sound);
    static playStream(stream: sound_stream);
    static stopStream(stream: sound_stream);

    # static playVideoStream(stream: video_stream);
    # static stopVideoStream(stream: video_stream);

    static mix(samples: i32);

}

audio2 = interface +c {
    static init();
	static update();
	static shutdown();

    static get_samplesPerSecond(): i32;
}

audio3 = interface +c {
    static init();
	static update();
	static shutdown();

    static createChannel(origin:vec3): audio3_channel;
    static destroyChannel(channel: audio3_channel);
}