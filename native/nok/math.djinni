vec2 = interface +c {
    get_x(): f64;
    get_y(): f64;

    add(v: vec2);
    addScaledVector(v: vec2);
    sub(v: vec2);
    multiply(i: f64);
    divide(i: f64);

    squareLength(): f64;
    getLength(): f64;
    setLength(length: f64);

    normalize(): vec2;
    isZero(): bool;
    get_xy():vec2;
    set(i: f64, v:f64);

    dot(v: vec2): f64;
    cross(v: vec2): vec2;

    distance(v: vec2): f64;

    invert();
    static create(x: f64, y: f64): vec2;
}

vec3 = interface +c {
    get_x(): f64;
    get_y(): f64;
    get_z(): f64;

    add(v: vec3);
    addScaledVector(v: vec3);
    sub(v: vec3);
    multiply(i: f64);
    divide(i: f64);

    squareLength(): f64;
    getLength(): f64;
    setLength(length: f64);

    normalize(): vec3;
    isZero(): bool;
    get_xyz():vec3;
    set(x: f64, y:f64, z:f64);

    dot(v: vec3): f64;
    cross(v: vec3): vec3;

    distance(v: vec3): f64;

    invert();
    static create(x: f64, y: f64, z: f64): vec3;
}

vec4 = interface +c {
    get_x(): f64;
    get_y(): f64;
    get_z(): f64;

    add(v: vec4);
    addScaledVector(v: vec4);
    sub(v: vec4);
    multiply(i: f64);
    divide(i: f64);

    squareLength(): f64;
    getLength(): f64;
    setLength(length: f64);

    normalize(): vec4;
    isZero(): bool;

    set(x: f64, y:f64, z:f64, w:f64);

    dot(v: vec4): f64;
    cross(v: vec4): vec4;

    distance(v: vec4): f64;

    invert();
    static create(x: f64, y: f64, z: f64): vec4;
}


mat2 = interface +c {
    const width: f32 = 2;
    const height: f32 = 2;


    get(row: f32, col: f32):f32;
    set(row: f32, col: f32, v: f32);

    static orthogonalProjection(left: f32, right: f32, bottom: f32, top: f32, zn: f32, zf: f32): mat2;
    static perspective(left: f32, right: f32, top: f32, bottom: f32, near: f32, far: f32): mat2;
    static perspectiveFOV(fov: f32, aspect: f32, near: f32, far: f32): mat2;

    static lookAt(eye: vec3, at: vec3, up: vec3): mat2;
    static lookAlong(axis: vec3, eye: vec3, up: vec3): mat2;

    static translation(x: f32, y: f32): mat2;
    static movement(x: f32, y: f32, z: f32):mat2;
    static identity(): mat2;
    static scale(scale: f32): mat2;
    
    static rotationX(alpha: f32): mat2;
    static rotationY(alpha: f32): mat2;
    static rotationZ(alpha: f32): mat2;

    static rotation(yaw: f32, pitch: f32, roll: f32): mat2;

    static create(): mat2;

    static from(mat: mat2): mat2;

    add(mat: mat2): mat2;
    sub(mat: mat2): mat2;

    multiply(i: f32): mat2;
    clone(): mat2;
    transpose(): mat2;
    transpose3x3(): mat2;
    trace(): f32;
    determinant(): f32;

    static linearInterpolate(a: mat2, b: mat2, prop: f32): mat2;
}


mat3 = interface +c {
    const width: f32 = 3;
    const height: f32 = 3;


    get(row: f32, col: f32):f32;
    set(row: f32, col: f32, v: f32);

    static orthogonalProjection(left: f32, right: f32, bottom: f32, top: f32, zn: f32, zf: f32): mat3;
    static perspective(left: f32, right: f32, top: f32, bottom: f32, near: f32, far: f32): mat3;
    static perspectiveFOV(fov: f32, aspect: f32, near: f32, far: f32): mat3;

    static lookAt(eye: vec3, at: vec3, up: vec3): mat3;
    static lookAlong(axis: vec3, eye: vec3, up: vec3): mat3;

    static translation(x: f32, y: f32): mat3;
    static movement(x: f32, y: f32, z: f32):mat3;
    static identity(): mat3;
    static scale(scale: f32): mat3;
    
    static rotationX(alpha: f32): mat3;
    static rotationY(alpha: f32): mat3;
    static rotationZ(alpha: f32): mat3;

    static rotation(yaw: f32, pitch: f32, roll: f32): mat3;

    static create(): mat3;

    static from(mat: mat3): mat3;

    add(mat: mat3): mat3;
    sub(mat: mat3): mat3;

    multiply(i: f32): mat3;
    clone(): mat3;
    transpose(): mat3;
    transpose3x3(): mat3;
    trace(): f32;
    determinant(): f32;

    static linearInterpolate(a: mat3, b: mat3, prop: f32): mat3;
}



mat4 = interface +c {
    const width: f32 = 3;
    const height: f32 = 3;


    get(row: f32, col: f32):f32;
    set(row: f32, col: f32, v: f32);

    static orthogonalProjection(left: f32, right: f32, bottom: f32, top: f32, zn: f32, zf: f32): mat4;
    static perspective(left: f32, right: f32, top: f32, bottom: f32, near: f32, far: f32): mat4;
    static perspectiveFOV(fov: f32, aspect: f32, near: f32, far: f32): mat4;

    static lookAt(eye: vec3, at: vec3, up: vec3): mat4;
    static lookAlong(axis: vec3, eye: vec3, up: vec3): mat4;

    static translation(x: f32, y: f32): mat4;
    static movement(x: f32, y: f32, z: f32):mat4;
    static identity(): mat4;
    static scale(scale: f32): mat4;
    
    static rotationX(alpha: f32): mat4;
    static rotationY(alpha: f32): mat4;
    static rotationZ(alpha: f32): mat4;

    static rotation(yaw: f32, pitch: f32, roll: f32): mat4;

    static create(): mat4;

    static from(mat: mat4): mat4;

    add(mat: mat4): mat4;
    sub(mat: mat4): mat4;

    multiply(i: f32): mat4;
    clone(): mat4;
    transpose(): mat4;
    transpose3x3(): mat4;
    trace(): f32;
    determinant(): f32;

    static linearInterpolate(a: mat4, b: mat4, prop: f32): mat4;
}







quaternion = interface +c {
    static create(x: f32, y: f32, z: f32, w: f32): quaternion;
    static fromAxis(axis: vec3, radian: f32): quaternion;
    slerp(t: f32, q: quaternion): quaternion;
    rotated(b: quaternion): quaternion;
    scaled(scale: f32): quaternion;
    dot(q: quaternion): f32;
    matrix(): mat4;

    add(q: quaternion): quaternion;
    sub(q: quaternion): quaternion;

    addVec3(v: vec3): quaternion;
    multiply(q: quaternion): quaternion;

    normalize();
    rotate(q: quaternion);

    conjugate(): quaternion;
    invert(): quaternion;

    get_x(): f32;
    get_y(): f32;
    get_z(): f32;

    set_x(x: f32);
    set_y(y: f32);
    set_z(z: f32);
}