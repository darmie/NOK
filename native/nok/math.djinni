vec2i = interface +c {
    get_x(): i32;
    get_y(): i32;

    set_x(x: i32);
    set_y(y: i32);

    add(v: vec2i);
    addScaledVector(v: vec2i);
    sub(v: vec2i);
    multiply(i: i32);
    divide(i: i32);

    squareLength(): i32;
    getLength(): i32;
    setLength(length: i32);

    normalize(): vec2i;
    isZero(): bool;

    get(i: i32): i32;
    set(i: i32, v:i32);

    dot(v: vec2i): i32;
    cross(v: vec2i): vec2i;

    distance(v: vec2i): i32;

    static create(x: i32, y: i32): vec2i;
}

vec3i = interface +c {
    get_x(): i32;
    get_y():i32;
    get_z():i32;

    set_x(x: i32);
    set_y(y: i32);
    set_z(z: i32);

    add(v: vec3i);
    addScaledVector(v: vec3i);
    sub(v: vec3i);
    multiply(i: i32);
    divide(i: i32);

    squareLength(): i32;
    getLength(): i32;
    setLength(length: i32);

    normalize(): vec3i;
    isZero(): bool;

    get(i: i32): i32;
    set(i: i32, v:i32);

    dot(v: vec3i): i32;
    cross(v: vec3i): vec3i;

    distance(v: vec3i): i32;

    static create(x: i32, y: i32, z: i32): vec3i;
}

vec4i = interface +c {
    get_x(): i32;
    get_y():i32;
    get_z():i32;

    set_x(x: i32);
    set_y(y: i32);
    set_z(z: i32);
    set_w(w: i32);

    add(v: vec4i);
    addScaledVector(v: vec4i);
    sub(v: vec4i);
    multiply(i: i32);
    divide(i: i32);

    squareLength(): i32;
    getLength(): i32;
    setLength(length: i32);

    normalize(): vec4i;
    isZero(): bool;

    get(i: i32): i32;
    set(i: i32, v:i32);

    dot(v: vec4i): i32;
    cross(v: vec4i): vec4i;

    distance(v: vec4i): i32;

    static create(x: i32, y: i32, z: i32): vec4i;
}



vec2 = interface +c {
    get_x(): f32;
    get_y(): f32;

    set_x(x: f32);
    set_y(y: f32);

    add(v: vec2);
    addScaledVector(v: vec2);
    sub(v: vec2);
    multiply(i: f32);
    divide(i: f32);

    squareLength(): f32;
    getLength(): f32;
    setLength(length: f32);

    normalize(): vec2;
    isZero(): bool;

    get(i: f32): f32;
    set(i: f32, v:f32);

    dot(v: vec2): f32;
    cross(v: vec2): vec2;

    distance(v: vec2): f32;

    static create(x: f32, y: f32): vec2;
}

vec3 = interface +c {
    get_x(): f32;
    get_y(): f32;
    get_z(): f32;

    set_x(x: f32);
    set_y(y: f32);
    set_z(z: f32);

    add(v: vec3);
    addScaledVector(v: vec3);
    sub(v: vec3);
    multiply(i: f32);
    divide(i: f32);

    squareLength(): f32;
    getLength(): f32;
    setLength(length: f32);

    normalize(): vec3;
    isZero(): bool;

    get(i: f32): f32;
    set(i: f32, v:f32);

    dot(v: vec3): f32;
    cross(v: vec3): vec3;

    distance(v: vec3): f32;

    static create(x: f32, y: f32, z: f32): vec3;
}

vec4 = interface +c {
    get_x(): f32;
    get_y():f32;
    get_z():f32;

    set_x(x: f32);
    set_y(y: f32);
    set_z(z: f32);
    set_w(w: f32);

    add(v: vec4);
    addScaledVector(v: vec4);
    sub(v: vec4);
    multiply(i: f32);
    divide(i: f32);

    squareLength(): f32;
    getLength(): f32;
    setLength(length: f32);

    normalize(): vec4;
    isZero(): bool;

    get(i: f32): f32;
    set(i: f32, v:f32);

    dot(v: vec4): f32;
    cross(v: vec4): vec4;

    distance(v: vec4): f32;

    invert();
    static create(x: f32, y: f32, z: f32): vec4;
}

vec2d = interface +c {
    get_x(): f64;
    get_y(): f64;

    set_x(x: f64);
    set_y(y: f64);

    add(v: vec2d);
    addScaledVector(v: vec2d);
    sub(v: vec2d);
    multiply(i: f64);
    divide(i: f64);

    squareLength(): f64;
    getLength(): f64;
    setLength(length: f64);

    normalize(): vec2d;
    isZero(): bool;

    get(i: f64): f64;
    set(i: f64, v:f64);

    dot(v: vec2d): f64;
    cross(v: vec2d): vec2d;

    distance(v: vec2d): f64;

    invert();
    static create(x: f64, y: f64): vec2d;
}

vec3d = interface +c {
    get_x(): f64;
    get_y(): f64;
    get_z(): f64;

    set_x(x: f64);
    set_y(y: f64);
    set_z(z: f64);

    add(v: vec3d);
    addScaledVector(v: vec3d);
    sub(v: vec3d);
    multiply(i: f64);
    divide(i: f64);

    squareLength(): f64;
    getLength(): f64;
    setLength(length: f64);

    normalize(): vec3d;
    isZero(): bool;

    get(i: f64): f64;
    set(i: f64, v:f64);

    dot(v: vec3d): f64;
    cross(v: vec3d): vec3d;

    distance(v: vec3d): f64;

    invert();
    static create(x: f64, y: f64, z: f64): vec3d;
}

vec4d = interface +c {
    get_x(): f64;
    get_y(): f64;
    get_z(): f64;

    set_x(x: f64);
    set_y(y: f64);
    set_z(z: f64);
    set_w(w: f64);

    add(v: vec4d);
    addScaledVector(v: vec4d);
    sub(v: vec4d);
    multiply(i: f64);
    divide(i: f64);

    squareLength(): f64;
    getLength(): f64;
    setLength(length: f64);

    normalize(): vec4d;
    isZero(): bool;

    get(i: f64): f64;
    set(i: f64, v:f64);

    dot(v: vec4d): f64;
    cross(v: vec4d): vec4d;

    distance(v: vec4d): f64;

    invert();
    static create(x: f64, y: f64, z: f64): vec4d;
}


mat2i = interface +c {
    const width: i32 = 2;
    const height: i32 = 2;


    get(row: i32, col: i32):f32;
    set(row: i32, col: i32, v: i32);

    static orthogonalProjection(left: f32, right: f32, bottom: f32, top: f32, zn: f32, zf: f32): mat2i;
    static perspective(left: f32, right: f32, top: f32, bottom: f32, near: f32, far: f32): mat2i;
    static perspectiveFOV(fov: f32, aspect: f32, near: f32, far: f32): mat2i;

    static lookAt(eye: vec3i, at: vec3i, up: vec3i): mat2i;
    static lookAlong(axis: vec3i, eye: vec3i, up: vec3i): mat2i;

    static translation(x: f32, y: f32): mat2i;
    static movement(x: f32, y: f32, z: f32):mat2i;
    static identity(): mat2i;
    static scale(scale: f32): mat2i;
    
    static rotationX(alpha: f32): mat2i;
    static rotationY(alpha: f32): mat2i;
    static rotationZ(alpha: f32): mat2i;

    static rotation(yaw: f32, pitch: f32, roll: f32): mat2i;

    static create(): mat2i;

    static from(mat: mat2i): mat2i;

    add(mat: mat2i): mat2i;
    sub(mat: mat2i): mat2i;

    multiply(i: i32): mat2i;
    clone(): mat2i;
    transpose(): mat2i;
    transpose3x3(): mat2i;
    trace(): i32;
    determinant(): i32;

    static linearInterpolate(a: mat2i, b: mat2i, prop: f32): mat2i;
}


mat3i = interface +c {
    const width: i32 = 3;
    const height: i32 = 3;


    get(row: i32, col: i32):f32;
    set(row: i32, col: i32, v: i32);

    static orthogonalProjection(left: f32, right: f32, bottom: f32, top: f32, zn: f32, zf: f32): mat3i;
    static perspective(left: f32, right: f32, top: f32, bottom: f32, near: f32, far: f32): mat3i;
    static perspectiveFOV(fov: f32, aspect: f32, near: f32, far: f32): mat3i;

    static lookAt(eye: vec3i, at: vec3i, up: vec3i): mat3i;
    static lookAlong(axis: vec3i, eye: vec3i, up: vec3i): mat3i;

    static translation(x: f32, y: f32): mat3i;
    static movement(x: f32, y: f32, z: f32):mat3i;
    static identity(): mat3i;
    static scale(scale: f32): mat3i;
    
    static rotationX(alpha: f32): mat3i;
    static rotationY(alpha: f32): mat3i;
    static rotationZ(alpha: f32): mat3i;

    static rotation(yaw: f32, pitch: f32, roll: f32): mat3i;

    static create(): mat3i;

    static from(mat: mat3i): mat3i;

    add(mat: mat3i): mat3i;
    sub(mat: mat3i): mat3i;

    multiply(i: i32): mat3i;
    clone(): mat3i;
    transpose(): mat3i;
    transpose3x3(): mat3i;
    trace(): i32;
    determinant(): i32;

    static linearInterpolate(a: mat3i, b: mat3i, prop: f32): mat3i;
}

mat4i = interface +c {
    const width: i32 = 4;
    const height: i32 = 4;


    get(row: i32, col: i32):f32;
    set(row: i32, col: i32, v: i32);

    static orthogonalProjection(left: f32, right: f32, bottom: f32, top: f32, zn: f32, zf: f32): mat4i;
    static perspective(left: f32, right: f32, top: f32, bottom: f32, near: f32, far: f32): mat4i;
    static perspectiveFOV(fov: f32, aspect: f32, near: f32, far: f32): mat4i;

    static lookAt(eye: vec3i, at: vec3i, up: vec3i): mat4i;
    static lookAlong(axis: vec3i, eye: vec3i, up: vec3i): mat4i;

    static translation(x: f32, y: f32): mat4i;
    static movement(x: f32, y: f32, z: f32):mat4i;
    static identity(): mat4i;
    static scale(scale: f32): mat4i;
    
    static rotationX(alpha: f32): mat4i;
    static rotationY(alpha: f32): mat4i;
    static rotationZ(alpha: f32): mat4i;

    static rotation(yaw: f32, pitch: f32, roll: f32): mat4i;

    static create(): mat4i;

    static from(mat: mat4i): mat4i;

    add(mat: mat4i): mat4i;
    sub(mat: mat4i): mat4i;

    multiply(i: i32): mat4i;
    clone(): mat4i;
    transpose(): mat4i;
    transpose3x3(): mat4i;
    trace(): i32;
    determinant(): i32;

    static linearInterpolate(a: mat4i, b: mat4i, prop: f32): mat4i;
}


mat2 = interface +c {
    const width: f32 = 2;
    const height: f32 = 2;


    get(row: f32, col: f32):f32;
    set(row: f32, col: f32, v: f32);

    static orthogonalProjection(left: f32, right: f32, bottom: f32, top: f32, zn: f32, zf: f32): mat2;
    static perspective(left: f32, right: f32, top: f32, bottom: f32, near: f32, far: f32): mat2;
    static perspectiveFOV(fov: f32, aspect: f32, near: f32, far: f32): mat2;

    static lookAt(eye: vec3i, at: vec3i, up: vec3i): mat2;
    static lookAlong(axis: vec3i, eye: vec3i, up: vec3i): mat2;

    static translation(x: f32, y: f32): mat2;
    static movement(x: f32, y: f32, z: f32):mat2;
    static identity(): mat2;
    static scale(scale: f32): mat2;
    
    static rotationX(alpha: f32): mat2;
    static rotationY(alpha: f32): mat2;
    static rotationZ(alpha: f32): mat2;

    static rotation(yaw: f32, pitch: f32, roll: f32): mat2;

    static create(): mat2;

    static from(mat: mat2): mat2;

    add(mat: mat2): mat2;
    sub(mat: mat2): mat2;

    multiply(i: f32): mat2;
    clone(): mat2;
    transpose(): mat2;
    transpose3x3(): mat2;
    trace(): f32;
    determinant(): f32;

    static linearInterpolate(a: mat2, b: mat2, prop: f32): mat2;
}


mat3 = interface +c {
    const width: f32 = 3;
    const height: f32 = 3;


    get(row: f32, col: f32):f32;
    set(row: f32, col: f32, v: f32);

    static orthogonalProjection(left: f32, right: f32, bottom: f32, top: f32, zn: f32, zf: f32): mat3;
    static perspective(left: f32, right: f32, top: f32, bottom: f32, near: f32, far: f32): mat3;
    static perspectiveFOV(fov: f32, aspect: f32, near: f32, far: f32): mat3;

    static lookAt(eye: vec3i, at: vec3i, up: vec3i): mat3;
    static lookAlong(axis: vec3i, eye: vec3i, up: vec3i): mat3;

    static translation(x: f32, y: f32): mat3;
    static movement(x: f32, y: f32, z: f32):mat3;
    static identity(): mat3;
    static scale(scale: f32): mat3;
    
    static rotationX(alpha: f32): mat3;
    static rotationY(alpha: f32): mat3;
    static rotationZ(alpha: f32): mat3;

    static rotation(yaw: f32, pitch: f32, roll: f32): mat3;

    static create(): mat3;

    static from(mat: mat3): mat3;

    add(mat: mat3): mat3;
    sub(mat: mat3): mat3;

    multiply(i: f32): mat3;
    clone(): mat3;
    transpose(): mat3;
    transpose3x3(): mat3;
    trace(): f32;
    determinant(): f32;

    static linearInterpolate(a: mat3, b: mat3, prop: f32): mat3;
}



mat4 = interface +c {
    const width: f32 = 3;
    const height: f32 = 3;


    get(row: f32, col: f32):f32;
    set(row: f32, col: f32, v: f32);

    static orthogonalProjection(left: f32, right: f32, bottom: f32, top: f32, zn: f32, zf: f32): mat4;
    static perspective(left: f32, right: f32, top: f32, bottom: f32, near: f32, far: f32): mat4;
    static perspectiveFOV(fov: f32, aspect: f32, near: f32, far: f32): mat4;

    static lookAt(eye: vec3i, at: vec3i, up: vec3i): mat4;
    static lookAlong(axis: vec3i, eye: vec3i, up: vec3i): mat4;

    static translation(x: f32, y: f32): mat4;
    static movement(x: f32, y: f32, z: f32):mat4;
    static identity(): mat4;
    static scale(scale: f32): mat4;
    
    static rotationX(alpha: f32): mat4;
    static rotationY(alpha: f32): mat4;
    static rotationZ(alpha: f32): mat4;

    static rotation(yaw: f32, pitch: f32, roll: f32): mat4;

    static create(): mat4;

    static from(mat: mat4): mat4;

    add(mat: mat4): mat4;
    sub(mat: mat4): mat4;

    multiply(i: f32): mat4;
    clone(): mat4;
    transpose(): mat4;
    transpose3x3(): mat4;
    trace(): f32;
    determinant(): f32;

    static linearInterpolate(a: mat4, b: mat4, prop: f32): mat4;
}


quaternion = interface +c {
    static create(x: f32, y: f32, z: f32, w: f32): quaternion;
    static fromAxis(axis: vec3, radian: f32): quaternion;
    slerp(t: f32, q: quaternion): quaternion;
    rotated(b: quaternion): quaternion;
    scaled(scale: f32): quaternion;
    dot(q: quaternion): f32;
    matrix(): mat4;

    add(q: quaternion): quaternion;
    sub(q: quaternion): quaternion;

    addVec3(v: vec3): quaternion;
    multiply(q: quaternion): quaternion;

    normalize();
    rotate(q: quaternion);

    conjugate(): quaternion;
    invert(): quaternion;

    get_x(): f32;
    get_y(): f32;
    get_z(): f32;

    set_x(x: f32);
    set_y(y: f32);
    set_z(z: f32);
}