// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

package co.zenturi.nok;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class PipelineState {
    public abstract ArrayList<VertexStructure> getInputLayout();

    public abstract Shader getVertexShader();

    public abstract void setVertexShader(Shader shader);

    public abstract Shader getFragmentShader();

    public abstract void setFragmentShader(Shader shader);

    public abstract Shader getGeometryShader();

    public abstract void setGeometryShader(Shader shader);

    public abstract Shader getTessellationControlShader();

    public abstract void setTessellationControlShader(Shader shader);

    public abstract Shader getTessellationEvaluationShader();

    public abstract void setTessellationEvaluationShader(Shader shader);

    public abstract CullMode getCullMode();

    public abstract void setCullMode(CullMode cullMode);

    public abstract boolean depthWrite();

    public abstract void setDepthWrite(boolean b);

    public abstract ZCompareMode depthMode();

    public abstract void setDepthMode(ZCompareMode m);

    public abstract ZCompareMode stencilMode();

    public abstract ZCompareMode getStencilMode();

    public abstract StencilAction stencilBothPass();

    public abstract void setStencilBothPass(StencilAction s);

    public abstract StencilAction stencilDepthFail();

    public abstract void setStencilDepthFail(StencilAction s);

    public abstract StencilAction stencilFail();

    public abstract void setStencilFail(StencilAction s);

    public abstract BlendingOperation blendSource();

    public abstract void setBlendSource(BlendingOperation s);

    public abstract BlendingOperation blendDestination();

    public abstract void setBlendDestination(BlendingOperation s);

    public abstract BlendingOperation alphaBlendSource();

    public abstract void setAlphaBlendSource(BlendingOperation s);

    public abstract BlendingOperation alphaBlendDestination();

    public abstract void setAlphaBlendDestination(BlendingOperation s);

    public abstract ArrayList<Boolean> colorWriteMaskRed();

    public abstract void setColorWriteMaskRed(ArrayList<Boolean> v);

    public abstract ArrayList<Boolean> colorWriteMaskGreen();

    public abstract void setColorWriteMaskGreen(ArrayList<Boolean> v);

    public abstract ArrayList<Boolean> colorWriteMaskBlue();

    public abstract ArrayList<Boolean> setColorWriteMaskBlue(ArrayList<Boolean> v);

    public abstract ArrayList<Boolean> colorWriteMaskAlpha();

    public abstract void setColorWriteMaskAlpha(ArrayList<Boolean> v);

    public abstract boolean conservativeRasterization();

    public abstract void setConservativeRasterization(boolean b);

    public abstract void compile();

    public abstract ConstantLocation getConstantLocation(String name);

    public abstract TextureUnit getTextureUnit(String name);

    private static final class CppProxy extends PipelineState
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public ArrayList<VertexStructure> getInputLayout()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getInputLayout(this.nativeRef);
        }
        private native ArrayList<VertexStructure> native_getInputLayout(long _nativeRef);

        @Override
        public Shader getVertexShader()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getVertexShader(this.nativeRef);
        }
        private native Shader native_getVertexShader(long _nativeRef);

        @Override
        public void setVertexShader(Shader shader)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setVertexShader(this.nativeRef, shader);
        }
        private native void native_setVertexShader(long _nativeRef, Shader shader);

        @Override
        public Shader getFragmentShader()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFragmentShader(this.nativeRef);
        }
        private native Shader native_getFragmentShader(long _nativeRef);

        @Override
        public void setFragmentShader(Shader shader)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFragmentShader(this.nativeRef, shader);
        }
        private native void native_setFragmentShader(long _nativeRef, Shader shader);

        @Override
        public Shader getGeometryShader()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getGeometryShader(this.nativeRef);
        }
        private native Shader native_getGeometryShader(long _nativeRef);

        @Override
        public void setGeometryShader(Shader shader)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setGeometryShader(this.nativeRef, shader);
        }
        private native void native_setGeometryShader(long _nativeRef, Shader shader);

        @Override
        public Shader getTessellationControlShader()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTessellationControlShader(this.nativeRef);
        }
        private native Shader native_getTessellationControlShader(long _nativeRef);

        @Override
        public void setTessellationControlShader(Shader shader)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setTessellationControlShader(this.nativeRef, shader);
        }
        private native void native_setTessellationControlShader(long _nativeRef, Shader shader);

        @Override
        public Shader getTessellationEvaluationShader()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTessellationEvaluationShader(this.nativeRef);
        }
        private native Shader native_getTessellationEvaluationShader(long _nativeRef);

        @Override
        public void setTessellationEvaluationShader(Shader shader)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setTessellationEvaluationShader(this.nativeRef, shader);
        }
        private native void native_setTessellationEvaluationShader(long _nativeRef, Shader shader);

        @Override
        public CullMode getCullMode()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCullMode(this.nativeRef);
        }
        private native CullMode native_getCullMode(long _nativeRef);

        @Override
        public void setCullMode(CullMode cullMode)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCullMode(this.nativeRef, cullMode);
        }
        private native void native_setCullMode(long _nativeRef, CullMode cullMode);

        @Override
        public boolean depthWrite()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_depthWrite(this.nativeRef);
        }
        private native boolean native_depthWrite(long _nativeRef);

        @Override
        public void setDepthWrite(boolean b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDepthWrite(this.nativeRef, b);
        }
        private native void native_setDepthWrite(long _nativeRef, boolean b);

        @Override
        public ZCompareMode depthMode()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_depthMode(this.nativeRef);
        }
        private native ZCompareMode native_depthMode(long _nativeRef);

        @Override
        public void setDepthMode(ZCompareMode m)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDepthMode(this.nativeRef, m);
        }
        private native void native_setDepthMode(long _nativeRef, ZCompareMode m);

        @Override
        public ZCompareMode stencilMode()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_stencilMode(this.nativeRef);
        }
        private native ZCompareMode native_stencilMode(long _nativeRef);

        @Override
        public ZCompareMode getStencilMode()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getStencilMode(this.nativeRef);
        }
        private native ZCompareMode native_getStencilMode(long _nativeRef);

        @Override
        public StencilAction stencilBothPass()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_stencilBothPass(this.nativeRef);
        }
        private native StencilAction native_stencilBothPass(long _nativeRef);

        @Override
        public void setStencilBothPass(StencilAction s)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setStencilBothPass(this.nativeRef, s);
        }
        private native void native_setStencilBothPass(long _nativeRef, StencilAction s);

        @Override
        public StencilAction stencilDepthFail()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_stencilDepthFail(this.nativeRef);
        }
        private native StencilAction native_stencilDepthFail(long _nativeRef);

        @Override
        public void setStencilDepthFail(StencilAction s)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setStencilDepthFail(this.nativeRef, s);
        }
        private native void native_setStencilDepthFail(long _nativeRef, StencilAction s);

        @Override
        public StencilAction stencilFail()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_stencilFail(this.nativeRef);
        }
        private native StencilAction native_stencilFail(long _nativeRef);

        @Override
        public void setStencilFail(StencilAction s)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setStencilFail(this.nativeRef, s);
        }
        private native void native_setStencilFail(long _nativeRef, StencilAction s);

        @Override
        public BlendingOperation blendSource()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_blendSource(this.nativeRef);
        }
        private native BlendingOperation native_blendSource(long _nativeRef);

        @Override
        public void setBlendSource(BlendingOperation s)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setBlendSource(this.nativeRef, s);
        }
        private native void native_setBlendSource(long _nativeRef, BlendingOperation s);

        @Override
        public BlendingOperation blendDestination()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_blendDestination(this.nativeRef);
        }
        private native BlendingOperation native_blendDestination(long _nativeRef);

        @Override
        public void setBlendDestination(BlendingOperation s)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setBlendDestination(this.nativeRef, s);
        }
        private native void native_setBlendDestination(long _nativeRef, BlendingOperation s);

        @Override
        public BlendingOperation alphaBlendSource()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_alphaBlendSource(this.nativeRef);
        }
        private native BlendingOperation native_alphaBlendSource(long _nativeRef);

        @Override
        public void setAlphaBlendSource(BlendingOperation s)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAlphaBlendSource(this.nativeRef, s);
        }
        private native void native_setAlphaBlendSource(long _nativeRef, BlendingOperation s);

        @Override
        public BlendingOperation alphaBlendDestination()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_alphaBlendDestination(this.nativeRef);
        }
        private native BlendingOperation native_alphaBlendDestination(long _nativeRef);

        @Override
        public void setAlphaBlendDestination(BlendingOperation s)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAlphaBlendDestination(this.nativeRef, s);
        }
        private native void native_setAlphaBlendDestination(long _nativeRef, BlendingOperation s);

        @Override
        public ArrayList<Boolean> colorWriteMaskRed()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_colorWriteMaskRed(this.nativeRef);
        }
        private native ArrayList<Boolean> native_colorWriteMaskRed(long _nativeRef);

        @Override
        public void setColorWriteMaskRed(ArrayList<Boolean> v)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setColorWriteMaskRed(this.nativeRef, v);
        }
        private native void native_setColorWriteMaskRed(long _nativeRef, ArrayList<Boolean> v);

        @Override
        public ArrayList<Boolean> colorWriteMaskGreen()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_colorWriteMaskGreen(this.nativeRef);
        }
        private native ArrayList<Boolean> native_colorWriteMaskGreen(long _nativeRef);

        @Override
        public void setColorWriteMaskGreen(ArrayList<Boolean> v)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setColorWriteMaskGreen(this.nativeRef, v);
        }
        private native void native_setColorWriteMaskGreen(long _nativeRef, ArrayList<Boolean> v);

        @Override
        public ArrayList<Boolean> colorWriteMaskBlue()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_colorWriteMaskBlue(this.nativeRef);
        }
        private native ArrayList<Boolean> native_colorWriteMaskBlue(long _nativeRef);

        @Override
        public ArrayList<Boolean> setColorWriteMaskBlue(ArrayList<Boolean> v)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_setColorWriteMaskBlue(this.nativeRef, v);
        }
        private native ArrayList<Boolean> native_setColorWriteMaskBlue(long _nativeRef, ArrayList<Boolean> v);

        @Override
        public ArrayList<Boolean> colorWriteMaskAlpha()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_colorWriteMaskAlpha(this.nativeRef);
        }
        private native ArrayList<Boolean> native_colorWriteMaskAlpha(long _nativeRef);

        @Override
        public void setColorWriteMaskAlpha(ArrayList<Boolean> v)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setColorWriteMaskAlpha(this.nativeRef, v);
        }
        private native void native_setColorWriteMaskAlpha(long _nativeRef, ArrayList<Boolean> v);

        @Override
        public boolean conservativeRasterization()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_conservativeRasterization(this.nativeRef);
        }
        private native boolean native_conservativeRasterization(long _nativeRef);

        @Override
        public void setConservativeRasterization(boolean b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setConservativeRasterization(this.nativeRef, b);
        }
        private native void native_setConservativeRasterization(long _nativeRef, boolean b);

        @Override
        public void compile()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_compile(this.nativeRef);
        }
        private native void native_compile(long _nativeRef);

        @Override
        public ConstantLocation getConstantLocation(String name)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getConstantLocation(this.nativeRef, name);
        }
        private native ConstantLocation native_getConstantLocation(long _nativeRef, String name);

        @Override
        public TextureUnit getTextureUnit(String name)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTextureUnit(this.nativeRef, name);
        }
        private native TextureUnit native_getTextureUnit(long _nativeRef, String name);
    }
}
