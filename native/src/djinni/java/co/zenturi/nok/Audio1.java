// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio.djinni

package co.zenturi.nok;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Audio1 {
    public abstract float max(float a, float b);

    public abstract float min(float a, float b);

    public abstract float mix(int samplesBox, AudioBuffer buffer);

    public abstract AudioChannel play(Sound sound, boolean loop);

    public abstract void playAgain(AudioChannel channel);

    public abstract AudioChannel stream(Sound sound, boolean loop);

    public static void init()
    {
        CppProxy.init();
    }

    private static final class CppProxy extends Audio1
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public float max(float a, float b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_max(this.nativeRef, a, b);
        }
        private native float native_max(long _nativeRef, float a, float b);

        @Override
        public float min(float a, float b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_min(this.nativeRef, a, b);
        }
        private native float native_min(long _nativeRef, float a, float b);

        @Override
        public float mix(int samplesBox, AudioBuffer buffer)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_mix(this.nativeRef, samplesBox, buffer);
        }
        private native float native_mix(long _nativeRef, int samplesBox, AudioBuffer buffer);

        @Override
        public AudioChannel play(Sound sound, boolean loop)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_play(this.nativeRef, sound, loop);
        }
        private native AudioChannel native_play(long _nativeRef, Sound sound, boolean loop);

        @Override
        public void playAgain(AudioChannel channel)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_playAgain(this.nativeRef, channel);
        }
        private native void native_playAgain(long _nativeRef, AudioChannel channel);

        @Override
        public AudioChannel stream(Sound sound, boolean loop)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_stream(this.nativeRef, sound, loop);
        }
        private native AudioChannel native_stream(long _nativeRef, Sound sound, boolean loop);

        public static native void init();
    }
}
