// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

package co.zenturi.nok;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Mat4 {
    public static final float WIDTH = 3;

    public static final float HEIGHT = 3;

    public abstract float get(float row, float col);

    public abstract void set(float row, float col, float v);

    public abstract Mat4 add(Mat4 mat);

    public abstract Mat4 sub(Mat4 mat);

    public abstract Mat4 multiply(float i);

    public abstract Mat4 clone();

    public abstract Mat4 transpose();

    public abstract Mat4 transpose3x3();

    public abstract float trace();

    public abstract float determinant();

    public static native Mat4 orthogonalProjection(float left, float right, float bottom, float top, float zn, float zf);

    public static native Mat4 perspective(float left, float right, float top, float bottom, float near, float far);

    public static native Mat4 perspectiveFOV(float fov, float aspect, float near, float far);

    public static native Mat4 lookAt(Vec3 eye, Vec3 at, Vec3 up);

    public static native Mat4 lookAlong(Vec3 axis, Vec3 eye, Vec3 up);

    public static native Mat4 translation(float x, float y);

    public static native Mat4 movement(float x, float y, float z);

    public static native Mat4 identity();

    public static native Mat4 scale(float scale);

    public static native Mat4 rotationX(float alpha);

    public static native Mat4 rotationY(float alpha);

    public static native Mat4 rotationZ(float alpha);

    public static native Mat4 rotation(float yaw, float pitch, float roll);

    public static native Mat4 create();

    public static native Mat4 from(Mat4 mat);

    public static native Mat4 linearInterpolate(Mat4 a, Mat4 b, float prop);

    private static final class CppProxy extends Mat4
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public float get(float row, float col)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_get(this.nativeRef, row, col);
        }
        private native float native_get(long _nativeRef, float row, float col);

        @Override
        public void set(float row, float col, float v)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_set(this.nativeRef, row, col, v);
        }
        private native void native_set(long _nativeRef, float row, float col, float v);

        @Override
        public Mat4 add(Mat4 mat)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_add(this.nativeRef, mat);
        }
        private native Mat4 native_add(long _nativeRef, Mat4 mat);

        @Override
        public Mat4 sub(Mat4 mat)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_sub(this.nativeRef, mat);
        }
        private native Mat4 native_sub(long _nativeRef, Mat4 mat);

        @Override
        public Mat4 multiply(float i)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_multiply(this.nativeRef, i);
        }
        private native Mat4 native_multiply(long _nativeRef, float i);

        @Override
        public Mat4 clone()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_clone(this.nativeRef);
        }
        private native Mat4 native_clone(long _nativeRef);

        @Override
        public Mat4 transpose()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_transpose(this.nativeRef);
        }
        private native Mat4 native_transpose(long _nativeRef);

        @Override
        public Mat4 transpose3x3()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_transpose3x3(this.nativeRef);
        }
        private native Mat4 native_transpose3x3(long _nativeRef);

        @Override
        public float trace()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_trace(this.nativeRef);
        }
        private native float native_trace(long _nativeRef);

        @Override
        public float determinant()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_determinant(this.nativeRef);
        }
        private native float native_determinant(long _nativeRef);
    }
}
