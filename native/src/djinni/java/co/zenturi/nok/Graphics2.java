// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

package co.zenturi.nok;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Graphics2 {
    public abstract void pushRotation(float angle, float centerx, float centery);

    public abstract void drawImage(Texture img, float x, float y);

    public abstract void drawScaledSubImage(Texture img, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh);

    public abstract void drawImageRenderTarget(RenderTarget img, float x, float y);

    public abstract void drawRect(float x, float y, float width, float height, float strength);

    public abstract void fillRect(float x, float y, float width, float height);

    public abstract void drawString(String text, float x, float y);

    public abstract void drawLine(float x1, float y1, float x2, float y2, float strength);

    public abstract void fillTriangle(float x1, float y1, float x2, float y2, float x3, float y3);

    public abstract void setPipeline(PipelineState pip);

    public abstract void scissor(int x, int y, int width, int height);

    public abstract void disableScissor();

    public abstract Mat3 getTransformation();

    public abstract Mat4 getProjectionMatrix();

    public abstract ArrayList<Integer> getFontGlyphs();

    public abstract void begin(boolean renderTargets, int width, int height, boolean clear, int clearColor);

    public abstract void clear(int color);

    public abstract void flush();

    public abstract void end();

    public abstract void drawVideoInternal(float x, float y, float width, float height);

    public abstract void drawVideo(float x, float y, float width, float height);

    public abstract int getColor();

    public abstract void setColor(float color);

    public abstract float getOpacity();

    public abstract void setOpacity(float opacity);

    public abstract ImageScaleQuality getImageScaleQuality();

    public abstract void setImageScaleQuality(ImageScaleQuality value);

    public abstract ImageScaleQuality getMipmapScaleQuality();

    public abstract void setMipmapScaleQuality(ImageScaleQuality value);

    public abstract Kavur getFont();

    public abstract int getFontSize();

    public abstract void setFontSize(int value);

    public abstract double getFontColor();

    public abstract void setFontColor(double color);

    public static native Graphics2 create(int width, int height, boolean rTargets);

    private static final class CppProxy extends Graphics2
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void pushRotation(float angle, float centerx, float centery)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_pushRotation(this.nativeRef, angle, centerx, centery);
        }
        private native void native_pushRotation(long _nativeRef, float angle, float centerx, float centery);

        @Override
        public void drawImage(Texture img, float x, float y)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawImage(this.nativeRef, img, x, y);
        }
        private native void native_drawImage(long _nativeRef, Texture img, float x, float y);

        @Override
        public void drawScaledSubImage(Texture img, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawScaledSubImage(this.nativeRef, img, sx, sy, sw, sh, dx, dy, dw, dh);
        }
        private native void native_drawScaledSubImage(long _nativeRef, Texture img, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh);

        @Override
        public void drawImageRenderTarget(RenderTarget img, float x, float y)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawImageRenderTarget(this.nativeRef, img, x, y);
        }
        private native void native_drawImageRenderTarget(long _nativeRef, RenderTarget img, float x, float y);

        @Override
        public void drawRect(float x, float y, float width, float height, float strength)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawRect(this.nativeRef, x, y, width, height, strength);
        }
        private native void native_drawRect(long _nativeRef, float x, float y, float width, float height, float strength);

        @Override
        public void fillRect(float x, float y, float width, float height)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_fillRect(this.nativeRef, x, y, width, height);
        }
        private native void native_fillRect(long _nativeRef, float x, float y, float width, float height);

        @Override
        public void drawString(String text, float x, float y)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawString(this.nativeRef, text, x, y);
        }
        private native void native_drawString(long _nativeRef, String text, float x, float y);

        @Override
        public void drawLine(float x1, float y1, float x2, float y2, float strength)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawLine(this.nativeRef, x1, y1, x2, y2, strength);
        }
        private native void native_drawLine(long _nativeRef, float x1, float y1, float x2, float y2, float strength);

        @Override
        public void fillTriangle(float x1, float y1, float x2, float y2, float x3, float y3)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_fillTriangle(this.nativeRef, x1, y1, x2, y2, x3, y3);
        }
        private native void native_fillTriangle(long _nativeRef, float x1, float y1, float x2, float y2, float x3, float y3);

        @Override
        public void setPipeline(PipelineState pip)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPipeline(this.nativeRef, pip);
        }
        private native void native_setPipeline(long _nativeRef, PipelineState pip);

        @Override
        public void scissor(int x, int y, int width, int height)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_scissor(this.nativeRef, x, y, width, height);
        }
        private native void native_scissor(long _nativeRef, int x, int y, int width, int height);

        @Override
        public void disableScissor()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_disableScissor(this.nativeRef);
        }
        private native void native_disableScissor(long _nativeRef);

        @Override
        public Mat3 getTransformation()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTransformation(this.nativeRef);
        }
        private native Mat3 native_getTransformation(long _nativeRef);

        @Override
        public Mat4 getProjectionMatrix()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getProjectionMatrix(this.nativeRef);
        }
        private native Mat4 native_getProjectionMatrix(long _nativeRef);

        @Override
        public ArrayList<Integer> getFontGlyphs()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFontGlyphs(this.nativeRef);
        }
        private native ArrayList<Integer> native_getFontGlyphs(long _nativeRef);

        @Override
        public void begin(boolean renderTargets, int width, int height, boolean clear, int clearColor)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_begin(this.nativeRef, renderTargets, width, height, clear, clearColor);
        }
        private native void native_begin(long _nativeRef, boolean renderTargets, int width, int height, boolean clear, int clearColor);

        @Override
        public void clear(int color)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clear(this.nativeRef, color);
        }
        private native void native_clear(long _nativeRef, int color);

        @Override
        public void flush()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_flush(this.nativeRef);
        }
        private native void native_flush(long _nativeRef);

        @Override
        public void end()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_end(this.nativeRef);
        }
        private native void native_end(long _nativeRef);

        @Override
        public void drawVideoInternal(float x, float y, float width, float height)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawVideoInternal(this.nativeRef, x, y, width, height);
        }
        private native void native_drawVideoInternal(long _nativeRef, float x, float y, float width, float height);

        @Override
        public void drawVideo(float x, float y, float width, float height)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawVideo(this.nativeRef, x, y, width, height);
        }
        private native void native_drawVideo(long _nativeRef, float x, float y, float width, float height);

        @Override
        public int getColor()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getColor(this.nativeRef);
        }
        private native int native_getColor(long _nativeRef);

        @Override
        public void setColor(float color)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setColor(this.nativeRef, color);
        }
        private native void native_setColor(long _nativeRef, float color);

        @Override
        public float getOpacity()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getOpacity(this.nativeRef);
        }
        private native float native_getOpacity(long _nativeRef);

        @Override
        public void setOpacity(float opacity)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setOpacity(this.nativeRef, opacity);
        }
        private native void native_setOpacity(long _nativeRef, float opacity);

        @Override
        public ImageScaleQuality getImageScaleQuality()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getImageScaleQuality(this.nativeRef);
        }
        private native ImageScaleQuality native_getImageScaleQuality(long _nativeRef);

        @Override
        public void setImageScaleQuality(ImageScaleQuality value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setImageScaleQuality(this.nativeRef, value);
        }
        private native void native_setImageScaleQuality(long _nativeRef, ImageScaleQuality value);

        @Override
        public ImageScaleQuality getMipmapScaleQuality()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMipmapScaleQuality(this.nativeRef);
        }
        private native ImageScaleQuality native_getMipmapScaleQuality(long _nativeRef);

        @Override
        public void setMipmapScaleQuality(ImageScaleQuality value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMipmapScaleQuality(this.nativeRef, value);
        }
        private native void native_setMipmapScaleQuality(long _nativeRef, ImageScaleQuality value);

        @Override
        public Kavur getFont()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFont(this.nativeRef);
        }
        private native Kavur native_getFont(long _nativeRef);

        @Override
        public int getFontSize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFontSize(this.nativeRef);
        }
        private native int native_getFontSize(long _nativeRef);

        @Override
        public void setFontSize(int value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFontSize(this.nativeRef, value);
        }
        private native void native_setFontSize(long _nativeRef, int value);

        @Override
        public double getFontColor()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFontColor(this.nativeRef);
        }
        private native double native_getFontColor(long _nativeRef);

        @Override
        public void setFontColor(double color)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFontColor(this.nativeRef, color);
        }
        private native void native_setFontColor(long _nativeRef, double color);
    }
}
