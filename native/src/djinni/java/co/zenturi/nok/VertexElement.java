// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

package co.zenturi.nok;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class VertexElement {
    public abstract String getName();

    public abstract void setName(String n);

    public abstract VertexAttribute getAttribute();

    public abstract void setAttribute(VertexAttribute a);

    public abstract VertexData getData();

    public abstract void setData(VertexData d);

    public static native VertexElement create();

    public static native VertexElement createWithName(String name, VertexData data);

    public static native VertexElement createWithAttribute(VertexAttribute attribute, VertexData data);

    private static final class CppProxy extends VertexElement
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public String getName()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getName(this.nativeRef);
        }
        private native String native_getName(long _nativeRef);

        @Override
        public void setName(String n)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setName(this.nativeRef, n);
        }
        private native void native_setName(long _nativeRef, String n);

        @Override
        public VertexAttribute getAttribute()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAttribute(this.nativeRef);
        }
        private native VertexAttribute native_getAttribute(long _nativeRef);

        @Override
        public void setAttribute(VertexAttribute a)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAttribute(this.nativeRef, a);
        }
        private native void native_setAttribute(long _nativeRef, VertexAttribute a);

        @Override
        public VertexData getData()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getData(this.nativeRef);
        }
        private native VertexData native_getData(long _nativeRef);

        @Override
        public void setData(VertexData d)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setData(this.nativeRef, d);
        }
        private native void native_setData(long _nativeRef, VertexData d);
    }
}
