// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

package co.zenturi.nok;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class TextShaderPainter {
    public abstract int getFontSize();

    public abstract PipelineState getPipeline();

    public abstract void setPipeline(PipelineState p);

    public abstract void setProjection(Mat4 projectionMatrix);

    public abstract void setBilinearFilter(boolean bilinear);

    public abstract void setFont(Kavur font);

    public abstract void drawString(String text, int start, int length, float opacity, double color, float x, float y, Mat3 transformation, ArrayList<Integer> fontGlyphs);

    public abstract void end();

    public static native TextShaderPainter create();

    private static final class CppProxy extends TextShaderPainter
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public int getFontSize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFontSize(this.nativeRef);
        }
        private native int native_getFontSize(long _nativeRef);

        @Override
        public PipelineState getPipeline()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPipeline(this.nativeRef);
        }
        private native PipelineState native_getPipeline(long _nativeRef);

        @Override
        public void setPipeline(PipelineState p)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPipeline(this.nativeRef, p);
        }
        private native void native_setPipeline(long _nativeRef, PipelineState p);

        @Override
        public void setProjection(Mat4 projectionMatrix)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setProjection(this.nativeRef, projectionMatrix);
        }
        private native void native_setProjection(long _nativeRef, Mat4 projectionMatrix);

        @Override
        public void setBilinearFilter(boolean bilinear)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setBilinearFilter(this.nativeRef, bilinear);
        }
        private native void native_setBilinearFilter(long _nativeRef, boolean bilinear);

        @Override
        public void setFont(Kavur font)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFont(this.nativeRef, font);
        }
        private native void native_setFont(long _nativeRef, Kavur font);

        @Override
        public void drawString(String text, int start, int length, float opacity, double color, float x, float y, Mat3 transformation, ArrayList<Integer> fontGlyphs)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawString(this.nativeRef, text, start, length, opacity, color, x, y, transformation, fontGlyphs);
        }
        private native void native_drawString(long _nativeRef, String text, int start, int length, float opacity, double color, float x, float y, Mat3 transformation, ArrayList<Integer> fontGlyphs);

        @Override
        public void end()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_end(this.nativeRef);
        }
        private native void native_end(long _nativeRef);
    }
}
