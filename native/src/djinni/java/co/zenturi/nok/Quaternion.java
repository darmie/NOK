// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

package co.zenturi.nok;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Quaternion {
    public abstract Quaternion slerp(float t, Quaternion q);

    public abstract Quaternion rotated(Quaternion b);

    public abstract Quaternion scaled(float scale);

    public abstract float dot(Quaternion q);

    public abstract Mat4 matrix();

    public abstract Quaternion add(Quaternion q);

    public abstract Quaternion sub(Quaternion q);

    public abstract Quaternion addVec3(Vec3 v);

    public abstract Quaternion multiply(Quaternion q);

    public abstract void normalize();

    public abstract void rotate(Quaternion q);

    public abstract Quaternion conjugate();

    public abstract Quaternion invert();

    public abstract float getX();

    public abstract float getY();

    public abstract float getZ();

    public abstract void setX(float x);

    public abstract void setY(float y);

    public abstract void setZ(float z);

    public static Quaternion create(float x, float y, float z, float w)
    {
        return CppProxy.create(x,
                               y,
                               z,
                               w);
    }

    public static Quaternion fromAxis(Vec3 axis, float radian)
    {
        return CppProxy.fromAxis(axis,
                                 radian);
    }

    private static final class CppProxy extends Quaternion
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public Quaternion slerp(float t, Quaternion q)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_slerp(this.nativeRef, t, q);
        }
        private native Quaternion native_slerp(long _nativeRef, float t, Quaternion q);

        @Override
        public Quaternion rotated(Quaternion b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_rotated(this.nativeRef, b);
        }
        private native Quaternion native_rotated(long _nativeRef, Quaternion b);

        @Override
        public Quaternion scaled(float scale)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_scaled(this.nativeRef, scale);
        }
        private native Quaternion native_scaled(long _nativeRef, float scale);

        @Override
        public float dot(Quaternion q)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_dot(this.nativeRef, q);
        }
        private native float native_dot(long _nativeRef, Quaternion q);

        @Override
        public Mat4 matrix()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_matrix(this.nativeRef);
        }
        private native Mat4 native_matrix(long _nativeRef);

        @Override
        public Quaternion add(Quaternion q)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_add(this.nativeRef, q);
        }
        private native Quaternion native_add(long _nativeRef, Quaternion q);

        @Override
        public Quaternion sub(Quaternion q)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_sub(this.nativeRef, q);
        }
        private native Quaternion native_sub(long _nativeRef, Quaternion q);

        @Override
        public Quaternion addVec3(Vec3 v)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_addVec3(this.nativeRef, v);
        }
        private native Quaternion native_addVec3(long _nativeRef, Vec3 v);

        @Override
        public Quaternion multiply(Quaternion q)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_multiply(this.nativeRef, q);
        }
        private native Quaternion native_multiply(long _nativeRef, Quaternion q);

        @Override
        public void normalize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_normalize(this.nativeRef);
        }
        private native void native_normalize(long _nativeRef);

        @Override
        public void rotate(Quaternion q)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_rotate(this.nativeRef, q);
        }
        private native void native_rotate(long _nativeRef, Quaternion q);

        @Override
        public Quaternion conjugate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_conjugate(this.nativeRef);
        }
        private native Quaternion native_conjugate(long _nativeRef);

        @Override
        public Quaternion invert()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_invert(this.nativeRef);
        }
        private native Quaternion native_invert(long _nativeRef);

        @Override
        public float getX()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getX(this.nativeRef);
        }
        private native float native_getX(long _nativeRef);

        @Override
        public float getY()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getY(this.nativeRef);
        }
        private native float native_getY(long _nativeRef);

        @Override
        public float getZ()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getZ(this.nativeRef);
        }
        private native float native_getZ(long _nativeRef);

        @Override
        public void setX(float x)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setX(this.nativeRef, x);
        }
        private native void native_setX(long _nativeRef, float x);

        @Override
        public void setY(float y)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setY(this.nativeRef, y);
        }
        private native void native_setY(long _nativeRef, float y);

        @Override
        public void setZ(float z)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setZ(this.nativeRef, z);
        }
        private native void native_setZ(long _nativeRef, float z);

        public static native Quaternion create(float x, float y, float z, float w);

        public static native Quaternion fromAxis(Vec3 axis, float radian);
    }
}
