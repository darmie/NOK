// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

package co.zenturi.nok;

import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Graphics {
    public static final int CLEARCOLORFLAG = 1;

    public static final int CLEARDEPTHFLAG = 2;

    public static final int CLEARSTENCILFLAG = 4;

    public static void setBool(ConstantLocation location, boolean value)
    {
        CppProxy.setBool(location,
                         value);
    }

    public static void setInt(ConstantLocation location, int value)
    {
        CppProxy.setInt(location,
                        value);
    }

    public static void setInt2(ConstantLocation location, int value1, int value2)
    {
        CppProxy.setInt2(location,
                         value1,
                         value2);
    }

    public static void setInt3(ConstantLocation location, int value1, int value2, int value3)
    {
        CppProxy.setInt3(location,
                         value1,
                         value2,
                         value3);
    }

    public static void setInt4(ConstantLocation location, int value1, int value2, int value3, int value4)
    {
        CppProxy.setInt4(location,
                         value1,
                         value2,
                         value3,
                         value4);
    }

    public static void setInts(ConstantLocation location, ArrayList<Integer> values, int count)
    {
        CppProxy.setInts(location,
                         values,
                         count);
    }

    public static void setFloat2(ConstantLocation location, float value1, float value2)
    {
        CppProxy.setFloat2(location,
                           value1,
                           value2);
    }

    public static void setFloat3(ConstantLocation location, float value1, float value2, float value3)
    {
        CppProxy.setFloat3(location,
                           value1,
                           value2,
                           value3);
    }

    public static void setFloat4(ConstantLocation location, int value1, float value2, float value3, float value4)
    {
        CppProxy.setFloat4(location,
                           value1,
                           value2,
                           value3,
                           value4);
    }

    public static void setFloats(ConstantLocation location, ArrayList<Float> values, float count)
    {
        CppProxy.setFloats(location,
                           values,
                           count);
    }

    public static void setMatrix3(ConstantLocation location, Mat3 mat)
    {
        CppProxy.setMatrix3(location,
                            mat);
    }

    public static void setMatrix4(ConstantLocation location, Mat4 mat)
    {
        CppProxy.setMatrix4(location,
                            mat);
    }

    public static void setVertexBuffer(VertexBuffer buf)
    {
        CppProxy.setVertexBuffer(buf);
    }

    public static void setVertexBuffers(ArrayList<VertexBuffer> bufs, int count)
    {
        CppProxy.setVertexBuffers(bufs,
                                  count);
    }

    public static void setIndexBuffer(IndexBuffer buf)
    {
        CppProxy.setIndexBuffer(buf);
    }

    public static void setTexture(TextureUnit unit, Texture texture)
    {
        CppProxy.setTexture(unit,
                            texture);
    }

    public static void setTextureArray(TextureUnit unit, TextureArray textureArray)
    {
        CppProxy.setTextureArray(unit,
                                 textureArray);
    }

    public static void setPipeline(PipelineState pipeline)
    {
        CppProxy.setPipeline(pipeline);
    }

    public static void setStencilReferenceValue(int value)
    {
        CppProxy.setStencilReferenceValue(value);
    }

    public static void drawIndexedVertices(int start, int count)
    {
        CppProxy.drawIndexedVertices(start,
                                     count);
    }

    public static void drawIndexedVerticesInstanced(int instanceCount, int start, int count)
    {
        CppProxy.drawIndexedVerticesInstanced(instanceCount,
                                              start,
                                              count);
    }

    public static int antialiasingSamples()
    {
        return CppProxy.antialiasingSamples();
    }

    public static void setAntialiasingSamples(int samples)
    {
        CppProxy.setAntialiasingSamples(samples);
    }

    public static boolean renderTargetsInvertedY()
    {
        return CppProxy.renderTargetsInvertedY();
    }

    public static void setRenderTargets(ArrayList<RenderTarget> targets, int count)
    {
        CppProxy.setRenderTargets(targets,
                                  count);
    }

    public static void setRenderTarget(RenderTarget target)
    {
        CppProxy.setRenderTarget(target);
    }

    public static void setRenderTargetFace(RenderTarget texture, int face)
    {
        CppProxy.setRenderTargetFace(texture,
                                     face);
    }

    public static void restoreRenderTarget()
    {
        CppProxy.restoreRenderTarget();
    }

    public static void begin(int win)
    {
        CppProxy.begin(win);
    }

    public static void end(int win)
    {
        CppProxy.end(win);
    }

    public static boolean swapBuffers()
    {
        return CppProxy.swapBuffers();
    }

    public static void viewport(int x, int y, int width, int height)
    {
        CppProxy.viewport(x,
                          y,
                          width,
                          height);
    }

    public static void scissor(int x, int y, int width, int height)
    {
        CppProxy.scissor(x,
                         y,
                         width,
                         height);
    }

    public static void disableScissor()
    {
        CppProxy.disableScissor();
    }

    public static void setTextureAddressing(TextureUnit unit, TexDir dir, TextureAddressing addressing)
    {
        CppProxy.setTextureAddressing(unit,
                                      dir,
                                      addressing);
    }

    public static void setTextureMagnificationFilter(TextureUnit unit, TextureFilter filer)
    {
        CppProxy.setTextureMagnificationFilter(unit,
                                               filer);
    }

    public static void setTextureMinificationFilter(TextureUnit unit, TextureFilter filer)
    {
        CppProxy.setTextureMinificationFilter(unit,
                                              filer);
    }

    public static void setTextureMipmapFilter(TextureUnit unit, MipmapFilter filer)
    {
        CppProxy.setTextureMipmapFilter(unit,
                                        filer);
    }

    public static void setTexture3DAddressing(TextureUnit unit, TexDir dir, TextureAddressing addressing)
    {
        CppProxy.setTexture3DAddressing(unit,
                                        dir,
                                        addressing);
    }

    public static void setTexture3DMagnificationFilter(TextureUnit unit, TextureFilter filer)
    {
        CppProxy.setTexture3DMagnificationFilter(unit,
                                                 filer);
    }

    public static void setTexture3DMinificationFilter(TextureUnit unit, TextureFilter filer)
    {
        CppProxy.setTexture3DMinificationFilter(unit,
                                                filer);
    }

    public static void setTexture3DMipmapFilter(TextureUnit unit, MipmapFilter filer)
    {
        CppProxy.setTexture3DMipmapFilter(unit,
                                          filer);
    }

    public static void setTextureCompareMode(TextureUnit unit, boolean enabled)
    {
        CppProxy.setTextureCompareMode(unit,
                                       enabled);
    }

    public static void setCubeMapCompareMode(TextureUnit unit, boolean enabled)
    {
        CppProxy.setCubeMapCompareMode(unit,
                                       enabled);
    }

    public static void setTextureOperation(TextureOperation operation, TextureArgument arg1, TextureArgument arg2)
    {
        CppProxy.setTextureOperation(operation,
                                     arg1,
                                     arg2);
    }

    public static boolean nonPow2TexturesSupported()
    {
        return CppProxy.nonPow2TexturesSupported();
    }

    public static boolean getFullscreen()
    {
        return CppProxy.getFullscreen();
    }

    public static void init(int windowId, int depthBufferBits, int stencilBufferBits, boolean vsync)
    {
        CppProxy.init(windowId,
                      depthBufferBits,
                      stencilBufferBits,
                      vsync);
    }

    public static void destroy(int windowId)
    {
        CppProxy.destroy(windowId);
    }

    public static void flush()
    {
        CppProxy.flush();
    }

    public static boolean initOcclusionQuery(ArrayList<Double> occlusionQuery)
    {
        return CppProxy.initOcclusionQuery(occlusionQuery);
    }

    public static void deleteOcclusionQuery(double occlusionQuery)
    {
        CppProxy.deleteOcclusionQuery(occlusionQuery);
    }

    public static void renderOcclusionQuery(double occlusionQuery, int triangles)
    {
        CppProxy.renderOcclusionQuery(occlusionQuery,
                                      triangles);
    }

    public static boolean isQueryResultsAvailable(double occlusionQuery)
    {
        return CppProxy.isQueryResultsAvailable(occlusionQuery);
    }

    public static void getQueryResults(double occlusionQuery, ArrayList<Double> pixelCount)
    {
        CppProxy.getQueryResults(occlusionQuery,
                                 pixelCount);
    }

    public static void clear(int flags, double color, float depth, int stencil)
    {
        CppProxy.clear(flags,
                       color,
                       depth,
                       stencil);
    }

    private static final class CppProxy extends Graphics
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        public static native void setBool(ConstantLocation location, boolean value);

        public static native void setInt(ConstantLocation location, int value);

        public static native void setInt2(ConstantLocation location, int value1, int value2);

        public static native void setInt3(ConstantLocation location, int value1, int value2, int value3);

        public static native void setInt4(ConstantLocation location, int value1, int value2, int value3, int value4);

        public static native void setInts(ConstantLocation location, ArrayList<Integer> values, int count);

        public static native void setFloat2(ConstantLocation location, float value1, float value2);

        public static native void setFloat3(ConstantLocation location, float value1, float value2, float value3);

        public static native void setFloat4(ConstantLocation location, int value1, float value2, float value3, float value4);

        public static native void setFloats(ConstantLocation location, ArrayList<Float> values, float count);

        public static native void setMatrix3(ConstantLocation location, Mat3 mat);

        public static native void setMatrix4(ConstantLocation location, Mat4 mat);

        public static native void setVertexBuffer(VertexBuffer buf);

        public static native void setVertexBuffers(ArrayList<VertexBuffer> bufs, int count);

        public static native void setIndexBuffer(IndexBuffer buf);

        public static native void setTexture(TextureUnit unit, Texture texture);

        public static native void setTextureArray(TextureUnit unit, TextureArray textureArray);

        public static native void setPipeline(PipelineState pipeline);

        public static native void setStencilReferenceValue(int value);

        public static native void drawIndexedVertices(int start, int count);

        public static native void drawIndexedVerticesInstanced(int instanceCount, int start, int count);

        public static native int antialiasingSamples();

        public static native void setAntialiasingSamples(int samples);

        public static native boolean renderTargetsInvertedY();

        public static native void setRenderTargets(ArrayList<RenderTarget> targets, int count);

        public static native void setRenderTarget(RenderTarget target);

        public static native void setRenderTargetFace(RenderTarget texture, int face);

        public static native void restoreRenderTarget();

        public static native void begin(int win);

        public static native void end(int win);

        public static native boolean swapBuffers();

        public static native void viewport(int x, int y, int width, int height);

        public static native void scissor(int x, int y, int width, int height);

        public static native void disableScissor();

        public static native void setTextureAddressing(TextureUnit unit, TexDir dir, TextureAddressing addressing);

        public static native void setTextureMagnificationFilter(TextureUnit unit, TextureFilter filer);

        public static native void setTextureMinificationFilter(TextureUnit unit, TextureFilter filer);

        public static native void setTextureMipmapFilter(TextureUnit unit, MipmapFilter filer);

        public static native void setTexture3DAddressing(TextureUnit unit, TexDir dir, TextureAddressing addressing);

        public static native void setTexture3DMagnificationFilter(TextureUnit unit, TextureFilter filer);

        public static native void setTexture3DMinificationFilter(TextureUnit unit, TextureFilter filer);

        public static native void setTexture3DMipmapFilter(TextureUnit unit, MipmapFilter filer);

        public static native void setTextureCompareMode(TextureUnit unit, boolean enabled);

        public static native void setCubeMapCompareMode(TextureUnit unit, boolean enabled);

        public static native void setTextureOperation(TextureOperation operation, TextureArgument arg1, TextureArgument arg2);

        public static native boolean nonPow2TexturesSupported();

        public static native boolean getFullscreen();

        public static native void init(int windowId, int depthBufferBits, int stencilBufferBits, boolean vsync);

        public static native void destroy(int windowId);

        public static native void flush();

        public static native boolean initOcclusionQuery(ArrayList<Double> occlusionQuery);

        public static native void deleteOcclusionQuery(double occlusionQuery);

        public static native void renderOcclusionQuery(double occlusionQuery, int triangles);

        public static native boolean isQueryResultsAvailable(double occlusionQuery);

        public static native void getQueryResults(double occlusionQuery, ArrayList<Double> pixelCount);

        public static native void clear(int flags, double color, float depth, int stencil);
    }
}
