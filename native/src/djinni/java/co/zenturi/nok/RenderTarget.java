// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

package co.zenturi.nok;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class RenderTarget {
    public abstract int getWidth();

    public abstract int getHeight();

    public abstract int getTexWidth();

    public abstract int getTexHeight();

    public abstract int getContextId();

    public abstract void setWidth(int width);

    public abstract void setHeight(int height);

    public abstract void setTexWidth(int width);

    public abstract void setTexHeight(int height);

    public abstract void setContextId(int id);

    public abstract boolean isCubeMap();

    public abstract boolean isDepthAttachment();

    public abstract void useColorAsTexture(TextureUnit unit);

    public abstract void useDepthAsTexture(TextureUnit unit);

    public abstract void setDepthStencilFrom(RenderTarget source);

    public abstract void getPixels(byte[] data);

    public abstract void generateMipmaps(int levels);

    public static RenderTarget create(int width, int height, int depthBufferBits, boolean antialiasing, RenderTargetFormat format, int stencilBufferBits, int contextId)
    {
        return CppProxy.create(width,
                               height,
                               depthBufferBits,
                               antialiasing,
                               format,
                               stencilBufferBits,
                               contextId);
    }

    public static RenderTarget createCube(int cubeMapSize, int depthBufferBits, boolean antialiasing, RenderTargetFormat format, int stencilBufferBits, int contextId)
    {
        return CppProxy.createCube(cubeMapSize,
                                   depthBufferBits,
                                   antialiasing,
                                   format,
                                   stencilBufferBits,
                                   contextId);
    }

    private static final class CppProxy extends RenderTarget
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public int getWidth()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getWidth(this.nativeRef);
        }
        private native int native_getWidth(long _nativeRef);

        @Override
        public int getHeight()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getHeight(this.nativeRef);
        }
        private native int native_getHeight(long _nativeRef);

        @Override
        public int getTexWidth()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTexWidth(this.nativeRef);
        }
        private native int native_getTexWidth(long _nativeRef);

        @Override
        public int getTexHeight()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTexHeight(this.nativeRef);
        }
        private native int native_getTexHeight(long _nativeRef);

        @Override
        public int getContextId()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getContextId(this.nativeRef);
        }
        private native int native_getContextId(long _nativeRef);

        @Override
        public void setWidth(int width)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setWidth(this.nativeRef, width);
        }
        private native void native_setWidth(long _nativeRef, int width);

        @Override
        public void setHeight(int height)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setHeight(this.nativeRef, height);
        }
        private native void native_setHeight(long _nativeRef, int height);

        @Override
        public void setTexWidth(int width)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setTexWidth(this.nativeRef, width);
        }
        private native void native_setTexWidth(long _nativeRef, int width);

        @Override
        public void setTexHeight(int height)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setTexHeight(this.nativeRef, height);
        }
        private native void native_setTexHeight(long _nativeRef, int height);

        @Override
        public void setContextId(int id)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setContextId(this.nativeRef, id);
        }
        private native void native_setContextId(long _nativeRef, int id);

        @Override
        public boolean isCubeMap()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isCubeMap(this.nativeRef);
        }
        private native boolean native_isCubeMap(long _nativeRef);

        @Override
        public boolean isDepthAttachment()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isDepthAttachment(this.nativeRef);
        }
        private native boolean native_isDepthAttachment(long _nativeRef);

        @Override
        public void useColorAsTexture(TextureUnit unit)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_useColorAsTexture(this.nativeRef, unit);
        }
        private native void native_useColorAsTexture(long _nativeRef, TextureUnit unit);

        @Override
        public void useDepthAsTexture(TextureUnit unit)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_useDepthAsTexture(this.nativeRef, unit);
        }
        private native void native_useDepthAsTexture(long _nativeRef, TextureUnit unit);

        @Override
        public void setDepthStencilFrom(RenderTarget source)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDepthStencilFrom(this.nativeRef, source);
        }
        private native void native_setDepthStencilFrom(long _nativeRef, RenderTarget source);

        @Override
        public void getPixels(byte[] data)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_getPixels(this.nativeRef, data);
        }
        private native void native_getPixels(long _nativeRef, byte[] data);

        @Override
        public void generateMipmaps(int levels)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_generateMipmaps(this.nativeRef, levels);
        }
        private native void native_generateMipmaps(long _nativeRef, int levels);

        public static native RenderTarget create(int width, int height, int depthBufferBits, boolean antialiasing, RenderTargetFormat format, int stencilBufferBits, int contextId);

        public static native RenderTarget createCube(int cubeMapSize, int depthBufferBits, boolean antialiasing, RenderTargetFormat format, int stencilBufferBits, int contextId);
    }
}
