// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

package co.zenturi.nok;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Mat2i {
    public static final int WIDTH = 2;

    public static final int HEIGHT = 2;

    public abstract float get(int row, int col);

    public abstract void set(int row, int col, int v);

    public abstract Mat2i add(Mat2i mat);

    public abstract Mat2i sub(Mat2i mat);

    public abstract Mat2i multiply(int i);

    public abstract Mat2i clone();

    public abstract Mat2i transpose();

    public abstract Mat2i transpose3x3();

    public abstract int trace();

    public abstract int determinant();

    public static Mat2i orthogonalProjection(float left, float right, float bottom, float top, float zn, float zf)
    {
        return CppProxy.orthogonalProjection(left,
                                             right,
                                             bottom,
                                             top,
                                             zn,
                                             zf);
    }

    public static Mat2i perspective(float left, float right, float top, float bottom, float near, float far)
    {
        return CppProxy.perspective(left,
                                    right,
                                    top,
                                    bottom,
                                    near,
                                    far);
    }

    public static Mat2i perspectiveFOV(float fov, float aspect, float near, float far)
    {
        return CppProxy.perspectiveFOV(fov,
                                       aspect,
                                       near,
                                       far);
    }

    public static Mat2i lookAt(Vec3i eye, Vec3i at, Vec3i up)
    {
        return CppProxy.lookAt(eye,
                               at,
                               up);
    }

    public static Mat2i lookAlong(Vec3i axis, Vec3i eye, Vec3i up)
    {
        return CppProxy.lookAlong(axis,
                                  eye,
                                  up);
    }

    public static Mat2i translation(float x, float y)
    {
        return CppProxy.translation(x,
                                    y);
    }

    public static Mat2i movement(float x, float y, float z)
    {
        return CppProxy.movement(x,
                                 y,
                                 z);
    }

    public static Mat2i identity()
    {
        return CppProxy.identity();
    }

    public static Mat2i scale(float scale)
    {
        return CppProxy.scale(scale);
    }

    public static Mat2i rotationX(float alpha)
    {
        return CppProxy.rotationX(alpha);
    }

    public static Mat2i rotationY(float alpha)
    {
        return CppProxy.rotationY(alpha);
    }

    public static Mat2i rotationZ(float alpha)
    {
        return CppProxy.rotationZ(alpha);
    }

    public static Mat2i rotation(float yaw, float pitch, float roll)
    {
        return CppProxy.rotation(yaw,
                                 pitch,
                                 roll);
    }

    public static Mat2i create()
    {
        return CppProxy.create();
    }

    public static Mat2i from(Mat2i mat)
    {
        return CppProxy.from(mat);
    }

    public static Mat2i linearInterpolate(Mat2i a, Mat2i b, float prop)
    {
        return CppProxy.linearInterpolate(a,
                                          b,
                                          prop);
    }

    private static final class CppProxy extends Mat2i
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public float get(int row, int col)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_get(this.nativeRef, row, col);
        }
        private native float native_get(long _nativeRef, int row, int col);

        @Override
        public void set(int row, int col, int v)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_set(this.nativeRef, row, col, v);
        }
        private native void native_set(long _nativeRef, int row, int col, int v);

        @Override
        public Mat2i add(Mat2i mat)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_add(this.nativeRef, mat);
        }
        private native Mat2i native_add(long _nativeRef, Mat2i mat);

        @Override
        public Mat2i sub(Mat2i mat)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_sub(this.nativeRef, mat);
        }
        private native Mat2i native_sub(long _nativeRef, Mat2i mat);

        @Override
        public Mat2i multiply(int i)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_multiply(this.nativeRef, i);
        }
        private native Mat2i native_multiply(long _nativeRef, int i);

        @Override
        public Mat2i clone()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_clone(this.nativeRef);
        }
        private native Mat2i native_clone(long _nativeRef);

        @Override
        public Mat2i transpose()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_transpose(this.nativeRef);
        }
        private native Mat2i native_transpose(long _nativeRef);

        @Override
        public Mat2i transpose3x3()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_transpose3x3(this.nativeRef);
        }
        private native Mat2i native_transpose3x3(long _nativeRef);

        @Override
        public int trace()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_trace(this.nativeRef);
        }
        private native int native_trace(long _nativeRef);

        @Override
        public int determinant()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_determinant(this.nativeRef);
        }
        private native int native_determinant(long _nativeRef);

        public static native Mat2i orthogonalProjection(float left, float right, float bottom, float top, float zn, float zf);

        public static native Mat2i perspective(float left, float right, float top, float bottom, float near, float far);

        public static native Mat2i perspectiveFOV(float fov, float aspect, float near, float far);

        public static native Mat2i lookAt(Vec3i eye, Vec3i at, Vec3i up);

        public static native Mat2i lookAlong(Vec3i axis, Vec3i eye, Vec3i up);

        public static native Mat2i translation(float x, float y);

        public static native Mat2i movement(float x, float y, float z);

        public static native Mat2i identity();

        public static native Mat2i scale(float scale);

        public static native Mat2i rotationX(float alpha);

        public static native Mat2i rotationY(float alpha);

        public static native Mat2i rotationZ(float alpha);

        public static native Mat2i rotation(float yaw, float pitch, float roll);

        public static native Mat2i create();

        public static native Mat2i from(Mat2i mat);

        public static native Mat2i linearInterpolate(Mat2i a, Mat2i b, float prop);
    }
}
