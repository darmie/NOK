// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

package co.zenturi.nok;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Kavur {
    public abstract int getWidth();

    public abstract void setWidth(int w);

    public abstract int getHeight();

    public abstract void setHeight(int h);

    public abstract Texture getTexture();

    public abstract AlignedQuad getBakedQuad(int charIndex, float xpos, float ypos);

    public abstract float getHeight();

    public abstract float charsWidth(String ch, int offset, int length);

    public abstract float stringWidth(String ch, int length);

    public abstract float getBaselinePosition();

    public static native Kavur load(String name, FontStyle style, float size);

    private static final class CppProxy extends Kavur
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public int getWidth()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getWidth(this.nativeRef);
        }
        private native int native_getWidth(long _nativeRef);

        @Override
        public void setWidth(int w)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setWidth(this.nativeRef, w);
        }
        private native void native_setWidth(long _nativeRef, int w);

        @Override
        public int getHeight()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getHeight(this.nativeRef);
        }
        private native int native_getHeight(long _nativeRef);

        @Override
        public void setHeight(int h)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setHeight(this.nativeRef, h);
        }
        private native void native_setHeight(long _nativeRef, int h);

        @Override
        public Texture getTexture()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTexture(this.nativeRef);
        }
        private native Texture native_getTexture(long _nativeRef);

        @Override
        public AlignedQuad getBakedQuad(int charIndex, float xpos, float ypos)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBakedQuad(this.nativeRef, charIndex, xpos, ypos);
        }
        private native AlignedQuad native_getBakedQuad(long _nativeRef, int charIndex, float xpos, float ypos);

        @Override
        public float getHeight()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getHeight(this.nativeRef);
        }
        private native float native_getHeight(long _nativeRef);

        @Override
        public float charsWidth(String ch, int offset, int length)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_charsWidth(this.nativeRef, ch, offset, length);
        }
        private native float native_charsWidth(long _nativeRef, String ch, int offset, int length);

        @Override
        public float stringWidth(String ch, int length)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_stringWidth(this.nativeRef, ch, length);
        }
        private native float native_stringWidth(long _nativeRef, String ch, int length);

        @Override
        public float getBaselinePosition()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBaselinePosition(this.nativeRef);
        }
        private native float native_getBaselinePosition(long _nativeRef);
    }
}
