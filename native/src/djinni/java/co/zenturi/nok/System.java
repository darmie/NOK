// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from system.djinni

package co.zenturi.nok;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class System {
    public abstract void init(int width, int height);

    public abstract void start();

    public abstract boolean frame();

    public abstract void stop();

    private static final class CppProxy extends System
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void init(int width, int height)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_init(this.nativeRef, width, height);
        }
        private native void native_init(long _nativeRef, int width, int height);

        @Override
        public void start()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_start(this.nativeRef);
        }
        private native void native_start(long _nativeRef);

        @Override
        public boolean frame()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_frame(this.nativeRef);
        }
        private native boolean native_frame(long _nativeRef);

        @Override
        public void stop()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_stop(this.nativeRef);
        }
        private native void native_stop(long _nativeRef);
    }
}
