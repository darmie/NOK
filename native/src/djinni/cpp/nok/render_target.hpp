// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <vector>

namespace nok {

class TextureUnit;
enum class RenderTargetFormat;

class RenderTarget {
public:
    virtual ~RenderTarget() {}

    static std::shared_ptr<RenderTarget> create(int32_t width, int32_t height, int32_t depthBufferBits, bool antialiasing, RenderTargetFormat format, int32_t stencilBufferBits, int32_t contextId);

    static std::shared_ptr<RenderTarget> createCube(int32_t cubeMapSize, int32_t depthBufferBits, bool antialiasing, RenderTargetFormat format, int32_t stencilBufferBits, int32_t contextId);

    virtual int32_t get_width() = 0;

    virtual int32_t get_height() = 0;

    virtual int32_t get_texWidth() = 0;

    virtual int32_t get_texHeight() = 0;

    virtual int32_t get_contextId() = 0;

    virtual void set_width(int32_t width) = 0;

    virtual void set_height(int32_t height) = 0;

    virtual void set_texWidth(int32_t width) = 0;

    virtual void set_texHeight(int32_t height) = 0;

    virtual void set_contextId(int32_t id) = 0;

    virtual bool isCubeMap() = 0;

    virtual bool isDepthAttachment() = 0;

    virtual void useColorAsTexture(const std::shared_ptr<TextureUnit> & unit) = 0;

    virtual void useDepthAsTexture(const std::shared_ptr<TextureUnit> & unit) = 0;

    virtual void setDepthStencilFrom(const std::shared_ptr<RenderTarget> & source) = 0;

    virtual void getPixels(const std::vector<uint8_t> & data) = 0;

    virtual void generateMipmaps(int32_t levels) = 0;
};

}  // namespace nok
