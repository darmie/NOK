// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

#pragma once

#include <memory>

namespace nok {

class Vec3 {
public:
    virtual ~Vec3() {}

    virtual double get_x() = 0;

    virtual double get_y() = 0;

    virtual double get_z() = 0;

    virtual void add(const std::shared_ptr<Vec3> & v) = 0;

    virtual void addScaledVector(const std::shared_ptr<Vec3> & v) = 0;

    virtual void sub(const std::shared_ptr<Vec3> & v) = 0;

    virtual void multiply(double i) = 0;

    virtual void divide(double i) = 0;

    virtual double squareLength() = 0;

    virtual double getLength() = 0;

    virtual void setLength(double length) = 0;

    virtual std::shared_ptr<Vec3> normalize() = 0;

    virtual bool isZero() = 0;

    virtual std::shared_ptr<Vec3> get_xyz() = 0;

    virtual void set(double x, double y, double z) = 0;

    virtual double dot(const std::shared_ptr<Vec3> & v) = 0;

    virtual std::shared_ptr<Vec3> cross(const std::shared_ptr<Vec3> & v) = 0;

    virtual double distance(const std::shared_ptr<Vec3> & v) = 0;

    virtual void invert() = 0;

    static std::shared_ptr<Vec3> create(double x, double y, double z);
};

}  // namespace nok
