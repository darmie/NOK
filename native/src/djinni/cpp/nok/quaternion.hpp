// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

#pragma once

#include <memory>

namespace nok {

class Mat4;
class Vec3;

class Quaternion {
public:
    virtual ~Quaternion() {}

    static std::shared_ptr<Quaternion> create(float x, float y, float z, float w);

    static std::shared_ptr<Quaternion> fromAxis(const std::shared_ptr<Vec3> & axis, float radian);

    virtual std::shared_ptr<Quaternion> slerp(float t, const std::shared_ptr<Quaternion> & q) = 0;

    virtual std::shared_ptr<Quaternion> rotated(const std::shared_ptr<Quaternion> & b) = 0;

    virtual std::shared_ptr<Quaternion> scaled(float scale) = 0;

    virtual float dot(const std::shared_ptr<Quaternion> & q) = 0;

    virtual std::shared_ptr<Mat4> matrix() = 0;

    virtual std::shared_ptr<Quaternion> add(const std::shared_ptr<Quaternion> & q) = 0;

    virtual std::shared_ptr<Quaternion> sub(const std::shared_ptr<Quaternion> & q) = 0;

    virtual std::shared_ptr<Quaternion> addVec3(const std::shared_ptr<Vec3> & v) = 0;

    virtual std::shared_ptr<Quaternion> multiply(const std::shared_ptr<Quaternion> & q) = 0;

    virtual void normalize() = 0;

    virtual void rotate(const std::shared_ptr<Quaternion> & q) = 0;

    virtual std::shared_ptr<Quaternion> conjugate() = 0;

    virtual std::shared_ptr<Quaternion> invert() = 0;

    virtual float get_x() = 0;

    virtual float get_y() = 0;

    virtual float get_z() = 0;

    virtual float get_w() = 0;

    virtual void set_x(float x) = 0;

    virtual void set_y(float y) = 0;

    virtual void set_z(float z) = 0;

    virtual void set_w(float w) = 0;
};

}  // namespace nok
