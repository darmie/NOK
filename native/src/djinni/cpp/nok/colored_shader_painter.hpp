// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#pragma once

#include <memory>

namespace nok {

class Mat4;
class PipelineState;

class ColoredShaderPainter {
public:
    virtual ~ColoredShaderPainter() {}

    static std::shared_ptr<ColoredShaderPainter> create();

    virtual std::shared_ptr<PipelineState> get_pipeline() = 0;

    virtual void set_pipeline(const std::shared_ptr<PipelineState> & p) = 0;

    virtual void setProjection(const std::shared_ptr<Mat4> & projectionMatrix) = 0;

    virtual void setRectVertices(float bottomleftx, float bottomlefty, float topleftx, float toprightx, float toprighty, float bottomrightx, float bottomrighty) = 0;

    virtual void setRectColors(float opacity, double color) = 0;

    virtual void fillRect(float opacity, double color, float bottomleftx, float bottomlefty, float topleftx, float toprightx, float toprighty, float bottomrightx, float bottomrighty) = 0;

    virtual void fillTriangle(float opacity, double color, float x1, float y1, float x2, float y2, float x3, float y3) = 0;

    virtual void endTris(bool rectsDone) = 0;

    virtual void endRects(bool trisDone) = 0;

    virtual void end() = 0;
};

}  // namespace nok
