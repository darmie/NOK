// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace nok {

class Kavur;
class Mat3;
class Mat4;
class PipelineState;

class TextShaderPainter {
public:
    virtual ~TextShaderPainter() {}

    static std::shared_ptr<TextShaderPainter> create();

    virtual int32_t get_fontSize() = 0;

    virtual std::shared_ptr<PipelineState> get_pipeline() = 0;

    virtual void set_pipeline(const std::shared_ptr<PipelineState> & p) = 0;

    virtual void setProjection(const std::shared_ptr<Mat4> & projectionMatrix) = 0;

    virtual void setBilinearFilter(bool bilinear) = 0;

    virtual void setFont(const std::shared_ptr<Kavur> & font) = 0;

    virtual void drawString(const std::string & text, int32_t start, int32_t length, float opacity, double color, float x, float y, const std::shared_ptr<Mat3> & transformation, const std::vector<int32_t> & fontGlyphs) = 0;

    virtual void end() = 0;
};

}  // namespace nok
