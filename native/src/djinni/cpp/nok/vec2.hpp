// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

#pragma once

#include <memory>

namespace nok {

class Vec2 {
public:
    virtual ~Vec2() {}

    virtual float get_x() = 0;

    virtual float get_y() = 0;

    virtual void set_x(float x) = 0;

    virtual void set_y(float y) = 0;

    virtual void add(const std::shared_ptr<Vec2> & v) = 0;

    virtual void addScaledVector(const std::shared_ptr<Vec2> & v) = 0;

    virtual void sub(const std::shared_ptr<Vec2> & v) = 0;

    virtual void multiply(float i) = 0;

    virtual void divide(float i) = 0;

    virtual float squareLength() = 0;

    virtual float getLength() = 0;

    virtual void setLength(float length) = 0;

    virtual std::shared_ptr<Vec2> normalize() = 0;

    virtual bool isZero() = 0;

    virtual float get(float i) = 0;

    virtual void set(float i, float v) = 0;

    virtual float dot(const std::shared_ptr<Vec2> & v) = 0;

    virtual std::shared_ptr<Vec2> cross(const std::shared_ptr<Vec2> & v) = 0;

    virtual float distance(const std::shared_ptr<Vec2> & v) = 0;

    static std::shared_ptr<Vec2> create(float x, float y);
};

}  // namespace nok
