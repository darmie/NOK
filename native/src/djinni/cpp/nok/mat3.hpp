// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

#pragma once

#include <memory>

namespace nok {

class Vec3i;

class Mat3 {
public:
    virtual ~Mat3() {}

    static constexpr float WIDTH = 3;

    static constexpr float HEIGHT = 3;

    virtual float get(float row, float col) = 0;

    virtual void set(float row, float col, float v) = 0;

    static std::shared_ptr<Mat3> orthogonalProjection(float left, float right, float bottom, float top, float zn, float zf);

    static std::shared_ptr<Mat3> perspective(float left, float right, float top, float bottom, float near, float far);

    static std::shared_ptr<Mat3> perspectiveFOV(float fov, float aspect, float near, float far);

    static std::shared_ptr<Mat3> lookAt(const std::shared_ptr<Vec3i> & eye, const std::shared_ptr<Vec3i> & at, const std::shared_ptr<Vec3i> & up);

    static std::shared_ptr<Mat3> lookAlong(const std::shared_ptr<Vec3i> & axis, const std::shared_ptr<Vec3i> & eye, const std::shared_ptr<Vec3i> & up);

    static std::shared_ptr<Mat3> translation(float x, float y);

    static std::shared_ptr<Mat3> movement(float x, float y, float z);

    static std::shared_ptr<Mat3> identity();

    static std::shared_ptr<Mat3> scale(float scale);

    static std::shared_ptr<Mat3> rotationX(float alpha);

    static std::shared_ptr<Mat3> rotationY(float alpha);

    static std::shared_ptr<Mat3> rotationZ(float alpha);

    static std::shared_ptr<Mat3> rotation(float yaw, float pitch, float roll);

    static std::shared_ptr<Mat3> create();

    static std::shared_ptr<Mat3> from(const std::shared_ptr<Mat3> & mat);

    virtual std::shared_ptr<Mat3> add(const std::shared_ptr<Mat3> & mat) = 0;

    virtual std::shared_ptr<Mat3> sub(const std::shared_ptr<Mat3> & mat) = 0;

    virtual std::shared_ptr<Mat3> multiply(float i) = 0;

    virtual std::shared_ptr<Mat3> clone() = 0;

    virtual std::shared_ptr<Mat3> transpose() = 0;

    virtual std::shared_ptr<Mat3> transpose3x3() = 0;

    virtual float trace() = 0;

    virtual float determinant() = 0;

    static std::shared_ptr<Mat3> linearInterpolate(const std::shared_ptr<Mat3> & a, const std::shared_ptr<Mat3> & b, float prop);
};

}  // namespace nok
