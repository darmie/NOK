// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#pragma once

#include <memory>
#include <string>
#include <vector>

namespace nok {

class ConstantLocation;
class Shader;
class TextureUnit;
class VertexStructure;
enum class BlendingOperation;
enum class CullMode;
enum class StencilAction;
enum class ZCompareMode;

class PipelineState {
public:
    virtual ~PipelineState() {}

    virtual std::vector<std::shared_ptr<VertexStructure>> get_inputLayout() = 0;

    virtual std::shared_ptr<Shader> get_vertexShader() = 0;

    virtual void set_vertexShader(const std::shared_ptr<Shader> & shader) = 0;

    virtual std::shared_ptr<Shader> get_fragmentShader() = 0;

    virtual void set_fragmentShader(const std::shared_ptr<Shader> & shader) = 0;

    virtual std::shared_ptr<Shader> get_geometryShader() = 0;

    virtual void set_geometryShader(const std::shared_ptr<Shader> & shader) = 0;

    virtual std::shared_ptr<Shader> get_tessellationControlShader() = 0;

    virtual void set_tessellationControlShader(const std::shared_ptr<Shader> & shader) = 0;

    virtual std::shared_ptr<Shader> get_tessellationEvaluationShader() = 0;

    virtual void set_tessellationEvaluationShader(const std::shared_ptr<Shader> & shader) = 0;

    virtual CullMode get_cullMode() = 0;

    virtual void set_cullMode(CullMode cullMode) = 0;

    virtual bool depthWrite() = 0;

    virtual void setDepthWrite(bool b) = 0;

    virtual ZCompareMode depthMode() = 0;

    virtual void set_depthMode(ZCompareMode m) = 0;

    virtual ZCompareMode stencilMode() = 0;

    virtual void set_stencilMode(ZCompareMode m) = 0;

    virtual StencilAction stencilBothPass() = 0;

    virtual void set_stencilBothPass(StencilAction s) = 0;

    virtual StencilAction stencilDepthFail() = 0;

    virtual void set_stencilDepthFail(StencilAction s) = 0;

    virtual StencilAction stencilFail() = 0;

    virtual void set_stencilFail(StencilAction s) = 0;

    virtual BlendingOperation blendSource() = 0;

    virtual void set_blendSource(BlendingOperation s) = 0;

    virtual BlendingOperation blendDestination() = 0;

    virtual void set_blendDestination(BlendingOperation s) = 0;

    virtual BlendingOperation alphaBlendSource() = 0;

    virtual void set_alphaBlendSource(BlendingOperation s) = 0;

    virtual BlendingOperation alphaBlendDestination() = 0;

    virtual void set_alphaBlendDestination(BlendingOperation s) = 0;

    virtual std::vector<bool> colorWriteMaskRed() = 0;

    virtual void set_colorWriteMaskRed(const std::vector<bool> & v) = 0;

    virtual std::vector<bool> colorWriteMaskGreen() = 0;

    virtual void set_colorWriteMaskGreen(const std::vector<bool> & v) = 0;

    virtual std::vector<bool> colorWriteMaskBlue() = 0;

    virtual std::vector<bool> set_colorWriteMaskBlue(const std::vector<bool> & v) = 0;

    virtual std::vector<bool> colorWriteMaskAlpha() = 0;

    virtual void set_colorWriteMaskAlpha(const std::vector<bool> & v) = 0;

    virtual bool conservativeRasterization() = 0;

    virtual void set_conservativeRasterization(bool b) = 0;

    virtual void compile() = 0;

    virtual std::shared_ptr<ConstantLocation> getConstantLocation(const std::string & name) = 0;

    virtual std::shared_ptr<TextureUnit> getTextureUnit(const std::string & name) = 0;
};

}  // namespace nok
