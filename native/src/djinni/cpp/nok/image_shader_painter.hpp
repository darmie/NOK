// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#pragma once

#include <memory>

namespace nok {

class Mat4;
class PipelineState;
class RenderTarget;
class Texture;

class ImageShaderPainter {
public:
    virtual ~ImageShaderPainter() {}

    static std::shared_ptr<ImageShaderPainter> create();

    virtual std::shared_ptr<PipelineState> get_pipeline() = 0;

    virtual void set_pipeline(const std::shared_ptr<PipelineState> & p) = 0;

    virtual void setBilinearFilter(bool bilinear) = 0;

    virtual void setBilinearMipmapFilter(bool bilinear) = 0;

    virtual void setProjection(const std::shared_ptr<Mat4> & projectionMatrix) = 0;

    virtual void drawImageTexture(const std::shared_ptr<Texture> & img, float bottomleftx, float bottomlefty, float topleftx, float toprightx, float toprighty, float bottomrightx, float bottomrighty, float opacity, double color) = 0;

    virtual void drawImageTextureScale(const std::shared_ptr<Texture> & img, float sx, float sy, float sw, float sh, float left, float top, float right, float bottom, float opacity, double color) = 0;

    virtual void drawImageRenderTarget(const std::shared_ptr<RenderTarget> & img, float bottomleftx, float bottomlefty, float topleftx, float toprightx, float toprighty, float bottomrightx, float bottomrighty, float opacity, double color) = 0;

    virtual void drawImageRenderTargetScale(const std::shared_ptr<RenderTarget> & img, float sx, float sy, float sw, float sh, float left, float top, float right, float bottom, float opacity, double color) = 0;

    virtual void end() = 0;
};

}  // namespace nok
