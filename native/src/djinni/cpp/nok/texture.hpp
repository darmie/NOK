// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <vector>

namespace nok {

class TextureUnit;
enum class ImageCompression;
enum class ImageFormat;

class Texture {
public:
    virtual ~Texture() {}

    static std::shared_ptr<Texture> create(int32_t width, int32_t height, ImageFormat format, bool readable);

    static std::shared_ptr<Texture> create3D(int32_t width, int32_t height, int32_t depth, ImageFormat format, bool readable);

    static std::shared_ptr<Texture> fromData(const std::vector<uint8_t> & data, int32_t width, int32_t height, ImageFormat format, bool readable);

    static std::shared_ptr<Texture> fromData3D(const std::vector<uint8_t> & data, int32_t width, int32_t height, int32_t depth, ImageFormat format, bool readable);

    virtual void _set(const std::shared_ptr<TextureUnit> & unit) = 0;

    virtual void _setImage(const std::shared_ptr<TextureUnit> & unit) = 0;

    virtual std::vector<uint8_t> lock() = 0;

    virtual void unlock() = 0;

    virtual void clear(int32_t x, int32_t y, int32_t z, int32_t width, int32_t height, int32_t depth, int32_t color) = 0;

    virtual void upload(const std::vector<uint8_t> & data, int32_t stride) = 0;

    virtual void generateMipmaps(int32_t levels) = 0;

    virtual void setMipMap(const std::shared_ptr<Texture> & mipmap, int32_t level) = 0;

    virtual void stride() = 0;

    virtual int32_t get_texHeight() = 0;

    virtual int32_t get_texWidth() = 0;

    /** get_contextId(): i32; */
    virtual void set_texWidth(int32_t width) = 0;

    virtual void set_texHeight(int32_t height) = 0;

    virtual int32_t get_texDepth() = 0;

    virtual void set_texDepth(int32_t depth) = 0;

    virtual int32_t at(int32_t x, int32_t y) = 0;

    virtual std::vector<uint8_t> getPixels() = 0;

    virtual ImageFormat get_format() = 0;

    virtual bool readable() = 0;

    virtual ImageCompression get_compression() = 0;

    virtual std::vector<uint8_t> get_data() = 0;

    virtual int32_t get_dataSize() = 0;

    virtual int32_t get_height() = 0;

    virtual int32_t get_width() = 0;

    virtual void set_width(int32_t width) = 0;

    virtual void set_height(int32_t height) = 0;

    virtual int32_t get_depth() = 0;

    virtual void set_depth(int32_t depth) = 0;
};

}  // namespace nok
