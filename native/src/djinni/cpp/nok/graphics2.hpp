// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#pragma once

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace nok {

class Kavur;
class Mat3;
class Mat4;
class PipelineState;
class RenderTarget;
class Texture;
enum class ImageScaleQuality;

class Graphics2 {
public:
    virtual ~Graphics2() {}

    static std::shared_ptr<Graphics2> create(int32_t width, int32_t height, bool rTargets);

    virtual void pushRotation(float angle, float centerx, float centery) = 0;

    virtual void drawImage(const std::shared_ptr<Texture> & img, float x, float y) = 0;

    virtual void drawScaledSubImage(const std::shared_ptr<Texture> & img, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh) = 0;

    virtual void drawImageRenderTarget(const std::shared_ptr<RenderTarget> & img, float x, float y) = 0;

    virtual void drawRect(float x, float y, float width, float height, float strength) = 0;

    virtual void fillRect(float x, float y, float width, float height) = 0;

    virtual void drawString(const std::string & text, float x, float y) = 0;

    virtual void drawLine(float x1, float y1, float x2, float y2, float strength) = 0;

    virtual void fillTriangle(float x1, float y1, float x2, float y2, float x3, float y3) = 0;

    virtual void setPipeline(const std::shared_ptr<PipelineState> & pip) = 0;

    virtual void scissor(int32_t x, int32_t y, int32_t width, int32_t height) = 0;

    virtual void disableScissor() = 0;

    virtual std::shared_ptr<Mat3> get_transformation() = 0;

    virtual std::shared_ptr<Mat4> get_projectionMatrix() = 0;

    virtual std::vector<int32_t> get_fontGlyphs() = 0;

    virtual void begin(bool renderTargets, int32_t width, int32_t height, bool clear, int32_t clearColor) = 0;

    virtual void clear(int32_t color) = 0;

    virtual void flush() = 0;

    virtual void end() = 0;

    virtual void drawVideoInternal(float x, float y, float width, float height) = 0;

    virtual void drawVideo(float x, float y, float width, float height) = 0;

    virtual int32_t getColor() = 0;

    virtual void setColor(float color) = 0;

    virtual float getOpacity() = 0;

    virtual void setOpacity(float opacity) = 0;

    virtual ImageScaleQuality getImageScaleQuality() = 0;

    virtual void setImageScaleQuality(ImageScaleQuality value) = 0;

    virtual ImageScaleQuality getMipmapScaleQuality() = 0;

    virtual void setMipmapScaleQuality(ImageScaleQuality value) = 0;

    virtual std::shared_ptr<Kavur> getFont() = 0;

    virtual int32_t getFontSize() = 0;

    virtual void setFontSize(int32_t value) = 0;

    virtual double getFontColor() = 0;

    virtual void setFontColor(double color) = 0;
};

}  // namespace nok
