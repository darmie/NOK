// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKVertexElement+Private.h"
#import "NOKVertexElement.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKVertexAttribute+Private.h"
#import "NOKVertexData+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKVertexElement ()

- (id)initWithCpp:(const std::shared_ptr<::nok::VertexElement>&)cppRef;

@end

@implementation NOKVertexElement {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::VertexElement>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::VertexElement>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getName {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_name();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setName:(nonnull NSString *)n {
    try {
        _cppRefHandle.get()->set_name(::djinni::String::toCpp(n));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKVertexAttribute)getAttribute {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_attribute();
        return ::djinni::Enum<::nok::VertexAttribute, NOKVertexAttribute>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAttribute:(NOKVertexAttribute)a {
    try {
        _cppRefHandle.get()->set_attribute(::djinni::Enum<::nok::VertexAttribute, NOKVertexAttribute>::toCpp(a));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKVertexData)getData {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_data();
        return ::djinni::Enum<::nok::VertexData, NOKVertexData>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setData:(NOKVertexData)d {
    try {
        _cppRefHandle.get()->set_data(::djinni::Enum<::nok::VertexData, NOKVertexData>::toCpp(d));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKVertexElement *)create {
    try {
        auto objcpp_result_ = ::nok::VertexElement::create();
        return ::djinni_generated::VertexElement::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKVertexElement *)createWithName:(nonnull NSString *)name
                                         data:(NOKVertexData)data {
    try {
        auto objcpp_result_ = ::nok::VertexElement::createWithName(::djinni::String::toCpp(name),
                                                                   ::djinni::Enum<::nok::VertexData, NOKVertexData>::toCpp(data));
        return ::djinni_generated::VertexElement::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKVertexElement *)createWithAttribute:(NOKVertexAttribute)attribute
                                              data:(NOKVertexData)data {
    try {
        auto objcpp_result_ = ::nok::VertexElement::createWithAttribute(::djinni::Enum<::nok::VertexAttribute, NOKVertexAttribute>::toCpp(attribute),
                                                                        ::djinni::Enum<::nok::VertexData, NOKVertexData>::toCpp(data));
        return ::djinni_generated::VertexElement::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto VertexElement::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto VertexElement::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKVertexElement>(cpp);
}

}  // namespace djinni_generated

@end
