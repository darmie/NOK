// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKShader+Private.h"
#import "NOKShader.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKShaderType+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKShader ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Shader>&)cppRef;

@end

@implementation NOKShader {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Shader>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Shader>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable NOKShader *)create:(nonnull NSData *)data
                        length:(int32_t)length
                          type:(NOKShaderType)type {
    try {
        auto objcpp_result_ = ::nok::Shader::create(::djinni::Binary::toCpp(data),
                                                    ::djinni::I32::toCpp(length),
                                                    ::djinni::Enum<::nok::ShaderType, NOKShaderType>::toCpp(type));
        return ::djinni_generated::Shader::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKShader *)createWithSource:(nonnull NSString *)source
                                    type:(NOKShaderType)type {
    try {
        auto objcpp_result_ = ::nok::Shader::createWithSource(::djinni::String::toCpp(source),
                                                              ::djinni::Enum<::nok::ShaderType, NOKShaderType>::toCpp(type));
        return ::djinni_generated::Shader::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Shader::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Shader::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKShader>(cpp);
}

}  // namespace djinni_generated

@end
