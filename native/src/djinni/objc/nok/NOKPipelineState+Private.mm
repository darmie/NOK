// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKPipelineState+Private.h"
#import "NOKPipelineState.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKBlendingOperation+Private.h"
#import "NOKConstantLocation+Private.h"
#import "NOKCullMode+Private.h"
#import "NOKShader+Private.h"
#import "NOKStencilAction+Private.h"
#import "NOKTextureUnit+Private.h"
#import "NOKVertexStructure+Private.h"
#import "NOKZCompareMode+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKPipelineState ()

- (id)initWithCpp:(const std::shared_ptr<::nok::PipelineState>&)cppRef;

@end

@implementation NOKPipelineState {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::PipelineState>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::PipelineState>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSArray<NOKVertexStructure *> *)getInputLayout {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_inputLayout();
        return ::djinni::List<::djinni_generated::VertexStructure>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKShader *)getVertexShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_vertexShader();
        return ::djinni_generated::Shader::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setVertexShader:(nullable NOKShader *)shader {
    try {
        _cppRefHandle.get()->set_vertexShader(::djinni_generated::Shader::toCpp(shader));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKShader *)getFragmentShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_fragmentShader();
        return ::djinni_generated::Shader::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setFragmentShader:(nullable NOKShader *)shader {
    try {
        _cppRefHandle.get()->set_fragmentShader(::djinni_generated::Shader::toCpp(shader));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKShader *)getGeometryShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_geometryShader();
        return ::djinni_generated::Shader::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setGeometryShader:(nullable NOKShader *)shader {
    try {
        _cppRefHandle.get()->set_geometryShader(::djinni_generated::Shader::toCpp(shader));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKShader *)getTessellationControlShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_tessellationControlShader();
        return ::djinni_generated::Shader::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setTessellationControlShader:(nullable NOKShader *)shader {
    try {
        _cppRefHandle.get()->set_tessellationControlShader(::djinni_generated::Shader::toCpp(shader));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKShader *)getTessellationEvaluationShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_tessellationEvaluationShader();
        return ::djinni_generated::Shader::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setTessellationEvaluationShader:(nullable NOKShader *)shader {
    try {
        _cppRefHandle.get()->set_tessellationEvaluationShader(::djinni_generated::Shader::toCpp(shader));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKCullMode)getCullMode {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_cullMode();
        return ::djinni::Enum<::nok::CullMode, NOKCullMode>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setCullMode:(NOKCullMode)cullMode {
    try {
        _cppRefHandle.get()->set_cullMode(::djinni::Enum<::nok::CullMode, NOKCullMode>::toCpp(cullMode));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)depthWrite {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->depthWrite();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setDepthWrite:(BOOL)b {
    try {
        _cppRefHandle.get()->setDepthWrite(::djinni::Bool::toCpp(b));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKZCompareMode)depthMode {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->depthMode();
        return ::djinni::Enum<::nok::ZCompareMode, NOKZCompareMode>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setDepthMode:(NOKZCompareMode)m {
    try {
        _cppRefHandle.get()->set_depthMode(::djinni::Enum<::nok::ZCompareMode, NOKZCompareMode>::toCpp(m));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKZCompareMode)stencilMode {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->stencilMode();
        return ::djinni::Enum<::nok::ZCompareMode, NOKZCompareMode>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setStencilMode:(NOKZCompareMode)m {
    try {
        _cppRefHandle.get()->set_stencilMode(::djinni::Enum<::nok::ZCompareMode, NOKZCompareMode>::toCpp(m));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKStencilAction)stencilBothPass {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->stencilBothPass();
        return ::djinni::Enum<::nok::StencilAction, NOKStencilAction>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setStencilBothPass:(NOKStencilAction)s {
    try {
        _cppRefHandle.get()->set_stencilBothPass(::djinni::Enum<::nok::StencilAction, NOKStencilAction>::toCpp(s));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKStencilAction)stencilDepthFail {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->stencilDepthFail();
        return ::djinni::Enum<::nok::StencilAction, NOKStencilAction>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setStencilDepthFail:(NOKStencilAction)s {
    try {
        _cppRefHandle.get()->set_stencilDepthFail(::djinni::Enum<::nok::StencilAction, NOKStencilAction>::toCpp(s));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKStencilAction)stencilFail {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->stencilFail();
        return ::djinni::Enum<::nok::StencilAction, NOKStencilAction>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setStencilFail:(NOKStencilAction)s {
    try {
        _cppRefHandle.get()->set_stencilFail(::djinni::Enum<::nok::StencilAction, NOKStencilAction>::toCpp(s));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKBlendingOperation)blendSource {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->blendSource();
        return ::djinni::Enum<::nok::BlendingOperation, NOKBlendingOperation>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBlendSource:(NOKBlendingOperation)s {
    try {
        _cppRefHandle.get()->set_blendSource(::djinni::Enum<::nok::BlendingOperation, NOKBlendingOperation>::toCpp(s));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKBlendingOperation)blendDestination {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->blendDestination();
        return ::djinni::Enum<::nok::BlendingOperation, NOKBlendingOperation>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBlendDestination:(NOKBlendingOperation)s {
    try {
        _cppRefHandle.get()->set_blendDestination(::djinni::Enum<::nok::BlendingOperation, NOKBlendingOperation>::toCpp(s));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKBlendingOperation)alphaBlendSource {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->alphaBlendSource();
        return ::djinni::Enum<::nok::BlendingOperation, NOKBlendingOperation>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAlphaBlendSource:(NOKBlendingOperation)s {
    try {
        _cppRefHandle.get()->set_alphaBlendSource(::djinni::Enum<::nok::BlendingOperation, NOKBlendingOperation>::toCpp(s));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKBlendingOperation)alphaBlendDestination {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->alphaBlendDestination();
        return ::djinni::Enum<::nok::BlendingOperation, NOKBlendingOperation>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAlphaBlendDestination:(NOKBlendingOperation)s {
    try {
        _cppRefHandle.get()->set_alphaBlendDestination(::djinni::Enum<::nok::BlendingOperation, NOKBlendingOperation>::toCpp(s));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSNumber *> *)colorWriteMaskRed {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->colorWriteMaskRed();
        return ::djinni::List<::djinni::Bool>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setColorWriteMaskRed:(nonnull NSArray<NSNumber *> *)v {
    try {
        _cppRefHandle.get()->set_colorWriteMaskRed(::djinni::List<::djinni::Bool>::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSNumber *> *)colorWriteMaskGreen {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->colorWriteMaskGreen();
        return ::djinni::List<::djinni::Bool>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setColorWriteMaskGreen:(nonnull NSArray<NSNumber *> *)v {
    try {
        _cppRefHandle.get()->set_colorWriteMaskGreen(::djinni::List<::djinni::Bool>::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSNumber *> *)colorWriteMaskBlue {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->colorWriteMaskBlue();
        return ::djinni::List<::djinni::Bool>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSNumber *> *)setColorWriteMaskBlue:(nonnull NSArray<NSNumber *> *)v {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->set_colorWriteMaskBlue(::djinni::List<::djinni::Bool>::toCpp(v));
        return ::djinni::List<::djinni::Bool>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSNumber *> *)colorWriteMaskAlpha {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->colorWriteMaskAlpha();
        return ::djinni::List<::djinni::Bool>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setColorWriteMaskAlpha:(nonnull NSArray<NSNumber *> *)v {
    try {
        _cppRefHandle.get()->set_colorWriteMaskAlpha(::djinni::List<::djinni::Bool>::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)conservativeRasterization {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->conservativeRasterization();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setConservativeRasterization:(BOOL)b {
    try {
        _cppRefHandle.get()->set_conservativeRasterization(::djinni::Bool::toCpp(b));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)compile {
    try {
        _cppRefHandle.get()->compile();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKConstantLocation *)getConstantLocation:(nonnull NSString *)name {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getConstantLocation(::djinni::String::toCpp(name));
        return ::djinni_generated::ConstantLocation::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKTextureUnit *)getTextureUnit:(nonnull NSString *)name {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getTextureUnit(::djinni::String::toCpp(name));
        return ::djinni_generated::TextureUnit::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto PipelineState::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto PipelineState::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKPipelineState>(cpp);
}

}  // namespace djinni_generated

@end
