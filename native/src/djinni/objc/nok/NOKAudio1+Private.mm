// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio.djinni

#import "NOKAudio1+Private.h"
#import "NOKAudio1.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKAudioBuffer+Private.h"
#import "NOKAudioChannel+Private.h"
#import "NOKSound+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKAudio1 ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Audio1>&)cppRef;

@end

@implementation NOKAudio1 {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Audio1>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Audio1>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (void)init {
    try {
        ::nok::Audio1::init();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)max:(float)a
           b:(float)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->max(::djinni::F32::toCpp(a),
                                                       ::djinni::F32::toCpp(b));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)min:(float)a
           b:(float)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->min(::djinni::F32::toCpp(a),
                                                       ::djinni::F32::toCpp(b));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)mix:(int32_t)samplesBox
      buffer:(nullable NOKAudioBuffer *)buffer {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->mix(::djinni::I32::toCpp(samplesBox),
                                                       ::djinni_generated::AudioBuffer::toCpp(buffer));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKAudioChannel *)play:(nullable NOKSound *)sound
                              loop:(BOOL)loop {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->play(::djinni_generated::Sound::toCpp(sound),
                                                        ::djinni::Bool::toCpp(loop));
        return ::djinni_generated::AudioChannel::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)playAgain:(nullable NOKAudioChannel *)channel {
    try {
        _cppRefHandle.get()->playAgain(::djinni_generated::AudioChannel::toCpp(channel));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Audio1::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Audio1::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKAudio1>(cpp);
}

}  // namespace djinni_generated

@end
