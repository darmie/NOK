// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKColoredShaderPainter+Private.h"
#import "NOKColoredShaderPainter.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKMat4+Private.h"
#import "NOKPipelineState+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKColoredShaderPainter ()

- (id)initWithCpp:(const std::shared_ptr<::nok::ColoredShaderPainter>&)cppRef;

@end

@implementation NOKColoredShaderPainter {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::ColoredShaderPainter>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::ColoredShaderPainter>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable NOKColoredShaderPainter *)create {
    try {
        auto objcpp_result_ = ::nok::ColoredShaderPainter::create();
        return ::djinni_generated::ColoredShaderPainter::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKPipelineState *)getPipeline {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_pipeline();
        return ::djinni_generated::PipelineState::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPipeline:(nullable NOKPipelineState *)p {
    try {
        _cppRefHandle.get()->set_pipeline(::djinni_generated::PipelineState::toCpp(p));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setProjection:(nullable NOKMat4 *)projectionMatrix {
    try {
        _cppRefHandle.get()->setProjection(::djinni_generated::Mat4::toCpp(projectionMatrix));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setRectVertices:(float)bottomleftx
            bottomlefty:(float)bottomlefty
               topleftx:(float)topleftx
              toprightx:(float)toprightx
              toprighty:(float)toprighty
           bottomrightx:(float)bottomrightx
           bottomrighty:(float)bottomrighty {
    try {
        _cppRefHandle.get()->setRectVertices(::djinni::F32::toCpp(bottomleftx),
                                             ::djinni::F32::toCpp(bottomlefty),
                                             ::djinni::F32::toCpp(topleftx),
                                             ::djinni::F32::toCpp(toprightx),
                                             ::djinni::F32::toCpp(toprighty),
                                             ::djinni::F32::toCpp(bottomrightx),
                                             ::djinni::F32::toCpp(bottomrighty));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setRectColors:(float)opacity
                color:(double)color {
    try {
        _cppRefHandle.get()->setRectColors(::djinni::F32::toCpp(opacity),
                                           ::djinni::F64::toCpp(color));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)fillRect:(float)opacity
           color:(double)color
     bottomleftx:(float)bottomleftx
     bottomlefty:(float)bottomlefty
        topleftx:(float)topleftx
       toprightx:(float)toprightx
       toprighty:(float)toprighty
    bottomrightx:(float)bottomrightx
    bottomrighty:(float)bottomrighty {
    try {
        _cppRefHandle.get()->fillRect(::djinni::F32::toCpp(opacity),
                                      ::djinni::F64::toCpp(color),
                                      ::djinni::F32::toCpp(bottomleftx),
                                      ::djinni::F32::toCpp(bottomlefty),
                                      ::djinni::F32::toCpp(topleftx),
                                      ::djinni::F32::toCpp(toprightx),
                                      ::djinni::F32::toCpp(toprighty),
                                      ::djinni::F32::toCpp(bottomrightx),
                                      ::djinni::F32::toCpp(bottomrighty));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)fillTriangle:(float)opacity
               color:(double)color
                  x1:(float)x1
                  y1:(float)y1
                  x2:(float)x2
                  y2:(float)y2
                  x3:(float)x3
                  y3:(float)y3 {
    try {
        _cppRefHandle.get()->fillTriangle(::djinni::F32::toCpp(opacity),
                                          ::djinni::F64::toCpp(color),
                                          ::djinni::F32::toCpp(x1),
                                          ::djinni::F32::toCpp(y1),
                                          ::djinni::F32::toCpp(x2),
                                          ::djinni::F32::toCpp(y2),
                                          ::djinni::F32::toCpp(x3),
                                          ::djinni::F32::toCpp(y3));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)endTris:(BOOL)rectsDone {
    try {
        _cppRefHandle.get()->endTris(::djinni::Bool::toCpp(rectsDone));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)endRects:(BOOL)trisDone {
    try {
        _cppRefHandle.get()->endRects(::djinni::Bool::toCpp(trisDone));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)end {
    try {
        _cppRefHandle.get()->end();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ColoredShaderPainter::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ColoredShaderPainter::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKColoredShaderPainter>(cpp);
}

}  // namespace djinni_generated

@end
