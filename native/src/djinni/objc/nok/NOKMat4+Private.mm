// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

#import "NOKMat4+Private.h"
#import "NOKMat4.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKVec3+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKMat4 ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Mat4>&)cppRef;

@end

@implementation NOKMat4 {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Mat4>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Mat4>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (float)get:(float)row
         col:(float)col {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get(::djinni::F32::toCpp(row),
                                                       ::djinni::F32::toCpp(col));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)set:(float)row
        col:(float)col
          v:(float)v {
    try {
        _cppRefHandle.get()->set(::djinni::F32::toCpp(row),
                                 ::djinni::F32::toCpp(col),
                                 ::djinni::F32::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)orthogonalProjection:(float)left
                                     right:(float)right
                                    bottom:(float)bottom
                                       top:(float)top
                                        zn:(float)zn
                                        zf:(float)zf {
    try {
        auto objcpp_result_ = ::nok::Mat4::orthogonalProjection(::djinni::F32::toCpp(left),
                                                                ::djinni::F32::toCpp(right),
                                                                ::djinni::F32::toCpp(bottom),
                                                                ::djinni::F32::toCpp(top),
                                                                ::djinni::F32::toCpp(zn),
                                                                ::djinni::F32::toCpp(zf));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)perspective:(float)left
                            right:(float)right
                              top:(float)top
                           bottom:(float)bottom
                             near:(float)near
                              far:(float)far {
    try {
        auto objcpp_result_ = ::nok::Mat4::perspective(::djinni::F32::toCpp(left),
                                                       ::djinni::F32::toCpp(right),
                                                       ::djinni::F32::toCpp(top),
                                                       ::djinni::F32::toCpp(bottom),
                                                       ::djinni::F32::toCpp(near),
                                                       ::djinni::F32::toCpp(far));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)perspectiveFOV:(float)fov
                              aspect:(float)aspect
                                near:(float)near
                                 far:(float)far {
    try {
        auto objcpp_result_ = ::nok::Mat4::perspectiveFOV(::djinni::F32::toCpp(fov),
                                                          ::djinni::F32::toCpp(aspect),
                                                          ::djinni::F32::toCpp(near),
                                                          ::djinni::F32::toCpp(far));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)lookAt:(nullable NOKVec3 *)eye
                          at:(nullable NOKVec3 *)at
                          up:(nullable NOKVec3 *)up {
    try {
        auto objcpp_result_ = ::nok::Mat4::lookAt(::djinni_generated::Vec3::toCpp(eye),
                                                  ::djinni_generated::Vec3::toCpp(at),
                                                  ::djinni_generated::Vec3::toCpp(up));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)lookAlong:(nullable NOKVec3 *)axis
                            eye:(nullable NOKVec3 *)eye
                             up:(nullable NOKVec3 *)up {
    try {
        auto objcpp_result_ = ::nok::Mat4::lookAlong(::djinni_generated::Vec3::toCpp(axis),
                                                     ::djinni_generated::Vec3::toCpp(eye),
                                                     ::djinni_generated::Vec3::toCpp(up));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)translation:(float)x
                                y:(float)y {
    try {
        auto objcpp_result_ = ::nok::Mat4::translation(::djinni::F32::toCpp(x),
                                                       ::djinni::F32::toCpp(y));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)movement:(float)x
                             y:(float)y
                             z:(float)z {
    try {
        auto objcpp_result_ = ::nok::Mat4::movement(::djinni::F32::toCpp(x),
                                                    ::djinni::F32::toCpp(y),
                                                    ::djinni::F32::toCpp(z));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)identity {
    try {
        auto objcpp_result_ = ::nok::Mat4::identity();
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)scale:(float)scale {
    try {
        auto objcpp_result_ = ::nok::Mat4::scale(::djinni::F32::toCpp(scale));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)rotationX:(float)alpha {
    try {
        auto objcpp_result_ = ::nok::Mat4::rotationX(::djinni::F32::toCpp(alpha));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)rotationY:(float)alpha {
    try {
        auto objcpp_result_ = ::nok::Mat4::rotationY(::djinni::F32::toCpp(alpha));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)rotationZ:(float)alpha {
    try {
        auto objcpp_result_ = ::nok::Mat4::rotationZ(::djinni::F32::toCpp(alpha));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)rotation:(float)yaw
                         pitch:(float)pitch
                          roll:(float)roll {
    try {
        auto objcpp_result_ = ::nok::Mat4::rotation(::djinni::F32::toCpp(yaw),
                                                    ::djinni::F32::toCpp(pitch),
                                                    ::djinni::F32::toCpp(roll));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)create {
    try {
        auto objcpp_result_ = ::nok::Mat4::create();
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)from:(nullable NOKMat4 *)mat {
    try {
        auto objcpp_result_ = ::nok::Mat4::from(::djinni_generated::Mat4::toCpp(mat));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat4 *)add:(nullable NOKMat4 *)mat {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->add(::djinni_generated::Mat4::toCpp(mat));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat4 *)sub:(nullable NOKMat4 *)mat {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->sub(::djinni_generated::Mat4::toCpp(mat));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat4 *)multiply:(float)i {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->multiply(::djinni::F32::toCpp(i));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat4 *)clone {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->clone();
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat4 *)transpose {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->transpose();
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat4 *)transpose3x3 {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->transpose3x3();
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)trace {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->trace();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)determinant {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->determinant();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat4 *)linearInterpolate:(nullable NOKMat4 *)a
                                      b:(nullable NOKMat4 *)b
                                   prop:(float)prop {
    try {
        auto objcpp_result_ = ::nok::Mat4::linearInterpolate(::djinni_generated::Mat4::toCpp(a),
                                                             ::djinni_generated::Mat4::toCpp(b),
                                                             ::djinni::F32::toCpp(prop));
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}


namespace djinni_generated {

auto Mat4::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Mat4::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKMat4>(cpp);
}

}  // namespace djinni_generated

@end
