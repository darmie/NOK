// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

#import "NOKVec4d+Private.h"
#import "NOKVec4d.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKVec4d ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Vec4d>&)cppRef;

@end

@implementation NOKVec4d {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Vec4d>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Vec4d>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (double)getX {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_x();
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)getY {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_y();
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)getZ {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_z();
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setX:(double)x {
    try {
        _cppRefHandle.get()->set_x(::djinni::F64::toCpp(x));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setY:(double)y {
    try {
        _cppRefHandle.get()->set_y(::djinni::F64::toCpp(y));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setZ:(double)z {
    try {
        _cppRefHandle.get()->set_z(::djinni::F64::toCpp(z));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setW:(double)w {
    try {
        _cppRefHandle.get()->set_w(::djinni::F64::toCpp(w));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)add:(nullable NOKVec4d *)v {
    try {
        _cppRefHandle.get()->add(::djinni_generated::Vec4d::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)addScaledVector:(nullable NOKVec4d *)v {
    try {
        _cppRefHandle.get()->addScaledVector(::djinni_generated::Vec4d::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)sub:(nullable NOKVec4d *)v {
    try {
        _cppRefHandle.get()->sub(::djinni_generated::Vec4d::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)multiply:(double)i {
    try {
        _cppRefHandle.get()->multiply(::djinni::F64::toCpp(i));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)divide:(double)i {
    try {
        _cppRefHandle.get()->divide(::djinni::F64::toCpp(i));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)squareLength {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->squareLength();
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)getLength {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getLength();
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setLength:(double)length {
    try {
        _cppRefHandle.get()->setLength(::djinni::F64::toCpp(length));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKVec4d *)normalize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->normalize();
        return ::djinni_generated::Vec4d::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isZero {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isZero();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)get:(double)i {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get(::djinni::F64::toCpp(i));
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)set:(double)i
          v:(double)v {
    try {
        _cppRefHandle.get()->set(::djinni::F64::toCpp(i),
                                 ::djinni::F64::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)dot:(nullable NOKVec4d *)v {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->dot(::djinni_generated::Vec4d::toCpp(v));
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKVec4d *)cross:(nullable NOKVec4d *)v {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->cross(::djinni_generated::Vec4d::toCpp(v));
        return ::djinni_generated::Vec4d::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (double)distance:(nullable NOKVec4d *)v {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->distance(::djinni_generated::Vec4d::toCpp(v));
        return ::djinni::F64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)invert {
    try {
        _cppRefHandle.get()->invert();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKVec4d *)create:(double)x
                            y:(double)y
                            z:(double)z {
    try {
        auto objcpp_result_ = ::nok::Vec4d::create(::djinni::F64::toCpp(x),
                                                   ::djinni::F64::toCpp(y),
                                                   ::djinni::F64::toCpp(z));
        return ::djinni_generated::Vec4d::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Vec4d::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Vec4d::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKVec4d>(cpp);
}

}  // namespace djinni_generated

@end
