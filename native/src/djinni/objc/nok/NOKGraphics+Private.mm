// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKGraphics+Private.h"
#import "NOKGraphics.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKConstantLocation+Private.h"
#import "NOKIndexBuffer+Private.h"
#import "NOKMat3+Private.h"
#import "NOKMat4+Private.h"
#import "NOKMipmapFilter+Private.h"
#import "NOKPipelineState+Private.h"
#import "NOKRenderTarget+Private.h"
#import "NOKTexDir+Private.h"
#import "NOKTexture+Private.h"
#import "NOKTextureAddressing+Private.h"
#import "NOKTextureArgument+Private.h"
#import "NOKTextureArray+Private.h"
#import "NOKTextureFilter+Private.h"
#import "NOKTextureOperation+Private.h"
#import "NOKTextureUnit+Private.h"
#import "NOKVertexBuffer+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKGraphics ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Graphics>&)cppRef;

@end

@implementation NOKGraphics {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Graphics>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Graphics>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (void)setBool:(nullable NOKConstantLocation *)location
          value:(BOOL)value {
    try {
        ::nok::Graphics::setBool(::djinni_generated::ConstantLocation::toCpp(location),
                                 ::djinni::Bool::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setInt:(nullable NOKConstantLocation *)location
         value:(int32_t)value {
    try {
        ::nok::Graphics::setInt(::djinni_generated::ConstantLocation::toCpp(location),
                                ::djinni::I32::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setInt2:(nullable NOKConstantLocation *)location
         value1:(int32_t)value1
         value2:(int32_t)value2 {
    try {
        ::nok::Graphics::setInt2(::djinni_generated::ConstantLocation::toCpp(location),
                                 ::djinni::I32::toCpp(value1),
                                 ::djinni::I32::toCpp(value2));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setInt3:(nullable NOKConstantLocation *)location
         value1:(int32_t)value1
         value2:(int32_t)value2
         value3:(int32_t)value3 {
    try {
        ::nok::Graphics::setInt3(::djinni_generated::ConstantLocation::toCpp(location),
                                 ::djinni::I32::toCpp(value1),
                                 ::djinni::I32::toCpp(value2),
                                 ::djinni::I32::toCpp(value3));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setInt4:(nullable NOKConstantLocation *)location
         value1:(int32_t)value1
         value2:(int32_t)value2
         value3:(int32_t)value3
         value4:(int32_t)value4 {
    try {
        ::nok::Graphics::setInt4(::djinni_generated::ConstantLocation::toCpp(location),
                                 ::djinni::I32::toCpp(value1),
                                 ::djinni::I32::toCpp(value2),
                                 ::djinni::I32::toCpp(value3),
                                 ::djinni::I32::toCpp(value4));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setInts:(nullable NOKConstantLocation *)location
         values:(nonnull NSArray<NSNumber *> *)values
          count:(int32_t)count {
    try {
        ::nok::Graphics::setInts(::djinni_generated::ConstantLocation::toCpp(location),
                                 ::djinni::List<::djinni::I32>::toCpp(values),
                                 ::djinni::I32::toCpp(count));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setFloat2:(nullable NOKConstantLocation *)location
           value1:(float)value1
           value2:(float)value2 {
    try {
        ::nok::Graphics::setFloat2(::djinni_generated::ConstantLocation::toCpp(location),
                                   ::djinni::F32::toCpp(value1),
                                   ::djinni::F32::toCpp(value2));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setFloat3:(nullable NOKConstantLocation *)location
           value1:(float)value1
           value2:(float)value2
           value3:(float)value3 {
    try {
        ::nok::Graphics::setFloat3(::djinni_generated::ConstantLocation::toCpp(location),
                                   ::djinni::F32::toCpp(value1),
                                   ::djinni::F32::toCpp(value2),
                                   ::djinni::F32::toCpp(value3));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setFloat4:(nullable NOKConstantLocation *)location
           value1:(int32_t)value1
           value2:(float)value2
           value3:(float)value3
           value4:(float)value4 {
    try {
        ::nok::Graphics::setFloat4(::djinni_generated::ConstantLocation::toCpp(location),
                                   ::djinni::I32::toCpp(value1),
                                   ::djinni::F32::toCpp(value2),
                                   ::djinni::F32::toCpp(value3),
                                   ::djinni::F32::toCpp(value4));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setFloats:(nullable NOKConstantLocation *)location
           values:(nonnull NSArray<NSNumber *> *)values
            count:(float)count {
    try {
        ::nok::Graphics::setFloats(::djinni_generated::ConstantLocation::toCpp(location),
                                   ::djinni::List<::djinni::F32>::toCpp(values),
                                   ::djinni::F32::toCpp(count));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setMatrix3:(nullable NOKConstantLocation *)location
               mat:(nullable NOKMat3 *)mat {
    try {
        ::nok::Graphics::setMatrix3(::djinni_generated::ConstantLocation::toCpp(location),
                                    ::djinni_generated::Mat3::toCpp(mat));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setMatrix4:(nullable NOKConstantLocation *)location
               mat:(nullable NOKMat4 *)mat {
    try {
        ::nok::Graphics::setMatrix4(::djinni_generated::ConstantLocation::toCpp(location),
                                    ::djinni_generated::Mat4::toCpp(mat));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setVertexBuffer:(nullable NOKVertexBuffer *)buf {
    try {
        ::nok::Graphics::setVertexBuffer(::djinni_generated::VertexBuffer::toCpp(buf));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setVertexBuffers:(nonnull NSArray<NOKVertexBuffer *> *)bufs
                   count:(int32_t)count {
    try {
        ::nok::Graphics::setVertexBuffers(::djinni::List<::djinni_generated::VertexBuffer>::toCpp(bufs),
                                          ::djinni::I32::toCpp(count));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setIndexBuffer:(nullable NOKIndexBuffer *)buf {
    try {
        ::nok::Graphics::setIndexBuffer(::djinni_generated::IndexBuffer::toCpp(buf));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTexture:(nullable NOKTextureUnit *)unit
           texture:(nullable NOKTexture *)texture {
    try {
        ::nok::Graphics::setTexture(::djinni_generated::TextureUnit::toCpp(unit),
                                    ::djinni_generated::Texture::toCpp(texture));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTextureArray:(nullable NOKTextureUnit *)unit
           textureArray:(nullable NOKTextureArray *)textureArray {
    try {
        ::nok::Graphics::setTextureArray(::djinni_generated::TextureUnit::toCpp(unit),
                                         ::djinni_generated::TextureArray::toCpp(textureArray));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setPipeline:(nullable NOKPipelineState *)pipeline {
    try {
        ::nok::Graphics::setPipeline(::djinni_generated::PipelineState::toCpp(pipeline));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setStencilReferenceValue:(int32_t)value {
    try {
        ::nok::Graphics::setStencilReferenceValue(::djinni::I32::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)drawIndexedVertices:(int32_t)start
                      count:(int32_t)count {
    try {
        ::nok::Graphics::drawIndexedVertices(::djinni::I32::toCpp(start),
                                             ::djinni::I32::toCpp(count));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)drawIndexedVerticesInstanced:(int32_t)instanceCount
                               start:(int32_t)start
                               count:(int32_t)count {
    try {
        ::nok::Graphics::drawIndexedVerticesInstanced(::djinni::I32::toCpp(instanceCount),
                                                      ::djinni::I32::toCpp(start),
                                                      ::djinni::I32::toCpp(count));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (int32_t)antialiasingSamples {
    try {
        auto objcpp_result_ = ::nok::Graphics::antialiasingSamples();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setAntialiasingSamples:(int32_t)samples {
    try {
        ::nok::Graphics::setAntialiasingSamples(::djinni::I32::toCpp(samples));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)renderTargetsInvertedY {
    try {
        auto objcpp_result_ = ::nok::Graphics::renderTargetsInvertedY();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setRenderTargets:(nonnull NSArray<NOKRenderTarget *> *)targets
                   count:(int32_t)count {
    try {
        ::nok::Graphics::setRenderTargets(::djinni::List<::djinni_generated::RenderTarget>::toCpp(targets),
                                          ::djinni::I32::toCpp(count));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setRenderTarget:(nullable NOKRenderTarget *)target {
    try {
        ::nok::Graphics::setRenderTarget(::djinni_generated::RenderTarget::toCpp(target));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setRenderTargetFace:(nullable NOKRenderTarget *)texture
                       face:(int32_t)face {
    try {
        ::nok::Graphics::setRenderTargetFace(::djinni_generated::RenderTarget::toCpp(texture),
                                             ::djinni::I32::toCpp(face));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)restoreRenderTarget {
    try {
        ::nok::Graphics::restoreRenderTarget();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)begin:(int32_t)win {
    try {
        ::nok::Graphics::begin(::djinni::I32::toCpp(win));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)end:(int32_t)win {
    try {
        ::nok::Graphics::end(::djinni::I32::toCpp(win));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)swapBuffers {
    try {
        auto objcpp_result_ = ::nok::Graphics::swapBuffers();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)viewport:(int32_t)x
               y:(int32_t)y
           width:(int32_t)width
          height:(int32_t)height {
    try {
        ::nok::Graphics::viewport(::djinni::I32::toCpp(x),
                                  ::djinni::I32::toCpp(y),
                                  ::djinni::I32::toCpp(width),
                                  ::djinni::I32::toCpp(height));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)scissor:(int32_t)x
              y:(int32_t)y
          width:(int32_t)width
         height:(int32_t)height {
    try {
        ::nok::Graphics::scissor(::djinni::I32::toCpp(x),
                                 ::djinni::I32::toCpp(y),
                                 ::djinni::I32::toCpp(width),
                                 ::djinni::I32::toCpp(height));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)disableScissor {
    try {
        ::nok::Graphics::disableScissor();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTextureAddressing:(nullable NOKTextureUnit *)unit
                         dir:(NOKTexDir)dir
                  addressing:(NOKTextureAddressing)addressing {
    try {
        ::nok::Graphics::setTextureAddressing(::djinni_generated::TextureUnit::toCpp(unit),
                                              ::djinni::Enum<::nok::TexDir, NOKTexDir>::toCpp(dir),
                                              ::djinni::Enum<::nok::TextureAddressing, NOKTextureAddressing>::toCpp(addressing));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTextureMagnificationFilter:(nullable NOKTextureUnit *)unit
                                filer:(NOKTextureFilter)filer {
    try {
        ::nok::Graphics::setTextureMagnificationFilter(::djinni_generated::TextureUnit::toCpp(unit),
                                                       ::djinni::Enum<::nok::TextureFilter, NOKTextureFilter>::toCpp(filer));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTextureMinificationFilter:(nullable NOKTextureUnit *)unit
                               filer:(NOKTextureFilter)filer {
    try {
        ::nok::Graphics::setTextureMinificationFilter(::djinni_generated::TextureUnit::toCpp(unit),
                                                      ::djinni::Enum<::nok::TextureFilter, NOKTextureFilter>::toCpp(filer));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTextureMipmapFilter:(nullable NOKTextureUnit *)unit
                         filer:(NOKMipmapFilter)filer {
    try {
        ::nok::Graphics::setTextureMipmapFilter(::djinni_generated::TextureUnit::toCpp(unit),
                                                ::djinni::Enum<::nok::MipmapFilter, NOKMipmapFilter>::toCpp(filer));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTexture3DAddressing:(nullable NOKTextureUnit *)unit
                           dir:(NOKTexDir)dir
                    addressing:(NOKTextureAddressing)addressing {
    try {
        ::nok::Graphics::setTexture3DAddressing(::djinni_generated::TextureUnit::toCpp(unit),
                                                ::djinni::Enum<::nok::TexDir, NOKTexDir>::toCpp(dir),
                                                ::djinni::Enum<::nok::TextureAddressing, NOKTextureAddressing>::toCpp(addressing));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTexture3DMagnificationFilter:(nullable NOKTextureUnit *)unit
                                  filer:(NOKTextureFilter)filer {
    try {
        ::nok::Graphics::setTexture3DMagnificationFilter(::djinni_generated::TextureUnit::toCpp(unit),
                                                         ::djinni::Enum<::nok::TextureFilter, NOKTextureFilter>::toCpp(filer));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTexture3DMinificationFilter:(nullable NOKTextureUnit *)unit
                                 filer:(NOKTextureFilter)filer {
    try {
        ::nok::Graphics::setTexture3DMinificationFilter(::djinni_generated::TextureUnit::toCpp(unit),
                                                        ::djinni::Enum<::nok::TextureFilter, NOKTextureFilter>::toCpp(filer));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTexture3DMipmapFilter:(nullable NOKTextureUnit *)unit
                           filer:(NOKMipmapFilter)filer {
    try {
        ::nok::Graphics::setTexture3DMipmapFilter(::djinni_generated::TextureUnit::toCpp(unit),
                                                  ::djinni::Enum<::nok::MipmapFilter, NOKMipmapFilter>::toCpp(filer));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTextureCompareMode:(nullable NOKTextureUnit *)unit
                      enabled:(BOOL)enabled {
    try {
        ::nok::Graphics::setTextureCompareMode(::djinni_generated::TextureUnit::toCpp(unit),
                                               ::djinni::Bool::toCpp(enabled));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setCubeMapCompareMode:(nullable NOKTextureUnit *)unit
                      enabled:(BOOL)enabled {
    try {
        ::nok::Graphics::setCubeMapCompareMode(::djinni_generated::TextureUnit::toCpp(unit),
                                               ::djinni::Bool::toCpp(enabled));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setTextureOperation:(NOKTextureOperation)operation
                       arg1:(NOKTextureArgument)arg1
                       arg2:(NOKTextureArgument)arg2 {
    try {
        ::nok::Graphics::setTextureOperation(::djinni::Enum<::nok::TextureOperation, NOKTextureOperation>::toCpp(operation),
                                             ::djinni::Enum<::nok::TextureArgument, NOKTextureArgument>::toCpp(arg1),
                                             ::djinni::Enum<::nok::TextureArgument, NOKTextureArgument>::toCpp(arg2));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)nonPow2TexturesSupported {
    try {
        auto objcpp_result_ = ::nok::Graphics::nonPow2TexturesSupported();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)getFullscreen {
    try {
        auto objcpp_result_ = ::nok::Graphics::get_fullscreen();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)init:(int32_t)windowId
depthBufferBits:(int32_t)depthBufferBits
stencilBufferBits:(int32_t)stencilBufferBits
       vsync:(BOOL)vsync {
    try {
        ::nok::Graphics::init(::djinni::I32::toCpp(windowId),
                              ::djinni::I32::toCpp(depthBufferBits),
                              ::djinni::I32::toCpp(stencilBufferBits),
                              ::djinni::Bool::toCpp(vsync));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)destroy:(int32_t)windowId {
    try {
        ::nok::Graphics::destroy(::djinni::I32::toCpp(windowId));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)flush {
    try {
        ::nok::Graphics::flush();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)initOcclusionQuery:(nonnull NSArray<NSNumber *> *)occlusionQuery {
    try {
        auto objcpp_result_ = ::nok::Graphics::initOcclusionQuery(::djinni::List<::djinni::F64>::toCpp(occlusionQuery));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)deleteOcclusionQuery:(double)occlusionQuery {
    try {
        ::nok::Graphics::deleteOcclusionQuery(::djinni::F64::toCpp(occlusionQuery));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)renderOcclusionQuery:(double)occlusionQuery
                   triangles:(int32_t)triangles {
    try {
        ::nok::Graphics::renderOcclusionQuery(::djinni::F64::toCpp(occlusionQuery),
                                              ::djinni::I32::toCpp(triangles));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)isQueryResultsAvailable:(double)occlusionQuery {
    try {
        auto objcpp_result_ = ::nok::Graphics::isQueryResultsAvailable(::djinni::F64::toCpp(occlusionQuery));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)getQueryResults:(double)occlusionQuery
             pixelCount:(nonnull NSArray<NSNumber *> *)pixelCount {
    try {
        ::nok::Graphics::getQueryResults(::djinni::F64::toCpp(occlusionQuery),
                                         ::djinni::List<::djinni::F64>::toCpp(pixelCount));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)clear:(int32_t)flags
        color:(double)color
        depth:(float)depth
      stencil:(int32_t)stencil {
    try {
        ::nok::Graphics::clear(::djinni::I32::toCpp(flags),
                               ::djinni::F64::toCpp(color),
                               ::djinni::F32::toCpp(depth),
                               ::djinni::I32::toCpp(stencil));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}


namespace djinni_generated {

auto Graphics::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Graphics::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKGraphics>(cpp);
}

}  // namespace djinni_generated

@end
