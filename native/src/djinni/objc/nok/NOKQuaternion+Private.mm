// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

#import "NOKQuaternion+Private.h"
#import "NOKQuaternion.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKMat4+Private.h"
#import "NOKVec3+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKQuaternion ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Quaternion>&)cppRef;

@end

@implementation NOKQuaternion {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Quaternion>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Quaternion>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable NOKQuaternion *)create:(float)x
                                 y:(float)y
                                 z:(float)z
                                 w:(float)w {
    try {
        auto objcpp_result_ = ::nok::Quaternion::create(::djinni::F32::toCpp(x),
                                                        ::djinni::F32::toCpp(y),
                                                        ::djinni::F32::toCpp(z),
                                                        ::djinni::F32::toCpp(w));
        return ::djinni_generated::Quaternion::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKQuaternion *)fromAxis:(nullable NOKVec3 *)axis
                              radian:(float)radian {
    try {
        auto objcpp_result_ = ::nok::Quaternion::fromAxis(::djinni_generated::Vec3::toCpp(axis),
                                                          ::djinni::F32::toCpp(radian));
        return ::djinni_generated::Quaternion::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKQuaternion *)slerp:(float)t
                                q:(nullable NOKQuaternion *)q {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->slerp(::djinni::F32::toCpp(t),
                                                         ::djinni_generated::Quaternion::toCpp(q));
        return ::djinni_generated::Quaternion::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKQuaternion *)rotated:(nullable NOKQuaternion *)b {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->rotated(::djinni_generated::Quaternion::toCpp(b));
        return ::djinni_generated::Quaternion::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKQuaternion *)scaled:(float)scale {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->scaled(::djinni::F32::toCpp(scale));
        return ::djinni_generated::Quaternion::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)dot:(nullable NOKQuaternion *)q {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->dot(::djinni_generated::Quaternion::toCpp(q));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat4 *)matrix {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->matrix();
        return ::djinni_generated::Mat4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKQuaternion *)add:(nullable NOKQuaternion *)q {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->add(::djinni_generated::Quaternion::toCpp(q));
        return ::djinni_generated::Quaternion::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKQuaternion *)sub:(nullable NOKQuaternion *)q {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->sub(::djinni_generated::Quaternion::toCpp(q));
        return ::djinni_generated::Quaternion::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKQuaternion *)addVec3:(nullable NOKVec3 *)v {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->addVec3(::djinni_generated::Vec3::toCpp(v));
        return ::djinni_generated::Quaternion::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKQuaternion *)multiply:(nullable NOKQuaternion *)q {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->multiply(::djinni_generated::Quaternion::toCpp(q));
        return ::djinni_generated::Quaternion::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)normalize {
    try {
        _cppRefHandle.get()->normalize();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)rotate:(nullable NOKQuaternion *)q {
    try {
        _cppRefHandle.get()->rotate(::djinni_generated::Quaternion::toCpp(q));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKQuaternion *)conjugate {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->conjugate();
        return ::djinni_generated::Quaternion::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKQuaternion *)invert {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->invert();
        return ::djinni_generated::Quaternion::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getX {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_x();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getY {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_y();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getZ {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_z();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setX:(float)x {
    try {
        _cppRefHandle.get()->set_x(::djinni::F32::toCpp(x));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setY:(float)y {
    try {
        _cppRefHandle.get()->set_y(::djinni::F32::toCpp(y));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setZ:(float)z {
    try {
        _cppRefHandle.get()->set_z(::djinni::F32::toCpp(z));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Quaternion::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Quaternion::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKQuaternion>(cpp);
}

}  // namespace djinni_generated

@end
