// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKTextShaderPainter+Private.h"
#import "NOKTextShaderPainter.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKKavur+Private.h"
#import "NOKMat3+Private.h"
#import "NOKMat4+Private.h"
#import "NOKPipelineState+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKTextShaderPainter ()

- (id)initWithCpp:(const std::shared_ptr<::nok::TextShaderPainter>&)cppRef;

@end

@implementation NOKTextShaderPainter {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::TextShaderPainter>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::TextShaderPainter>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable NOKTextShaderPainter *)create {
    try {
        auto objcpp_result_ = ::nok::TextShaderPainter::create();
        return ::djinni_generated::TextShaderPainter::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getFontSize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_fontSize();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKPipelineState *)getPipeline {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_pipeline();
        return ::djinni_generated::PipelineState::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPipeline:(nullable NOKPipelineState *)p {
    try {
        _cppRefHandle.get()->set_pipeline(::djinni_generated::PipelineState::toCpp(p));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setProjection:(nullable NOKMat4 *)projectionMatrix {
    try {
        _cppRefHandle.get()->setProjection(::djinni_generated::Mat4::toCpp(projectionMatrix));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBilinearFilter:(BOOL)bilinear {
    try {
        _cppRefHandle.get()->setBilinearFilter(::djinni::Bool::toCpp(bilinear));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setFont:(nullable NOKKavur *)font {
    try {
        _cppRefHandle.get()->setFont(::djinni_generated::Kavur::toCpp(font));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)drawString:(nonnull NSString *)text
             start:(int32_t)start
            length:(int32_t)length
           opacity:(float)opacity
             color:(double)color
                 x:(float)x
                 y:(float)y
    transformation:(nullable NOKMat3 *)transformation
        fontGlyphs:(nonnull NSArray<NSNumber *> *)fontGlyphs {
    try {
        _cppRefHandle.get()->drawString(::djinni::String::toCpp(text),
                                        ::djinni::I32::toCpp(start),
                                        ::djinni::I32::toCpp(length),
                                        ::djinni::F32::toCpp(opacity),
                                        ::djinni::F64::toCpp(color),
                                        ::djinni::F32::toCpp(x),
                                        ::djinni::F32::toCpp(y),
                                        ::djinni_generated::Mat3::toCpp(transformation),
                                        ::djinni::List<::djinni::I32>::toCpp(fontGlyphs));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)end {
    try {
        _cppRefHandle.get()->end();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto TextShaderPainter::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto TextShaderPainter::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKTextShaderPainter>(cpp);
}

}  // namespace djinni_generated

@end
