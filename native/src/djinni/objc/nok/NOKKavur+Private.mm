// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKKavur+Private.h"
#import "NOKKavur.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKAlignedQuad+Private.h"
#import "NOKFontStyle+Private.h"
#import "NOKTexture+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKKavur ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Kavur>&)cppRef;

@end

@implementation NOKKavur {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Kavur>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Kavur>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (int32_t)getWidth {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_width();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setWidth:(int32_t)w {
    try {
        _cppRefHandle.get()->set_width(::djinni::I32::toCpp(w));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getHeight {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_height();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setHeight:(int32_t)h {
    try {
        _cppRefHandle.get()->set_height(::djinni::I32::toCpp(h));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKKavur *)load:(nonnull NSString *)name
                      style:(nonnull NOKFontStyle *)style
                       size:(float)size {
    try {
        auto objcpp_result_ = ::nok::Kavur::load(::djinni::String::toCpp(name),
                                                 ::djinni_generated::FontStyle::toCpp(style),
                                                 ::djinni::F32::toCpp(size));
        return ::djinni_generated::Kavur::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKTexture *)getTexture {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getTexture();
        return ::djinni_generated::Texture::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NOKAlignedQuad *)getBakedQuad:(int32_t)charIndex
                                    xpos:(float)xpos
                                    ypos:(float)ypos {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getBakedQuad(::djinni::I32::toCpp(charIndex),
                                                                ::djinni::F32::toCpp(xpos),
                                                                ::djinni::F32::toCpp(ypos));
        return ::djinni_generated::AlignedQuad::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getHeight {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getHeight();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)charsWidth:(nonnull NSString *)ch
             offset:(int32_t)offset
             length:(int32_t)length {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->charsWidth(::djinni::String::toCpp(ch),
                                                              ::djinni::I32::toCpp(offset),
                                                              ::djinni::I32::toCpp(length));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)stringWidth:(nonnull NSString *)ch
              length:(int32_t)length {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->stringWidth(::djinni::String::toCpp(ch),
                                                               ::djinni::I32::toCpp(length));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getBaselinePosition {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getBaselinePosition();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Kavur::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Kavur::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKKavur>(cpp);
}

}  // namespace djinni_generated

@end
