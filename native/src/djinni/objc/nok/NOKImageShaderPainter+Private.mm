// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKImageShaderPainter+Private.h"
#import "NOKImageShaderPainter.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKMat4+Private.h"
#import "NOKPipelineState+Private.h"
#import "NOKRenderTarget+Private.h"
#import "NOKTexture+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKImageShaderPainter ()

- (id)initWithCpp:(const std::shared_ptr<::nok::ImageShaderPainter>&)cppRef;

@end

@implementation NOKImageShaderPainter {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::ImageShaderPainter>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::ImageShaderPainter>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable NOKImageShaderPainter *)create {
    try {
        auto objcpp_result_ = ::nok::ImageShaderPainter::create();
        return ::djinni_generated::ImageShaderPainter::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKPipelineState *)getPipeline {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_pipeline();
        return ::djinni_generated::PipelineState::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPipeline:(nullable NOKPipelineState *)p {
    try {
        _cppRefHandle.get()->set_pipeline(::djinni_generated::PipelineState::toCpp(p));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBilinearFilter:(BOOL)bilinear {
    try {
        _cppRefHandle.get()->setBilinearFilter(::djinni::Bool::toCpp(bilinear));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBilinearMipmapFilter:(BOOL)bilinear {
    try {
        _cppRefHandle.get()->setBilinearMipmapFilter(::djinni::Bool::toCpp(bilinear));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setProjection:(nullable NOKMat4 *)projectionMatrix {
    try {
        _cppRefHandle.get()->setProjection(::djinni_generated::Mat4::toCpp(projectionMatrix));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)drawImageTexture:(nullable NOKTexture *)img
             bottomleftx:(float)bottomleftx
             bottomlefty:(float)bottomlefty
                topleftx:(float)topleftx
               toprightx:(float)toprightx
               toprighty:(float)toprighty
            bottomrightx:(float)bottomrightx
            bottomrighty:(float)bottomrighty
                 opacity:(float)opacity
                   color:(double)color {
    try {
        _cppRefHandle.get()->drawImageTexture(::djinni_generated::Texture::toCpp(img),
                                              ::djinni::F32::toCpp(bottomleftx),
                                              ::djinni::F32::toCpp(bottomlefty),
                                              ::djinni::F32::toCpp(topleftx),
                                              ::djinni::F32::toCpp(toprightx),
                                              ::djinni::F32::toCpp(toprighty),
                                              ::djinni::F32::toCpp(bottomrightx),
                                              ::djinni::F32::toCpp(bottomrighty),
                                              ::djinni::F32::toCpp(opacity),
                                              ::djinni::F64::toCpp(color));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)drawImageTextureScale:(nullable NOKTexture *)img
                           sx:(float)sx
                           sy:(float)sy
                           sw:(float)sw
                           sh:(float)sh
                         left:(float)left
                          top:(float)top
                        right:(float)right
                       bottom:(float)bottom
                      opacity:(float)opacity
                        color:(double)color {
    try {
        _cppRefHandle.get()->drawImageTextureScale(::djinni_generated::Texture::toCpp(img),
                                                   ::djinni::F32::toCpp(sx),
                                                   ::djinni::F32::toCpp(sy),
                                                   ::djinni::F32::toCpp(sw),
                                                   ::djinni::F32::toCpp(sh),
                                                   ::djinni::F32::toCpp(left),
                                                   ::djinni::F32::toCpp(top),
                                                   ::djinni::F32::toCpp(right),
                                                   ::djinni::F32::toCpp(bottom),
                                                   ::djinni::F32::toCpp(opacity),
                                                   ::djinni::F64::toCpp(color));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)drawImageRenderTarget:(nullable NOKRenderTarget *)img
                  bottomleftx:(float)bottomleftx
                  bottomlefty:(float)bottomlefty
                     topleftx:(float)topleftx
                    toprightx:(float)toprightx
                    toprighty:(float)toprighty
                 bottomrightx:(float)bottomrightx
                 bottomrighty:(float)bottomrighty
                      opacity:(float)opacity
                        color:(double)color {
    try {
        _cppRefHandle.get()->drawImageRenderTarget(::djinni_generated::RenderTarget::toCpp(img),
                                                   ::djinni::F32::toCpp(bottomleftx),
                                                   ::djinni::F32::toCpp(bottomlefty),
                                                   ::djinni::F32::toCpp(topleftx),
                                                   ::djinni::F32::toCpp(toprightx),
                                                   ::djinni::F32::toCpp(toprighty),
                                                   ::djinni::F32::toCpp(bottomrightx),
                                                   ::djinni::F32::toCpp(bottomrighty),
                                                   ::djinni::F32::toCpp(opacity),
                                                   ::djinni::F64::toCpp(color));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)drawImageRenderTargetScale:(nullable NOKRenderTarget *)img
                                sx:(float)sx
                                sy:(float)sy
                                sw:(float)sw
                                sh:(float)sh
                              left:(float)left
                               top:(float)top
                             right:(float)right
                            bottom:(float)bottom
                           opacity:(float)opacity
                             color:(double)color {
    try {
        _cppRefHandle.get()->drawImageRenderTargetScale(::djinni_generated::RenderTarget::toCpp(img),
                                                        ::djinni::F32::toCpp(sx),
                                                        ::djinni::F32::toCpp(sy),
                                                        ::djinni::F32::toCpp(sw),
                                                        ::djinni::F32::toCpp(sh),
                                                        ::djinni::F32::toCpp(left),
                                                        ::djinni::F32::toCpp(top),
                                                        ::djinni::F32::toCpp(right),
                                                        ::djinni::F32::toCpp(bottom),
                                                        ::djinni::F32::toCpp(opacity),
                                                        ::djinni::F64::toCpp(color));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)end {
    try {
        _cppRefHandle.get()->end();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ImageShaderPainter::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ImageShaderPainter::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKImageShaderPainter>(cpp);
}

}  // namespace djinni_generated

@end
