// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKVertexBuffer+Private.h"
#import "NOKVertexBuffer.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKUsage+Private.h"
#import "NOKVertexStructure+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKVertexBuffer ()

- (id)initWithCpp:(const std::shared_ptr<::nok::VertexBuffer>&)cppRef;

@end

@implementation NOKVertexBuffer {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::VertexBuffer>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::VertexBuffer>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable NOKVertexBuffer *)create:(int32_t)count
                           structure:(nullable NOKVertexStructure *)structure
                               usage:(NOKUsage)usage
                instanceDataStepRate:(int32_t)instanceDataStepRate {
    try {
        auto objcpp_result_ = ::nok::VertexBuffer::create(::djinni::I32::toCpp(count),
                                                          ::djinni_generated::VertexStructure::toCpp(structure),
                                                          ::djinni::Enum<::nok::Usage, NOKUsage>::toCpp(usage),
                                                          ::djinni::I32::toCpp(instanceDataStepRate));
        return ::djinni_generated::VertexBuffer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSNumber *> *)lock {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->lock();
        return ::djinni::List<::djinni::F32>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)unlock {
    try {
        _cppRefHandle.get()->unlock();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)count {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->count();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)stride {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->stride();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto VertexBuffer::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto VertexBuffer::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKVertexBuffer>(cpp);
}

}  // namespace djinni_generated

@end
