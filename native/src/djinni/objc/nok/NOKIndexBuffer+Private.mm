// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKIndexBuffer+Private.h"
#import "NOKIndexBuffer.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKIndexBuffer ()

- (id)initWithCpp:(const std::shared_ptr<::nok::IndexBuffer>&)cppRef;

@end

@implementation NOKIndexBuffer {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::IndexBuffer>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::IndexBuffer>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable NOKIndexBuffer *)create:(int32_t)count {
    try {
        auto objcpp_result_ = ::nok::IndexBuffer::create(::djinni::I32::toCpp(count));
        return ::djinni_generated::IndexBuffer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSNumber *> *)lock {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->lock();
        return ::djinni::List<::djinni::I32>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)unlock {
    try {
        _cppRefHandle.get()->unlock();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)count {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->count();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto IndexBuffer::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto IndexBuffer::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKIndexBuffer>(cpp);
}

}  // namespace djinni_generated

@end
