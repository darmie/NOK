// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKColor+Private.h"
#import "NOKColor.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKColor ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Color>&)cppRef;

@end

@implementation NOKColor {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Color>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Color>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (float)getR {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_R();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getG {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_G();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getB {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_B();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getA {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_A();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setR:(float)r {
    try {
        _cppRefHandle.get()->set_R(::djinni::F32::toCpp(r));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setG:(float)g {
    try {
        _cppRefHandle.get()->set_G(::djinni::F32::toCpp(g));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setB:(float)b {
    try {
        _cppRefHandle.get()->set_B(::djinni::F32::toCpp(b));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setA:(float)a {
    try {
        _cppRefHandle.get()->set_A(::djinni::F32::toCpp(a));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKColor *)create:(double)color {
    try {
        auto objcpp_result_ = ::nok::Color::create(::djinni::F64::toCpp(color));
        return ::djinni_generated::Color::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}


namespace djinni_generated {

auto Color::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Color::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKColor>(cpp);
}

}  // namespace djinni_generated

@end
