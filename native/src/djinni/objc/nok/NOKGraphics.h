// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKConstantLocation.h"
#import "NOKMipmapFilter.h"
#import "NOKTexDir.h"
#import "NOKTextureAddressing.h"
#import "NOKTextureArgument.h"
#import "NOKTextureFilter.h"
#import "NOKTextureOperation.h"
#import "NOKTextureUnit.h"
#import <Foundation/Foundation.h>
@class NOKIndexBuffer;
@class NOKMat3;
@class NOKMat4;
@class NOKPipelineState;
@class NOKRenderTarget;
@class NOKTexture;
@class NOKVertexBuffer;

extern int32_t const NOKGraphicsClearColorFlag;
extern int32_t const NOKGraphicsClearDepthFlag;
extern int32_t const NOKGraphicsClearStencilFlag;

@interface NOKGraphics : NSObject

+ (void)setBool:(nonnull NOKConstantLocation *)location
          value:(BOOL)value;

+ (void)setInt:(nonnull NOKConstantLocation *)location
         value:(int32_t)value;

+ (void)setInt2:(nonnull NOKConstantLocation *)location
         value1:(int32_t)value1
         value2:(int32_t)value2;

+ (void)setInt3:(nonnull NOKConstantLocation *)location
         value1:(int32_t)value1
         value2:(int32_t)value2
         value3:(int32_t)value3;

+ (void)setInt4:(nonnull NOKConstantLocation *)location
         value1:(int32_t)value1
         value2:(int32_t)value2
         value3:(int32_t)value3
         value4:(int32_t)value4;

+ (void)setInts:(nonnull NOKConstantLocation *)location
         values:(nonnull NSArray<NSNumber *> *)values
          count:(int32_t)count;

+ (void)setFloat2:(nonnull NOKConstantLocation *)location
           value1:(float)value1
           value2:(float)value2;

+ (void)setFloat3:(nonnull NOKConstantLocation *)location
           value1:(float)value1
           value2:(float)value2
           value3:(float)value3;

+ (void)setFloat4:(nonnull NOKConstantLocation *)location
           value1:(int32_t)value1
           value2:(float)value2
           value3:(float)value3
           value4:(float)value4;

+ (void)setFloats:(nonnull NOKConstantLocation *)location
           values:(nonnull NSArray<NSNumber *> *)values
            count:(float)count;

+ (void)setMatrix3:(nonnull NOKConstantLocation *)location
               mat:(nullable NOKMat3 *)mat;

+ (void)setMatrix4:(nonnull NOKConstantLocation *)location
               mat:(nullable NOKMat4 *)mat;

+ (void)setVertexBuffer:(nullable NOKVertexBuffer *)buf;

+ (void)setVertexBuffers:(nonnull NSArray<NOKVertexBuffer *> *)bufs;

+ (void)setIndexBuffer:(nullable NOKIndexBuffer *)buf;

+ (void)setIndexBuffers:(nonnull NSArray<NOKIndexBuffer *> *)bufs;

+ (void)setTexture:(nonnull NOKTextureUnit *)unit
           texture:(nullable NOKTexture *)texture;

+ (void)setTextureArray:(nonnull NOKTextureUnit *)unit
                texture:(nonnull NSArray<NOKTexture *> *)texture;

+ (void)setPipeline:(nullable NOKPipelineState *)pipeline;

+ (void)setStencilReferenceValue:(int32_t)value;

+ (void)drawIndexedVertices:(int32_t)start
                      count:(int32_t)count;

+ (void)drawIndexedVerticesInstanced:(int32_t)instanceCount
                               start:(int32_t)start
                               count:(int32_t)count;

+ (int32_t)antialiasingSamples;

+ (void)setAntialiasingSamples:(int32_t)samples;

+ (BOOL)renderTargetsInvertedY;

+ (void)setRenderTargets:(nonnull NSArray<NOKRenderTarget *> *)targets
                   count:(int32_t)count;

+ (void)setRenderTarget:(nullable NOKRenderTarget *)target;

+ (void)setRenderTargetFace:(nullable NOKRenderTarget *)texture
                       face:(int32_t)face;

+ (void)restoreRenderTarget;

+ (void)begin:(int32_t)win;

+ (void)end:(int32_t)win;

+ (BOOL)swapBuffers;

+ (void)viewport:(int32_t)x
               y:(int32_t)y
           width:(int32_t)width
          height:(int32_t)height;

+ (void)scissor:(int32_t)x
              y:(int32_t)y
          width:(int32_t)width
         height:(int32_t)height;

+ (void)disableScissor;

+ (void)setTextureAddressing:(nonnull NOKTextureUnit *)unit
                         dir:(NOKTexDir)dir
                  addressing:(NOKTextureAddressing)addressing;

+ (void)setTextureMagnificationFilter:(nonnull NOKTextureUnit *)unit
                                filer:(NOKTextureFilter)filer;

+ (void)setTextureMinificationFilter:(nonnull NOKTextureUnit *)unit
                               filer:(NOKTextureFilter)filer;

+ (void)setTextureMipmapFilter:(nonnull NOKTextureUnit *)unit
                         filer:(NOKMipmapFilter)filer;

+ (void)setTexture3DAddressing:(nonnull NOKTextureUnit *)unit
                           dir:(NOKTexDir)dir
                    addressing:(NOKTextureAddressing)addressing;

+ (void)setTexture3DMagnificationFilter:(nonnull NOKTextureUnit *)unit
                                  filer:(NOKTextureFilter)filer;

+ (void)setTexture3DMinificationFilter:(nonnull NOKTextureUnit *)unit
                                 filer:(NOKTextureFilter)filer;

+ (void)setTexture3DMipmapFilter:(nonnull NOKTextureUnit *)unit
                           filer:(NOKMipmapFilter)filer;

+ (void)setTextureCompareMode:(nonnull NOKTextureUnit *)unit
                      enabled:(BOOL)enabled;

+ (void)setCubeMapCompareMode:(nonnull NOKTextureUnit *)unit
                      enabled:(BOOL)enabled;

+ (void)setTextureOperation:(NOKTextureOperation)operation
                       arg1:(NOKTextureArgument)arg1
                       arg2:(NOKTextureArgument)arg2;

+ (BOOL)nonPow2TexturesSupported;

+ (BOOL)getFullscreen;

+ (void)init:(int32_t)windowId
depthBufferBits:(int32_t)depthBufferBits
stencilBufferBits:(int32_t)stencilBufferBits
       vsync:(BOOL)vsync;

+ (void)destroy:(int32_t)windowId;

+ (void)flush;

+ (BOOL)initOcclusionQuery:(nonnull NSArray<NSNumber *> *)occlusionQuery;

+ (void)deleteOcclusionQuery:(double)occlusionQuery;

+ (void)renderOcclusionQuery:(double)occlusionQuery
                   triangles:(int32_t)triangles;

+ (BOOL)isQueryResultsAvailable:(double)occlusionQuery;

+ (void)getQueryResults:(double)occlusionQuery
             pixelCount:(nonnull NSArray<NSNumber *> *)pixelCount;

+ (void)clear:(int32_t)flags
        color:(double)color
        depth:(float)depth
      stencil:(int32_t)stencil;

@end
