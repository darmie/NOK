// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio.djinni

#import "NOKSound+Private.h"
#import "NOKSound.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKSound ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Sound>&)cppRef;

@end

@implementation NOKSound {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Sound>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Sound>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSData *)getCompressedData {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_compressedData();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSNumber *> *)getUncompressedData {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_uncompressedData();
        return ::djinni::List<::djinni::F32>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getLength {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_length();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getChannels {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_channels();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getSampleRate {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_sampleRate();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setCompressedData:(nonnull NSData *)b {
    try {
        _cppRefHandle.get()->set_compressedData(::djinni::Binary::toCpp(b));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setUncompressedData:(nonnull NSArray<NSNumber *> *)d {
    try {
        _cppRefHandle.get()->set_uncompressedData(::djinni::List<::djinni::F32>::toCpp(d));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setLength:(float)length {
    try {
        _cppRefHandle.get()->set_length(::djinni::F32::toCpp(length));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setChannels:(int32_t)channels {
    try {
        _cppRefHandle.get()->set_channels(::djinni::I32::toCpp(channels));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setSampleRate:(int32_t)rate {
    try {
        _cppRefHandle.get()->set_sampleRate(::djinni::I32::toCpp(rate));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)unload {
    try {
        _cppRefHandle.get()->unload();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKSound *)create {
    try {
        auto objcpp_result_ = ::nok::Sound::create();
        return ::djinni_generated::Sound::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Sound::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Sound::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKSound>(cpp);
}

}  // namespace djinni_generated

@end
