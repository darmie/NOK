// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

#import "NOKVec4+Private.h"
#import "NOKVec4.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKVec4 ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Vec4>&)cppRef;

@end

@implementation NOKVec4 {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Vec4>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Vec4>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (float)getX {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_x();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getY {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_y();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getZ {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_z();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setX:(float)x {
    try {
        _cppRefHandle.get()->set_x(::djinni::F32::toCpp(x));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setY:(float)y {
    try {
        _cppRefHandle.get()->set_y(::djinni::F32::toCpp(y));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setZ:(float)z {
    try {
        _cppRefHandle.get()->set_z(::djinni::F32::toCpp(z));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setW:(float)w {
    try {
        _cppRefHandle.get()->set_w(::djinni::F32::toCpp(w));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)add:(nullable NOKVec4 *)v {
    try {
        _cppRefHandle.get()->add(::djinni_generated::Vec4::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)addScaledVector:(nullable NOKVec4 *)v {
    try {
        _cppRefHandle.get()->addScaledVector(::djinni_generated::Vec4::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)sub:(nullable NOKVec4 *)v {
    try {
        _cppRefHandle.get()->sub(::djinni_generated::Vec4::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)multiply:(float)i {
    try {
        _cppRefHandle.get()->multiply(::djinni::F32::toCpp(i));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)divide:(float)i {
    try {
        _cppRefHandle.get()->divide(::djinni::F32::toCpp(i));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)squareLength {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->squareLength();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getLength {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getLength();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setLength:(float)length {
    try {
        _cppRefHandle.get()->setLength(::djinni::F32::toCpp(length));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKVec4 *)normalize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->normalize();
        return ::djinni_generated::Vec4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isZero {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isZero();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)get:(float)i {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get(::djinni::F32::toCpp(i));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)set:(float)i
          v:(float)v {
    try {
        _cppRefHandle.get()->set(::djinni::F32::toCpp(i),
                                 ::djinni::F32::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)dot:(nullable NOKVec4 *)v {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->dot(::djinni_generated::Vec4::toCpp(v));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKVec4 *)cross:(nullable NOKVec4 *)v {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->cross(::djinni_generated::Vec4::toCpp(v));
        return ::djinni_generated::Vec4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)distance:(nullable NOKVec4 *)v {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->distance(::djinni_generated::Vec4::toCpp(v));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)invert {
    try {
        _cppRefHandle.get()->invert();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKVec4 *)create:(float)x
                           y:(float)y
                           z:(float)z {
    try {
        auto objcpp_result_ = ::nok::Vec4::create(::djinni::F32::toCpp(x),
                                                  ::djinni::F32::toCpp(y),
                                                  ::djinni::F32::toCpp(z));
        return ::djinni_generated::Vec4::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Vec4::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Vec4::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKVec4>(cpp);
}

}  // namespace djinni_generated

@end
