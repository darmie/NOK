// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#import "NOKImage+Private.h"
#import "NOKImage.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKImageCompression+Private.h"
#import "NOKImageFormat+Private.h"
#import "NOKTexture+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKImage ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Image>&)cppRef;

@end

@implementation NOKImage {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Image>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Image>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (int32_t)sizeOf:(NOKImageFormat)format {
    try {
        auto objcpp_result_ = ::nok::Image::sizeOf(::djinni::Enum<::nok::ImageFormat, NOKImageFormat>::toCpp(format));
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKTexture *)create:(int32_t)width
                         height:(int32_t)height
                         format:(NOKImageFormat)format
                       readable:(BOOL)readable {
    try {
        auto objcpp_result_ = ::nok::Image::create(::djinni::I32::toCpp(width),
                                                   ::djinni::I32::toCpp(height),
                                                   ::djinni::Enum<::nok::ImageFormat, NOKImageFormat>::toCpp(format),
                                                   ::djinni::Bool::toCpp(readable));
        return ::djinni_generated::Texture::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKTexture *)create3D:(int32_t)width
                           height:(int32_t)height
                            depth:(int32_t)depth
                           format:(NOKImageFormat)format
                         readable:(BOOL)readable {
    try {
        auto objcpp_result_ = ::nok::Image::create3D(::djinni::I32::toCpp(width),
                                                     ::djinni::I32::toCpp(height),
                                                     ::djinni::I32::toCpp(depth),
                                                     ::djinni::Enum<::nok::ImageFormat, NOKImageFormat>::toCpp(format),
                                                     ::djinni::Bool::toCpp(readable));
        return ::djinni_generated::Texture::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKTexture *)fromData:(nonnull NSData *)data
                            width:(int32_t)width
                           height:(int32_t)height
                           format:(NOKImageFormat)format
                         readable:(BOOL)readable {
    try {
        auto objcpp_result_ = ::nok::Image::fromData(::djinni::Binary::toCpp(data),
                                                     ::djinni::I32::toCpp(width),
                                                     ::djinni::I32::toCpp(height),
                                                     ::djinni::Enum<::nok::ImageFormat, NOKImageFormat>::toCpp(format),
                                                     ::djinni::Bool::toCpp(readable));
        return ::djinni_generated::Texture::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKTexture *)fromData3D:(nonnull NSData *)data
                              width:(int32_t)width
                             height:(int32_t)height
                              depth:(int32_t)depth
                             format:(NOKImageFormat)format
                           readable:(BOOL)readable {
    try {
        auto objcpp_result_ = ::nok::Image::fromData3D(::djinni::Binary::toCpp(data),
                                                       ::djinni::I32::toCpp(width),
                                                       ::djinni::I32::toCpp(height),
                                                       ::djinni::I32::toCpp(depth),
                                                       ::djinni::Enum<::nok::ImageFormat, NOKImageFormat>::toCpp(format),
                                                       ::djinni::Bool::toCpp(readable));
        return ::djinni_generated::Texture::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)at:(int32_t)x
            y:(int32_t)y {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->at(::djinni::I32::toCpp(x),
                                                      ::djinni::I32::toCpp(y));
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)getPixels {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPixels();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKImageFormat)getFormat {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_format();
        return ::djinni::Enum<::nok::ImageFormat, NOKImageFormat>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)readable {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->readable();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (NOKImageCompression)getCompression {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_compression();
        return ::djinni::Enum<::nok::ImageCompression, NOKImageCompression>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)getData {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_data();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getDataSize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_dataSize();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getHeight {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_height();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getWidth {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_width();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setWidth:(int32_t)width {
    try {
        _cppRefHandle.get()->set_width(::djinni::I32::toCpp(width));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setHeight:(int32_t)height {
    try {
        _cppRefHandle.get()->set_height(::djinni::I32::toCpp(height));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getDepth {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_depth();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setDepth:(int32_t)depth {
    try {
        _cppRefHandle.get()->set_depth(::djinni::I32::toCpp(depth));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Image::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Image::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKImage>(cpp);
}

}  // namespace djinni_generated

@end
