// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio.djinni

#import "NOKResamplingAudioChannel+Private.h"
#import "NOKResamplingAudioChannel.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKResamplingAudioChannel ()

- (id)initWithCpp:(const std::shared_ptr<::nok::ResamplingAudioChannel>&)cppRef;

@end

@implementation NOKResamplingAudioChannel {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::ResamplingAudioChannel>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::ResamplingAudioChannel>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSArray<NSNumber *> *)getData {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_data();
        return ::djinni::List<::djinni::F32>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setData:(nonnull NSArray<NSNumber *> *)d {
    try {
        _cppRefHandle.get()->set_data(::djinni::List<::djinni::F32>::toCpp(d));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getSamplesRate {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_samplesRate();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKResamplingAudioChannel *)create:(BOOL)looping
                                    sampleRate:(int32_t)sampleRate {
    try {
        auto objcpp_result_ = ::nok::ResamplingAudioChannel::create(::djinni::Bool::toCpp(looping),
                                                                    ::djinni::I32::toCpp(sampleRate));
        return ::djinni_generated::ResamplingAudioChannel::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)sample:(int32_t)position
     sampleRate:(int32_t)sampleRate {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->sample(::djinni::I32::toCpp(position),
                                                          ::djinni::I32::toCpp(sampleRate));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)lerp:(float)v0
          v1:(float)v1
           t:(float)t {
    try {
        _cppRefHandle.get()->lerp(::djinni::F32::toCpp(v0),
                                  ::djinni::F32::toCpp(v1),
                                  ::djinni::F32::toCpp(t));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)sampleLength:(int32_t)sampleRate {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->sampleLength(::djinni::I32::toCpp(sampleRate));
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)nextSamples:(nonnull NSArray<NSNumber *> *)requestedSamples
    requestedLength:(int32_t)requestedLength
         sampleRate:(int32_t)sampleRate {
    try {
        _cppRefHandle.get()->nextSamples(::djinni::List<::djinni::F32>::toCpp(requestedSamples),
                                         ::djinni::I32::toCpp(requestedLength),
                                         ::djinni::I32::toCpp(sampleRate));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)play {
    try {
        _cppRefHandle.get()->play();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)pause {
    try {
        _cppRefHandle.get()->pause();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)stop {
    try {
        _cppRefHandle.get()->stop();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getLength {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_length();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getPosition {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_position();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPosition:(float)pos {
    try {
        _cppRefHandle.get()->set_position(::djinni::F32::toCpp(pos));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getVolume {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_volume();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setVolume:(float)vol {
    try {
        _cppRefHandle.get()->set_volume(::djinni::F32::toCpp(vol));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)getFinished {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_finished();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)max:(int32_t)a
          b:(int32_t)b {
    try {
        _cppRefHandle.get()->max(::djinni::I32::toCpp(a),
                                 ::djinni::I32::toCpp(b));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)min:(int32_t)a
          b:(int32_t)b {
    try {
        _cppRefHandle.get()->min(::djinni::I32::toCpp(a),
                                 ::djinni::I32::toCpp(b));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ResamplingAudioChannel::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ResamplingAudioChannel::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKResamplingAudioChannel>(cpp);
}

}  // namespace djinni_generated

@end
