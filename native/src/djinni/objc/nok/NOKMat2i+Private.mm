// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

#import "NOKMat2i+Private.h"
#import "NOKMat2i.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKVec3i+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKMat2i ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Mat2i>&)cppRef;

@end

@implementation NOKMat2i {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Mat2i>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Mat2i>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (float)get:(int32_t)row
         col:(int32_t)col {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get(::djinni::I32::toCpp(row),
                                                       ::djinni::I32::toCpp(col));
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)set:(int32_t)row
        col:(int32_t)col
          v:(int32_t)v {
    try {
        _cppRefHandle.get()->set(::djinni::I32::toCpp(row),
                                 ::djinni::I32::toCpp(col),
                                 ::djinni::I32::toCpp(v));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)orthogonalProjection:(float)left
                                      right:(float)right
                                     bottom:(float)bottom
                                        top:(float)top
                                         zn:(float)zn
                                         zf:(float)zf {
    try {
        auto objcpp_result_ = ::nok::Mat2i::orthogonalProjection(::djinni::F32::toCpp(left),
                                                                 ::djinni::F32::toCpp(right),
                                                                 ::djinni::F32::toCpp(bottom),
                                                                 ::djinni::F32::toCpp(top),
                                                                 ::djinni::F32::toCpp(zn),
                                                                 ::djinni::F32::toCpp(zf));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)perspective:(float)left
                             right:(float)right
                               top:(float)top
                            bottom:(float)bottom
                              near:(float)near
                               far:(float)far {
    try {
        auto objcpp_result_ = ::nok::Mat2i::perspective(::djinni::F32::toCpp(left),
                                                        ::djinni::F32::toCpp(right),
                                                        ::djinni::F32::toCpp(top),
                                                        ::djinni::F32::toCpp(bottom),
                                                        ::djinni::F32::toCpp(near),
                                                        ::djinni::F32::toCpp(far));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)perspectiveFOV:(float)fov
                               aspect:(float)aspect
                                 near:(float)near
                                  far:(float)far {
    try {
        auto objcpp_result_ = ::nok::Mat2i::perspectiveFOV(::djinni::F32::toCpp(fov),
                                                           ::djinni::F32::toCpp(aspect),
                                                           ::djinni::F32::toCpp(near),
                                                           ::djinni::F32::toCpp(far));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)lookAt:(nullable NOKVec3i *)eye
                           at:(nullable NOKVec3i *)at
                           up:(nullable NOKVec3i *)up {
    try {
        auto objcpp_result_ = ::nok::Mat2i::lookAt(::djinni_generated::Vec3i::toCpp(eye),
                                                   ::djinni_generated::Vec3i::toCpp(at),
                                                   ::djinni_generated::Vec3i::toCpp(up));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)lookAlong:(nullable NOKVec3i *)axis
                             eye:(nullable NOKVec3i *)eye
                              up:(nullable NOKVec3i *)up {
    try {
        auto objcpp_result_ = ::nok::Mat2i::lookAlong(::djinni_generated::Vec3i::toCpp(axis),
                                                      ::djinni_generated::Vec3i::toCpp(eye),
                                                      ::djinni_generated::Vec3i::toCpp(up));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)translation:(float)x
                                 y:(float)y {
    try {
        auto objcpp_result_ = ::nok::Mat2i::translation(::djinni::F32::toCpp(x),
                                                        ::djinni::F32::toCpp(y));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)movement:(float)x
                              y:(float)y
                              z:(float)z {
    try {
        auto objcpp_result_ = ::nok::Mat2i::movement(::djinni::F32::toCpp(x),
                                                     ::djinni::F32::toCpp(y),
                                                     ::djinni::F32::toCpp(z));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)identity {
    try {
        auto objcpp_result_ = ::nok::Mat2i::identity();
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)scale:(float)scale {
    try {
        auto objcpp_result_ = ::nok::Mat2i::scale(::djinni::F32::toCpp(scale));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)rotationX:(float)alpha {
    try {
        auto objcpp_result_ = ::nok::Mat2i::rotationX(::djinni::F32::toCpp(alpha));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)rotationY:(float)alpha {
    try {
        auto objcpp_result_ = ::nok::Mat2i::rotationY(::djinni::F32::toCpp(alpha));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)rotationZ:(float)alpha {
    try {
        auto objcpp_result_ = ::nok::Mat2i::rotationZ(::djinni::F32::toCpp(alpha));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)rotation:(float)yaw
                          pitch:(float)pitch
                           roll:(float)roll {
    try {
        auto objcpp_result_ = ::nok::Mat2i::rotation(::djinni::F32::toCpp(yaw),
                                                     ::djinni::F32::toCpp(pitch),
                                                     ::djinni::F32::toCpp(roll));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)create {
    try {
        auto objcpp_result_ = ::nok::Mat2i::create();
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)from:(nullable NOKMat2i *)mat {
    try {
        auto objcpp_result_ = ::nok::Mat2i::from(::djinni_generated::Mat2i::toCpp(mat));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat2i *)add:(nullable NOKMat2i *)mat {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->add(::djinni_generated::Mat2i::toCpp(mat));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat2i *)sub:(nullable NOKMat2i *)mat {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->sub(::djinni_generated::Mat2i::toCpp(mat));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat2i *)multiply:(int32_t)i {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->multiply(::djinni::I32::toCpp(i));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat2i *)clone {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->clone();
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat2i *)transpose {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->transpose();
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NOKMat2i *)transpose3x3 {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->transpose3x3();
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)trace {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->trace();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)determinant {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->determinant();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKMat2i *)linearInterpolate:(nullable NOKMat2i *)a
                                       b:(nullable NOKMat2i *)b
                                    prop:(float)prop {
    try {
        auto objcpp_result_ = ::nok::Mat2i::linearInterpolate(::djinni_generated::Mat2i::toCpp(a),
                                                              ::djinni_generated::Mat2i::toCpp(b),
                                                              ::djinni::F32::toCpp(prop));
        return ::djinni_generated::Mat2i::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}


namespace djinni_generated {

auto Mat2i::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Mat2i::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKMat2i>(cpp);
}

}  // namespace djinni_generated

@end
