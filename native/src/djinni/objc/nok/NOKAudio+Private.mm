// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio.djinni

#import "NOKAudio+Private.h"
#import "NOKAudio.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "NOKAudioBuffer+Private.h"
#import "NOKAudioChannel+Private.h"
#import "NOKSound+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKAudio ()

- (id)initWithCpp:(const std::shared_ptr<::nok::Audio>&)cppRef;

@end

@implementation NOKAudio {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::Audio>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::Audio>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (int32_t)getSamplesPerSecond {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_samplesPerSecond();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKAudioChannel *)stream:(nullable NOKSound *)sound
                                loop:(BOOL)loop {
    try {
        auto objcpp_result_ = ::nok::Audio::stream(::djinni_generated::Sound::toCpp(sound),
                                                   ::djinni::Bool::toCpp(loop));
        return ::djinni_generated::AudioChannel::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)init {
    try {
        ::nok::Audio::init();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable NOKAudioBuffer *)getBuffer {
    try {
        auto objcpp_result_ = ::nok::Audio::getBuffer();
        return ::djinni_generated::AudioBuffer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setBuffer:(nullable NOKAudioBuffer *)buf {
    try {
        ::nok::Audio::setBuffer(::djinni_generated::AudioBuffer::toCpp(buf));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)update {
    try {
        ::nok::Audio::update();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)shutdown {
    try {
        ::nok::Audio::shutdown();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (float)readSample {
    try {
        auto objcpp_result_ = ::nok::Audio::readSample();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Audio::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Audio::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKAudio>(cpp);
}

}  // namespace djinni_generated

@end
