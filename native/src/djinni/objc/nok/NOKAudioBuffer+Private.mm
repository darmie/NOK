// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio.djinni

#import "NOKAudioBuffer+Private.h"
#import "NOKAudioBuffer.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NOKAudioBuffer ()

- (id)initWithCpp:(const std::shared_ptr<::nok::AudioBuffer>&)cppRef;

@end

@implementation NOKAudioBuffer {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nok::AudioBuffer>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nok::AudioBuffer>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable NOKAudioBuffer *)create:(int32_t)size
                           channels:(int32_t)channels
                   samplesPerSecond:(int32_t)samplesPerSecond {
    try {
        auto objcpp_result_ = ::nok::AudioBuffer::create(::djinni::I32::toCpp(size),
                                                         ::djinni::I32::toCpp(channels),
                                                         ::djinni::I32::toCpp(samplesPerSecond));
        return ::djinni_generated::AudioBuffer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getChannels {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_channels();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getSamplesPerSecond {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_samplesPerSecond();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<NSNumber *> *)getData {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_data();
        return ::djinni::List<::djinni::F32>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getSize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_size();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getReadLocation {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_readLocation();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getWriteLocation {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->get_writeLocation();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setChannels:(int32_t)channels {
    try {
        _cppRefHandle.get()->set_channels(::djinni::I32::toCpp(channels));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setSamplesPerSecond:(int32_t)samples {
    try {
        _cppRefHandle.get()->set_samplesPerSecond(::djinni::I32::toCpp(samples));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setData:(nonnull NSArray<NSNumber *> *)data {
    try {
        _cppRefHandle.get()->set_data(::djinni::List<::djinni::F32>::toCpp(data));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setSize:(int32_t)s {
    try {
        _cppRefHandle.get()->set_size(::djinni::I32::toCpp(s));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setReadLocation:(int32_t)loc {
    try {
        _cppRefHandle.get()->set_readLocation(::djinni::I32::toCpp(loc));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setWriteLocation:(int32_t)loc {
    try {
        _cppRefHandle.get()->set_writeLocation(::djinni::I32::toCpp(loc));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto AudioBuffer::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto AudioBuffer::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NOKAudioBuffer>(cpp);
}

}  // namespace djinni_generated

@end
