// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#pragma once

#include "baked_char.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeBakedChar final {
public:
    using CppType = ::nok::BakedChar;
    using JniType = jobject;

    using Boxed = NativeBakedChar;

    ~NativeBakedChar();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeBakedChar();
    friend ::djinni::JniClass<NativeBakedChar>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("co/zenturi/nok/BakedChar") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(IIIIFFF)V") };
    const jfieldID field_mX0 { ::djinni::jniGetFieldID(clazz.get(), "mX0", "I") };
    const jfieldID field_mY0 { ::djinni::jniGetFieldID(clazz.get(), "mY0", "I") };
    const jfieldID field_mX1 { ::djinni::jniGetFieldID(clazz.get(), "mX1", "I") };
    const jfieldID field_mX2 { ::djinni::jniGetFieldID(clazz.get(), "mX2", "I") };
    const jfieldID field_mXoff { ::djinni::jniGetFieldID(clazz.get(), "mXoff", "F") };
    const jfieldID field_mYoff { ::djinni::jniGetFieldID(clazz.get(), "mYoff", "F") };
    const jfieldID field_mXadvance { ::djinni::jniGetFieldID(clazz.get(), "mXadvance", "F") };
};

}  // namespace djinni_generated
