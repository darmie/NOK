// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#include "NativeVertexElement.hpp"  // my header
#include "Marshal.hpp"
#include "NativeVertexAttribute.hpp"
#include "NativeVertexData.hpp"

namespace djinni_generated {

NativeVertexElement::NativeVertexElement() : ::djinni::JniInterface<::nok::VertexElement, NativeVertexElement>("co/zenturi/nok/VertexElement$CppProxy") {}

NativeVertexElement::~NativeVertexElement() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_VertexElement_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::VertexElement>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_co_zenturi_nok_VertexElement_00024CppProxy_native_1getName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::VertexElement>(nativeRef);
        auto r = ref->get_name();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_VertexElement_00024CppProxy_native_1setName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_n)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::VertexElement>(nativeRef);
        ref->set_name(::djinni::String::toCpp(jniEnv, j_n));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_VertexElement_00024CppProxy_native_1getAttribute(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::VertexElement>(nativeRef);
        auto r = ref->get_attribute();
        return ::djinni::release(::djinni_generated::NativeVertexAttribute::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_VertexElement_00024CppProxy_native_1setAttribute(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_a)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::VertexElement>(nativeRef);
        ref->set_attribute(::djinni_generated::NativeVertexAttribute::toCpp(jniEnv, j_a));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_VertexElement_00024CppProxy_native_1getData(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::VertexElement>(nativeRef);
        auto r = ref->get_data();
        return ::djinni::release(::djinni_generated::NativeVertexData::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_VertexElement_00024CppProxy_native_1setData(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_d)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::VertexElement>(nativeRef);
        ref->set_data(::djinni_generated::NativeVertexData::toCpp(jniEnv, j_d));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_VertexElement_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::VertexElement::create();
        return ::djinni::release(::djinni_generated::NativeVertexElement::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_VertexElement_createWithName(JNIEnv* jniEnv, jobject /*this*/, jstring j_name, jobject j_data)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::VertexElement::createWithName(::djinni::String::toCpp(jniEnv, j_name),
                                                      ::djinni_generated::NativeVertexData::toCpp(jniEnv, j_data));
        return ::djinni::release(::djinni_generated::NativeVertexElement::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_VertexElement_createWithAttribute(JNIEnv* jniEnv, jobject /*this*/, jobject j_attribute, jobject j_data)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::VertexElement::createWithAttribute(::djinni_generated::NativeVertexAttribute::toCpp(jniEnv, j_attribute),
                                                           ::djinni_generated::NativeVertexData::toCpp(jniEnv, j_data));
        return ::djinni::release(::djinni_generated::NativeVertexElement::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
