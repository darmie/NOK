// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#include "NativePipelineState.hpp"  // my header
#include "Marshal.hpp"
#include "NativeBlendingOperation.hpp"
#include "NativeConstantLocation.hpp"
#include "NativeCullMode.hpp"
#include "NativeShader.hpp"
#include "NativeStencilAction.hpp"
#include "NativeTextureUnit.hpp"
#include "NativeVertexStructure.hpp"
#include "NativeZCompareMode.hpp"

namespace djinni_generated {

NativePipelineState::NativePipelineState() : ::djinni::JniInterface<::nok::PipelineState, NativePipelineState>("co/zenturi/nok/PipelineState$CppProxy") {}

NativePipelineState::~NativePipelineState() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::PipelineState>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1getInputLayout(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->get_inputLayout();
        return ::djinni::release(::djinni::List<::djinni_generated::NativeVertexStructure>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1getVertexShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->get_vertexShader();
        return ::djinni::release(::djinni_generated::NativeShader::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setVertexShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_shader)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_vertexShader(::djinni_generated::NativeShader::toCpp(jniEnv, j_shader));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1getFragmentShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->get_fragmentShader();
        return ::djinni::release(::djinni_generated::NativeShader::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setFragmentShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_shader)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_fragmentShader(::djinni_generated::NativeShader::toCpp(jniEnv, j_shader));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1getGeometryShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->get_geometryShader();
        return ::djinni::release(::djinni_generated::NativeShader::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setGeometryShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_shader)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_geometryShader(::djinni_generated::NativeShader::toCpp(jniEnv, j_shader));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1getTessellationControlShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->get_tessellationControlShader();
        return ::djinni::release(::djinni_generated::NativeShader::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setTessellationControlShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_shader)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_tessellationControlShader(::djinni_generated::NativeShader::toCpp(jniEnv, j_shader));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1getTessellationEvaluationShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->get_tessellationEvaluationShader();
        return ::djinni::release(::djinni_generated::NativeShader::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setTessellationEvaluationShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_shader)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_tessellationEvaluationShader(::djinni_generated::NativeShader::toCpp(jniEnv, j_shader));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1getCullMode(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->get_cullMode();
        return ::djinni::release(::djinni_generated::NativeCullMode::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setCullMode(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_cullMode)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_cullMode(::djinni_generated::NativeCullMode::toCpp(jniEnv, j_cullMode));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1depthWrite(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->depthWrite();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setDepthWrite(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_b)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->setDepthWrite(::djinni::Bool::toCpp(jniEnv, j_b));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1depthMode(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->depthMode();
        return ::djinni::release(::djinni_generated::NativeZCompareMode::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setDepthMode(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_m)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_depthMode(::djinni_generated::NativeZCompareMode::toCpp(jniEnv, j_m));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1stencilMode(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->stencilMode();
        return ::djinni::release(::djinni_generated::NativeZCompareMode::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1getStencilMode(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->get_stencilMode();
        return ::djinni::release(::djinni_generated::NativeZCompareMode::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1stencilBothPass(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->stencilBothPass();
        return ::djinni::release(::djinni_generated::NativeStencilAction::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setStencilBothPass(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_s)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_stencilBothPass(::djinni_generated::NativeStencilAction::toCpp(jniEnv, j_s));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1stencilDepthFail(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->stencilDepthFail();
        return ::djinni::release(::djinni_generated::NativeStencilAction::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setStencilDepthFail(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_s)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_stencilDepthFail(::djinni_generated::NativeStencilAction::toCpp(jniEnv, j_s));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1stencilFail(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->stencilFail();
        return ::djinni::release(::djinni_generated::NativeStencilAction::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setStencilFail(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_s)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_stencilFail(::djinni_generated::NativeStencilAction::toCpp(jniEnv, j_s));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1blendSource(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->blendSource();
        return ::djinni::release(::djinni_generated::NativeBlendingOperation::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setBlendSource(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_s)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_blendSource(::djinni_generated::NativeBlendingOperation::toCpp(jniEnv, j_s));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1blendDestination(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->blendDestination();
        return ::djinni::release(::djinni_generated::NativeBlendingOperation::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setBlendDestination(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_s)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_blendDestination(::djinni_generated::NativeBlendingOperation::toCpp(jniEnv, j_s));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1alphaBlendSource(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->alphaBlendSource();
        return ::djinni::release(::djinni_generated::NativeBlendingOperation::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setAlphaBlendSource(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_s)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_alphaBlendSource(::djinni_generated::NativeBlendingOperation::toCpp(jniEnv, j_s));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1alphaBlendDestination(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->alphaBlendDestination();
        return ::djinni::release(::djinni_generated::NativeBlendingOperation::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setAlphaBlendDestination(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_s)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_alphaBlendDestination(::djinni_generated::NativeBlendingOperation::toCpp(jniEnv, j_s));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1colorWriteMaskRed(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->colorWriteMaskRed();
        return ::djinni::release(::djinni::List<::djinni::Bool>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setColorWriteMaskRed(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_v)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_colorWriteMaskRed(::djinni::List<::djinni::Bool>::toCpp(jniEnv, j_v));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1colorWriteMaskGreen(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->colorWriteMaskGreen();
        return ::djinni::release(::djinni::List<::djinni::Bool>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setColorWriteMaskGreen(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_v)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_colorWriteMaskGreen(::djinni::List<::djinni::Bool>::toCpp(jniEnv, j_v));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1colorWriteMaskBlue(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->colorWriteMaskBlue();
        return ::djinni::release(::djinni::List<::djinni::Bool>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setColorWriteMaskBlue(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_v)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->set_colorWriteMaskBlue(::djinni::List<::djinni::Bool>::toCpp(jniEnv, j_v));
        return ::djinni::release(::djinni::List<::djinni::Bool>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1colorWriteMaskAlpha(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->colorWriteMaskAlpha();
        return ::djinni::release(::djinni::List<::djinni::Bool>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setColorWriteMaskAlpha(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_v)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_colorWriteMaskAlpha(::djinni::List<::djinni::Bool>::toCpp(jniEnv, j_v));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1conservativeRasterization(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->conservativeRasterization();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1setConservativeRasterization(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_b)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->set_conservativeRasterization(::djinni::Bool::toCpp(jniEnv, j_b));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1compile(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        ref->compile();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1getConstantLocation(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->getConstantLocation(::djinni::String::toCpp(jniEnv, j_name));
        return ::djinni::release(::djinni_generated::NativeConstantLocation::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_PipelineState_00024CppProxy_native_1getTextureUnit(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::PipelineState>(nativeRef);
        auto r = ref->getTextureUnit(::djinni::String::toCpp(jniEnv, j_name));
        return ::djinni::release(::djinni_generated::NativeTextureUnit::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
