// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#include "NativeIndexBuffer.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeIndexBuffer::NativeIndexBuffer() : ::djinni::JniInterface<::nok::IndexBuffer, NativeIndexBuffer>("co/zenturi/nok/IndexBuffer$CppProxy") {}

NativeIndexBuffer::~NativeIndexBuffer() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_IndexBuffer_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::IndexBuffer>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_IndexBuffer_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/, jint j_count)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::IndexBuffer::create(::djinni::I32::toCpp(jniEnv, j_count));
        return ::djinni::release(::djinni_generated::NativeIndexBuffer::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_IndexBuffer_00024CppProxy_native_1lock(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::IndexBuffer>(nativeRef);
        auto r = ref->lock();
        return ::djinni::release(::djinni::List<::djinni::I32>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_IndexBuffer_00024CppProxy_native_1unlock(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::IndexBuffer>(nativeRef);
        ref->unlock();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_IndexBuffer_00024CppProxy_native_1count(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::IndexBuffer>(nativeRef);
        auto r = ref->count();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
