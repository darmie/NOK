// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio.djinni

#include "NativeAudioChannel.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeAudioChannel::NativeAudioChannel() : ::djinni::JniInterface<::nok::AudioChannel, NativeAudioChannel>("co/zenturi/nok/AudioChannel$CppProxy") {}

NativeAudioChannel::~NativeAudioChannel() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::AudioChannel>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1getData(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        auto r = ref->get_data();
        return ::djinni::release(::djinni::List<::djinni::F32>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1setData(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_d)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        ref->set_data(::djinni::List<::djinni::F32>::toCpp(jniEnv, j_d));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/, jboolean j_looping)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::AudioChannel::create(::djinni::Bool::toCpp(jniEnv, j_looping));
        return ::djinni::release(::djinni_generated::NativeAudioChannel::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1nextSamples(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_requestedSamples, jint j_requestedLength, jint j_sampleRate)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        ref->nextSamples(::djinni::List<::djinni::F32>::toCpp(jniEnv, j_requestedSamples),
                         ::djinni::I32::toCpp(jniEnv, j_requestedLength),
                         ::djinni::I32::toCpp(jniEnv, j_sampleRate));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1play(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        ref->play();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1pause(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        ref->pause();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1stop(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        ref->stop();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jfloat JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1getLength(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        auto r = ref->get_length();
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jfloat JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1getPosition(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        auto r = ref->get_position();
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1setPosition(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_pos)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        ref->set_position(::djinni::F32::toCpp(jniEnv, j_pos));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jfloat JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1getVolume(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        auto r = ref->get_volume();
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1setVolume(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_vol)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        ref->set_volume(::djinni::F32::toCpp(jniEnv, j_vol));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1getFinished(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        auto r = ref->get_finished();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1max(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_a, jint j_b)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        ref->max(::djinni::I32::toCpp(jniEnv, j_a),
                 ::djinni::I32::toCpp(jniEnv, j_b));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_AudioChannel_00024CppProxy_native_1min(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_a, jint j_b)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::AudioChannel>(nativeRef);
        ref->min(::djinni::I32::toCpp(jniEnv, j_a),
                 ::djinni::I32::toCpp(jniEnv, j_b));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
