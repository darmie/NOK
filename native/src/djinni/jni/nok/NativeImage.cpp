// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#include "NativeImage.hpp"  // my header
#include "Marshal.hpp"
#include "NativeImageCompression.hpp"
#include "NativeImageFormat.hpp"
#include "NativeTexture.hpp"

namespace djinni_generated {

NativeImage::NativeImage() : ::djinni::JniInterface<::nok::Image, NativeImage>("co/zenturi/nok/Image$CppProxy") {}

NativeImage::~NativeImage() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_Image_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::Image>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_Image_00024CppProxy_sizeOf(JNIEnv* jniEnv, jobject /*this*/, jobject j_format)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::Image::sizeOf(::djinni_generated::NativeImageFormat::toCpp(jniEnv, j_format));
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Image_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/, jint j_width, jint j_height, jobject j_format, jboolean j_readable)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::Image::create(::djinni::I32::toCpp(jniEnv, j_width),
                                      ::djinni::I32::toCpp(jniEnv, j_height),
                                      ::djinni_generated::NativeImageFormat::toCpp(jniEnv, j_format),
                                      ::djinni::Bool::toCpp(jniEnv, j_readable));
        return ::djinni::release(::djinni_generated::NativeTexture::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Image_00024CppProxy_create3D(JNIEnv* jniEnv, jobject /*this*/, jint j_width, jint j_height, jint j_depth, jobject j_format, jboolean j_readable)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::Image::create3D(::djinni::I32::toCpp(jniEnv, j_width),
                                        ::djinni::I32::toCpp(jniEnv, j_height),
                                        ::djinni::I32::toCpp(jniEnv, j_depth),
                                        ::djinni_generated::NativeImageFormat::toCpp(jniEnv, j_format),
                                        ::djinni::Bool::toCpp(jniEnv, j_readable));
        return ::djinni::release(::djinni_generated::NativeTexture::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Image_00024CppProxy_fromData(JNIEnv* jniEnv, jobject /*this*/, jbyteArray j_data, jint j_width, jint j_height, jobject j_format, jboolean j_readable)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::Image::fromData(::djinni::Binary::toCpp(jniEnv, j_data),
                                        ::djinni::I32::toCpp(jniEnv, j_width),
                                        ::djinni::I32::toCpp(jniEnv, j_height),
                                        ::djinni_generated::NativeImageFormat::toCpp(jniEnv, j_format),
                                        ::djinni::Bool::toCpp(jniEnv, j_readable));
        return ::djinni::release(::djinni_generated::NativeTexture::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Image_00024CppProxy_fromData3D(JNIEnv* jniEnv, jobject /*this*/, jbyteArray j_data, jint j_width, jint j_height, jint j_depth, jobject j_format, jboolean j_readable)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::Image::fromData3D(::djinni::Binary::toCpp(jniEnv, j_data),
                                          ::djinni::I32::toCpp(jniEnv, j_width),
                                          ::djinni::I32::toCpp(jniEnv, j_height),
                                          ::djinni::I32::toCpp(jniEnv, j_depth),
                                          ::djinni_generated::NativeImageFormat::toCpp(jniEnv, j_format),
                                          ::djinni::Bool::toCpp(jniEnv, j_readable));
        return ::djinni::release(::djinni_generated::NativeTexture::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1at(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_x, jint j_y)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        auto r = ref->at(::djinni::I32::toCpp(jniEnv, j_x),
                         ::djinni::I32::toCpp(jniEnv, j_y));
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1getPixels(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        auto r = ref->getPixels();
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1getFormat(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        auto r = ref->get_format();
        return ::djinni::release(::djinni_generated::NativeImageFormat::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1readable(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        auto r = ref->readable();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1getCompression(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        auto r = ref->get_compression();
        return ::djinni::release(::djinni_generated::NativeImageCompression::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jbyteArray JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1getData(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        auto r = ref->get_data();
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1getDataSize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        auto r = ref->get_dataSize();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1getHeight(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        auto r = ref->get_height();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1getWidth(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        auto r = ref->get_width();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1setWidth(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_width)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        ref->set_width(::djinni::I32::toCpp(jniEnv, j_width));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1setHeight(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_height)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        ref->set_height(::djinni::I32::toCpp(jniEnv, j_height));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1getDepth(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        auto r = ref->get_depth();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Image_00024CppProxy_native_1setDepth(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_depth)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Image>(nativeRef);
        ref->set_depth(::djinni::I32::toCpp(jniEnv, j_depth));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
