// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#include "NativeTextShaderPainter.hpp"  // my header
#include "Marshal.hpp"
#include "NativeKavur.hpp"
#include "NativeMat3.hpp"
#include "NativeMat4.hpp"
#include "NativePipelineState.hpp"

namespace djinni_generated {

NativeTextShaderPainter::NativeTextShaderPainter() : ::djinni::JniInterface<::nok::TextShaderPainter, NativeTextShaderPainter>("co/zenturi/nok/TextShaderPainter$CppProxy") {}

NativeTextShaderPainter::~NativeTextShaderPainter() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_TextShaderPainter_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::TextShaderPainter>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_TextShaderPainter_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::TextShaderPainter::create();
        return ::djinni::release(::djinni_generated::NativeTextShaderPainter::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_TextShaderPainter_00024CppProxy_native_1getFontSize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::TextShaderPainter>(nativeRef);
        auto r = ref->get_fontSize();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_TextShaderPainter_00024CppProxy_native_1getPipeline(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::TextShaderPainter>(nativeRef);
        auto r = ref->get_pipeline();
        return ::djinni::release(::djinni_generated::NativePipelineState::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_TextShaderPainter_00024CppProxy_native_1setPipeline(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_p)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::TextShaderPainter>(nativeRef);
        ref->set_pipeline(::djinni_generated::NativePipelineState::toCpp(jniEnv, j_p));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_TextShaderPainter_00024CppProxy_native_1setProjection(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_projectionMatrix)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::TextShaderPainter>(nativeRef);
        ref->setProjection(::djinni_generated::NativeMat4::toCpp(jniEnv, j_projectionMatrix));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_TextShaderPainter_00024CppProxy_native_1setBilinearFilter(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_bilinear)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::TextShaderPainter>(nativeRef);
        ref->setBilinearFilter(::djinni::Bool::toCpp(jniEnv, j_bilinear));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_TextShaderPainter_00024CppProxy_native_1setFont(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_font)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::TextShaderPainter>(nativeRef);
        ref->setFont(::djinni_generated::NativeKavur::toCpp(jniEnv, j_font));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_TextShaderPainter_00024CppProxy_native_1drawString(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_text, jint j_start, jint j_length, jfloat j_opacity, jdouble j_color, jfloat j_x, jfloat j_y, jobject j_transformation, jobject j_fontGlyphs)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::TextShaderPainter>(nativeRef);
        ref->drawString(::djinni::String::toCpp(jniEnv, j_text),
                        ::djinni::I32::toCpp(jniEnv, j_start),
                        ::djinni::I32::toCpp(jniEnv, j_length),
                        ::djinni::F32::toCpp(jniEnv, j_opacity),
                        ::djinni::F64::toCpp(jniEnv, j_color),
                        ::djinni::F32::toCpp(jniEnv, j_x),
                        ::djinni::F32::toCpp(jniEnv, j_y),
                        ::djinni_generated::NativeMat3::toCpp(jniEnv, j_transformation),
                        ::djinni::List<::djinni::I32>::toCpp(jniEnv, j_fontGlyphs));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_TextShaderPainter_00024CppProxy_native_1end(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::TextShaderPainter>(nativeRef);
        ref->end();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
