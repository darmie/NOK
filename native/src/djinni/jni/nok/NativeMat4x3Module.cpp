// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from math.djinni

#include "NativeMat4x3Module.hpp"  // my header
#include "Marshal.hpp"
#include "NativeJavascriptArray.hpp"
#include "NativeJavascriptMap.hpp"
#include "NativeJavascriptPromise.hpp"
#include "NativeReactBridge.hpp"

namespace djinni_generated {

NativeMat4x3Module::NativeMat4x3Module() : ::djinni::JniInterface<::nok::Mat4x3Module, NativeMat4x3Module>("co/zenturi/nok/Mat4x3Module$CppProxy") {}

NativeMat4x3Module::~NativeMat4x3Module() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::Mat4x3Module>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Mat4x3Module_create(JNIEnv* jniEnv, jobject /*this*/, ::djinni_generated::NativeReactBridge::JniType j_bridge)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::Mat4x3Module::create(::djinni_generated::NativeReactBridge::toCpp(jniEnv, j_bridge));
        return ::djinni::release(::djinni_generated::NativeMat4x3Module::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1get(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_row, jdouble j_col, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->get(::djinni::F64::toCpp(jniEnv, j_row),
                 ::djinni::F64::toCpp(jniEnv, j_col),
                 ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1set(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_row, jdouble j_col, jdouble j_v)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->set(::djinni::F64::toCpp(jniEnv, j_row),
                 ::djinni::F64::toCpp(jniEnv, j_col),
                 ::djinni::F64::toCpp(jniEnv, j_v));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1orthogonalProjection(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_left, jdouble j_right, jdouble j_bottom, jdouble j_top, jdouble j_zn, jdouble j_zf, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->orthogonalProjection(::djinni::F64::toCpp(jniEnv, j_left),
                                  ::djinni::F64::toCpp(jniEnv, j_right),
                                  ::djinni::F64::toCpp(jniEnv, j_bottom),
                                  ::djinni::F64::toCpp(jniEnv, j_top),
                                  ::djinni::F64::toCpp(jniEnv, j_zn),
                                  ::djinni::F64::toCpp(jniEnv, j_zf),
                                  ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1perspective(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_left, jdouble j_right, jdouble j_top, jdouble j_bottom, jdouble j_near, jdouble j_far, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->perspective(::djinni::F64::toCpp(jniEnv, j_left),
                         ::djinni::F64::toCpp(jniEnv, j_right),
                         ::djinni::F64::toCpp(jniEnv, j_top),
                         ::djinni::F64::toCpp(jniEnv, j_bottom),
                         ::djinni::F64::toCpp(jniEnv, j_near),
                         ::djinni::F64::toCpp(jniEnv, j_far),
                         ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1perspectiveFOV(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_fov, jdouble j_aspect, jdouble j_near, jdouble j_far, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->perspectiveFOV(::djinni::F64::toCpp(jniEnv, j_fov),
                            ::djinni::F64::toCpp(jniEnv, j_aspect),
                            ::djinni::F64::toCpp(jniEnv, j_near),
                            ::djinni::F64::toCpp(jniEnv, j_far),
                            ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1lookAt(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptMap::JniType j_eye, ::djinni_generated::NativeJavascriptMap::JniType j_at, ::djinni_generated::NativeJavascriptMap::JniType j_up, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->lookAt(::djinni_generated::NativeJavascriptMap::toCpp(jniEnv, j_eye),
                    ::djinni_generated::NativeJavascriptMap::toCpp(jniEnv, j_at),
                    ::djinni_generated::NativeJavascriptMap::toCpp(jniEnv, j_up),
                    ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1lookAlong(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptMap::JniType j_axis, ::djinni_generated::NativeJavascriptMap::JniType j_eye, ::djinni_generated::NativeJavascriptMap::JniType j_up, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->lookAlong(::djinni_generated::NativeJavascriptMap::toCpp(jniEnv, j_axis),
                       ::djinni_generated::NativeJavascriptMap::toCpp(jniEnv, j_eye),
                       ::djinni_generated::NativeJavascriptMap::toCpp(jniEnv, j_up),
                       ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1translation(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_x, jdouble j_y, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->translation(::djinni::F64::toCpp(jniEnv, j_x),
                         ::djinni::F64::toCpp(jniEnv, j_y),
                         ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1movement(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_x, jdouble j_y, jdouble j_z, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->movement(::djinni::F64::toCpp(jniEnv, j_x),
                      ::djinni::F64::toCpp(jniEnv, j_y),
                      ::djinni::F64::toCpp(jniEnv, j_z),
                      ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1identity(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->identity(::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1scale(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_scale, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->scale(::djinni::F64::toCpp(jniEnv, j_scale),
                   ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1rotationX(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_alpha, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->rotationX(::djinni::F64::toCpp(jniEnv, j_alpha),
                       ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1rotationY(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_alpha, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->rotationY(::djinni::F64::toCpp(jniEnv, j_alpha),
                       ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1rotationZ(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_alpha, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->rotationZ(::djinni::F64::toCpp(jniEnv, j_alpha),
                       ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1rotation(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_yaw, jdouble j_pitch, jdouble j_roll, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->rotation(::djinni::F64::toCpp(jniEnv, j_yaw),
                      ::djinni::F64::toCpp(jniEnv, j_pitch),
                      ::djinni::F64::toCpp(jniEnv, j_roll),
                      ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1from(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptArray::JniType j_mat, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->from(::djinni_generated::NativeJavascriptArray::toCpp(jniEnv, j_mat),
                  ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1add(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptArray::JniType j_mat, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->add(::djinni_generated::NativeJavascriptArray::toCpp(jniEnv, j_mat),
                 ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1sub(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptArray::JniType j_mat, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->sub(::djinni_generated::NativeJavascriptArray::toCpp(jniEnv, j_mat),
                 ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1multiply(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_i, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->multiply(::djinni::F64::toCpp(jniEnv, j_i),
                      ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1clone(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->clone(::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1transpose(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->transpose(::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1transpose3x3(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->transpose3x3(::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1trace(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->trace(::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1determinant(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->determinant(::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Mat4x3Module_00024CppProxy_native_1linearInterpolate(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeJavascriptArray::JniType j_a, ::djinni_generated::NativeJavascriptArray::JniType j_b, jdouble j_prop, ::djinni_generated::NativeJavascriptPromise::JniType j_promise)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Mat4x3Module>(nativeRef);
        ref->linearInterpolate(::djinni_generated::NativeJavascriptArray::toCpp(jniEnv, j_a),
                               ::djinni_generated::NativeJavascriptArray::toCpp(jniEnv, j_b),
                               ::djinni::F64::toCpp(jniEnv, j_prop),
                               ::djinni_generated::NativeJavascriptPromise::toCpp(jniEnv, j_promise));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
