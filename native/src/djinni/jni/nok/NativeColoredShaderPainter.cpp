// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#include "NativeColoredShaderPainter.hpp"  // my header
#include "Marshal.hpp"
#include "NativeMat4.hpp"
#include "NativePipelineState.hpp"

namespace djinni_generated {

NativeColoredShaderPainter::NativeColoredShaderPainter() : ::djinni::JniInterface<::nok::ColoredShaderPainter, NativeColoredShaderPainter>("co/zenturi/nok/ColoredShaderPainter$CppProxy") {}

NativeColoredShaderPainter::~NativeColoredShaderPainter() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_ColoredShaderPainter_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::ColoredShaderPainter>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_ColoredShaderPainter_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::ColoredShaderPainter::create();
        return ::djinni::release(::djinni_generated::NativeColoredShaderPainter::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_ColoredShaderPainter_00024CppProxy_native_1getPipeline(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ColoredShaderPainter>(nativeRef);
        auto r = ref->get_pipeline();
        return ::djinni::release(::djinni_generated::NativePipelineState::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ColoredShaderPainter_00024CppProxy_native_1setPipeline(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_p)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ColoredShaderPainter>(nativeRef);
        ref->set_pipeline(::djinni_generated::NativePipelineState::toCpp(jniEnv, j_p));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ColoredShaderPainter_00024CppProxy_native_1setProjection(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_projectionMatrix)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ColoredShaderPainter>(nativeRef);
        ref->setProjection(::djinni_generated::NativeMat4::toCpp(jniEnv, j_projectionMatrix));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ColoredShaderPainter_00024CppProxy_native_1setRectVertices(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_bottomleftx, jfloat j_bottomlefty, jfloat j_topleftx, jfloat j_toprightx, jfloat j_toprighty, jfloat j_bottomrightx, jfloat j_bottomrighty)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ColoredShaderPainter>(nativeRef);
        ref->setRectVertices(::djinni::F32::toCpp(jniEnv, j_bottomleftx),
                             ::djinni::F32::toCpp(jniEnv, j_bottomlefty),
                             ::djinni::F32::toCpp(jniEnv, j_topleftx),
                             ::djinni::F32::toCpp(jniEnv, j_toprightx),
                             ::djinni::F32::toCpp(jniEnv, j_toprighty),
                             ::djinni::F32::toCpp(jniEnv, j_bottomrightx),
                             ::djinni::F32::toCpp(jniEnv, j_bottomrighty));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ColoredShaderPainter_00024CppProxy_native_1setRectColors(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_opacity, jdouble j_color)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ColoredShaderPainter>(nativeRef);
        ref->setRectColors(::djinni::F32::toCpp(jniEnv, j_opacity),
                           ::djinni::F64::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ColoredShaderPainter_00024CppProxy_native_1fillRect(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_opacity, jdouble j_color, jfloat j_bottomleftx, jfloat j_bottomlefty, jfloat j_topleftx, jfloat j_toprightx, jfloat j_toprighty, jfloat j_bottomrightx, jfloat j_bottomrighty)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ColoredShaderPainter>(nativeRef);
        ref->fillRect(::djinni::F32::toCpp(jniEnv, j_opacity),
                      ::djinni::F64::toCpp(jniEnv, j_color),
                      ::djinni::F32::toCpp(jniEnv, j_bottomleftx),
                      ::djinni::F32::toCpp(jniEnv, j_bottomlefty),
                      ::djinni::F32::toCpp(jniEnv, j_topleftx),
                      ::djinni::F32::toCpp(jniEnv, j_toprightx),
                      ::djinni::F32::toCpp(jniEnv, j_toprighty),
                      ::djinni::F32::toCpp(jniEnv, j_bottomrightx),
                      ::djinni::F32::toCpp(jniEnv, j_bottomrighty));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ColoredShaderPainter_00024CppProxy_native_1fillTriangle(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_opacity, jdouble j_color, jfloat j_x1, jfloat j_y1, jfloat j_x2, jfloat j_y2, jfloat j_x3, jfloat j_y3)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ColoredShaderPainter>(nativeRef);
        ref->fillTriangle(::djinni::F32::toCpp(jniEnv, j_opacity),
                          ::djinni::F64::toCpp(jniEnv, j_color),
                          ::djinni::F32::toCpp(jniEnv, j_x1),
                          ::djinni::F32::toCpp(jniEnv, j_y1),
                          ::djinni::F32::toCpp(jniEnv, j_x2),
                          ::djinni::F32::toCpp(jniEnv, j_y2),
                          ::djinni::F32::toCpp(jniEnv, j_x3),
                          ::djinni::F32::toCpp(jniEnv, j_y3));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ColoredShaderPainter_00024CppProxy_native_1endTris(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_rectsDone)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ColoredShaderPainter>(nativeRef);
        ref->endTris(::djinni::Bool::toCpp(jniEnv, j_rectsDone));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ColoredShaderPainter_00024CppProxy_native_1endRects(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_trisDone)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ColoredShaderPainter>(nativeRef);
        ref->endRects(::djinni::Bool::toCpp(jniEnv, j_trisDone));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ColoredShaderPainter_00024CppProxy_native_1end(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ColoredShaderPainter>(nativeRef);
        ref->end();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
