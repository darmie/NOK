// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#include "NativeImageShaderPainter.hpp"  // my header
#include "Marshal.hpp"
#include "NativeMat4.hpp"
#include "NativePipelineState.hpp"
#include "NativeRenderTarget.hpp"
#include "NativeTexture.hpp"

namespace djinni_generated {

NativeImageShaderPainter::NativeImageShaderPainter() : ::djinni::JniInterface<::nok::ImageShaderPainter, NativeImageShaderPainter>("co/zenturi/nok/ImageShaderPainter$CppProxy") {}

NativeImageShaderPainter::~NativeImageShaderPainter() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::ImageShaderPainter>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::ImageShaderPainter::create();
        return ::djinni::release(::djinni_generated::NativeImageShaderPainter::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_native_1getPipeline(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ImageShaderPainter>(nativeRef);
        auto r = ref->get_pipeline();
        return ::djinni::release(::djinni_generated::NativePipelineState::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_native_1setPipeline(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_p)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ImageShaderPainter>(nativeRef);
        ref->set_pipeline(::djinni_generated::NativePipelineState::toCpp(jniEnv, j_p));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_native_1setBilinearFilter(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_bilinear)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ImageShaderPainter>(nativeRef);
        ref->setBilinearFilter(::djinni::Bool::toCpp(jniEnv, j_bilinear));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_native_1setBilinearMipmapFilter(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_bilinear)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ImageShaderPainter>(nativeRef);
        ref->setBilinearMipmapFilter(::djinni::Bool::toCpp(jniEnv, j_bilinear));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_native_1setProjection(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_projectionMatrix)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ImageShaderPainter>(nativeRef);
        ref->setProjection(::djinni_generated::NativeMat4::toCpp(jniEnv, j_projectionMatrix));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_native_1drawImageTexture(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_img, jfloat j_bottomleftx, jfloat j_bottomlefty, jfloat j_topleftx, jfloat j_toprightx, jfloat j_toprighty, jfloat j_bottomrightx, jfloat j_bottomrighty, jfloat j_opacity, jdouble j_color)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ImageShaderPainter>(nativeRef);
        ref->drawImageTexture(::djinni_generated::NativeTexture::toCpp(jniEnv, j_img),
                              ::djinni::F32::toCpp(jniEnv, j_bottomleftx),
                              ::djinni::F32::toCpp(jniEnv, j_bottomlefty),
                              ::djinni::F32::toCpp(jniEnv, j_topleftx),
                              ::djinni::F32::toCpp(jniEnv, j_toprightx),
                              ::djinni::F32::toCpp(jniEnv, j_toprighty),
                              ::djinni::F32::toCpp(jniEnv, j_bottomrightx),
                              ::djinni::F32::toCpp(jniEnv, j_bottomrighty),
                              ::djinni::F32::toCpp(jniEnv, j_opacity),
                              ::djinni::F64::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_native_1drawImageTextureScale(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_img, jfloat j_sx, jfloat j_sy, jfloat j_sw, jfloat j_sh, jfloat j_left, jfloat j_top, jfloat j_right, jfloat j_bottom, jfloat j_opacity, jdouble j_color)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ImageShaderPainter>(nativeRef);
        ref->drawImageTextureScale(::djinni_generated::NativeTexture::toCpp(jniEnv, j_img),
                                   ::djinni::F32::toCpp(jniEnv, j_sx),
                                   ::djinni::F32::toCpp(jniEnv, j_sy),
                                   ::djinni::F32::toCpp(jniEnv, j_sw),
                                   ::djinni::F32::toCpp(jniEnv, j_sh),
                                   ::djinni::F32::toCpp(jniEnv, j_left),
                                   ::djinni::F32::toCpp(jniEnv, j_top),
                                   ::djinni::F32::toCpp(jniEnv, j_right),
                                   ::djinni::F32::toCpp(jniEnv, j_bottom),
                                   ::djinni::F32::toCpp(jniEnv, j_opacity),
                                   ::djinni::F64::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_native_1drawImageRenderTarget(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_img, jfloat j_bottomleftx, jfloat j_bottomlefty, jfloat j_topleftx, jfloat j_toprightx, jfloat j_toprighty, jfloat j_bottomrightx, jfloat j_bottomrighty, jfloat j_opacity, jdouble j_color)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ImageShaderPainter>(nativeRef);
        ref->drawImageRenderTarget(::djinni_generated::NativeRenderTarget::toCpp(jniEnv, j_img),
                                   ::djinni::F32::toCpp(jniEnv, j_bottomleftx),
                                   ::djinni::F32::toCpp(jniEnv, j_bottomlefty),
                                   ::djinni::F32::toCpp(jniEnv, j_topleftx),
                                   ::djinni::F32::toCpp(jniEnv, j_toprightx),
                                   ::djinni::F32::toCpp(jniEnv, j_toprighty),
                                   ::djinni::F32::toCpp(jniEnv, j_bottomrightx),
                                   ::djinni::F32::toCpp(jniEnv, j_bottomrighty),
                                   ::djinni::F32::toCpp(jniEnv, j_opacity),
                                   ::djinni::F64::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_native_1drawImageRenderTargetScale(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_img, jfloat j_sx, jfloat j_sy, jfloat j_sw, jfloat j_sh, jfloat j_left, jfloat j_top, jfloat j_right, jfloat j_bottom, jfloat j_opacity, jdouble j_color)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ImageShaderPainter>(nativeRef);
        ref->drawImageRenderTargetScale(::djinni_generated::NativeRenderTarget::toCpp(jniEnv, j_img),
                                        ::djinni::F32::toCpp(jniEnv, j_sx),
                                        ::djinni::F32::toCpp(jniEnv, j_sy),
                                        ::djinni::F32::toCpp(jniEnv, j_sw),
                                        ::djinni::F32::toCpp(jniEnv, j_sh),
                                        ::djinni::F32::toCpp(jniEnv, j_left),
                                        ::djinni::F32::toCpp(jniEnv, j_top),
                                        ::djinni::F32::toCpp(jniEnv, j_right),
                                        ::djinni::F32::toCpp(jniEnv, j_bottom),
                                        ::djinni::F32::toCpp(jniEnv, j_opacity),
                                        ::djinni::F64::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_ImageShaderPainter_00024CppProxy_native_1end(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::ImageShaderPainter>(nativeRef);
        ref->end();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
