// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio.djinni

#include "NativeAudio1.hpp"  // my header
#include "Marshal.hpp"
#include "NativeAudioBuffer.hpp"
#include "NativeAudioChannel.hpp"
#include "NativeSound.hpp"

namespace djinni_generated {

NativeAudio1::NativeAudio1() : ::djinni::JniInterface<::nok::Audio1, NativeAudio1>("co/zenturi/nok/Audio1$CppProxy") {}

NativeAudio1::~NativeAudio1() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_Audio1_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::Audio1>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Audio1_init(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        ::nok::Audio1::init();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jfloat JNICALL Java_co_zenturi_nok_Audio1_00024CppProxy_native_1max(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_a, jfloat j_b)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Audio1>(nativeRef);
        auto r = ref->max(::djinni::F32::toCpp(jniEnv, j_a),
                          ::djinni::F32::toCpp(jniEnv, j_b));
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jfloat JNICALL Java_co_zenturi_nok_Audio1_00024CppProxy_native_1min(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_a, jfloat j_b)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Audio1>(nativeRef);
        auto r = ref->min(::djinni::F32::toCpp(jniEnv, j_a),
                          ::djinni::F32::toCpp(jniEnv, j_b));
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jfloat JNICALL Java_co_zenturi_nok_Audio1_00024CppProxy_native_1mix(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_samplesBox, jobject j_buffer)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Audio1>(nativeRef);
        auto r = ref->mix(::djinni::I32::toCpp(jniEnv, j_samplesBox),
                          ::djinni_generated::NativeAudioBuffer::toCpp(jniEnv, j_buffer));
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Audio1_00024CppProxy_native_1play(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_sound, jboolean j_loop)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Audio1>(nativeRef);
        auto r = ref->play(::djinni_generated::NativeSound::toCpp(jniEnv, j_sound),
                           ::djinni::Bool::toCpp(jniEnv, j_loop));
        return ::djinni::release(::djinni_generated::NativeAudioChannel::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Audio1_00024CppProxy_native_1playAgain(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_channel)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Audio1>(nativeRef);
        ref->playAgain(::djinni_generated::NativeAudioChannel::toCpp(jniEnv, j_channel));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
