// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#include "NativeGraphics2.hpp"  // my header
#include "Marshal.hpp"
#include "NativeImageScaleQuality.hpp"
#include "NativeKavur.hpp"
#include "NativeMat3.hpp"
#include "NativeMat4.hpp"
#include "NativePipelineState.hpp"
#include "NativeRenderTarget.hpp"
#include "NativeTexture.hpp"

namespace djinni_generated {

NativeGraphics2::NativeGraphics2() : ::djinni::JniInterface<::nok::Graphics2, NativeGraphics2>("co/zenturi/nok/Graphics2$CppProxy") {}

NativeGraphics2::~NativeGraphics2() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::Graphics2>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Graphics2_create(JNIEnv* jniEnv, jobject /*this*/, jint j_width, jint j_height, jboolean j_rTargets)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::Graphics2::create(::djinni::I32::toCpp(jniEnv, j_width),
                                          ::djinni::I32::toCpp(jniEnv, j_height),
                                          ::djinni::Bool::toCpp(jniEnv, j_rTargets));
        return ::djinni::release(::djinni_generated::NativeGraphics2::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1pushRotation(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_angle, jfloat j_centerx, jfloat j_centery)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->pushRotation(::djinni::F32::toCpp(jniEnv, j_angle),
                          ::djinni::F32::toCpp(jniEnv, j_centerx),
                          ::djinni::F32::toCpp(jniEnv, j_centery));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1drawImage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_img, jfloat j_x, jfloat j_y)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->drawImage(::djinni_generated::NativeTexture::toCpp(jniEnv, j_img),
                       ::djinni::F32::toCpp(jniEnv, j_x),
                       ::djinni::F32::toCpp(jniEnv, j_y));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1drawScaledSubImage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_img, jfloat j_sx, jfloat j_sy, jfloat j_sw, jfloat j_sh, jfloat j_dx, jfloat j_dy, jfloat j_dw, jfloat j_dh)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->drawScaledSubImage(::djinni_generated::NativeTexture::toCpp(jniEnv, j_img),
                                ::djinni::F32::toCpp(jniEnv, j_sx),
                                ::djinni::F32::toCpp(jniEnv, j_sy),
                                ::djinni::F32::toCpp(jniEnv, j_sw),
                                ::djinni::F32::toCpp(jniEnv, j_sh),
                                ::djinni::F32::toCpp(jniEnv, j_dx),
                                ::djinni::F32::toCpp(jniEnv, j_dy),
                                ::djinni::F32::toCpp(jniEnv, j_dw),
                                ::djinni::F32::toCpp(jniEnv, j_dh));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1drawImageRenderTarget(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_img, jfloat j_x, jfloat j_y)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->drawImageRenderTarget(::djinni_generated::NativeRenderTarget::toCpp(jniEnv, j_img),
                                   ::djinni::F32::toCpp(jniEnv, j_x),
                                   ::djinni::F32::toCpp(jniEnv, j_y));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1drawRect(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_x, jfloat j_y, jfloat j_width, jfloat j_height, jfloat j_strength)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->drawRect(::djinni::F32::toCpp(jniEnv, j_x),
                      ::djinni::F32::toCpp(jniEnv, j_y),
                      ::djinni::F32::toCpp(jniEnv, j_width),
                      ::djinni::F32::toCpp(jniEnv, j_height),
                      ::djinni::F32::toCpp(jniEnv, j_strength));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1fillRect(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_x, jfloat j_y, jfloat j_width, jfloat j_height)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->fillRect(::djinni::F32::toCpp(jniEnv, j_x),
                      ::djinni::F32::toCpp(jniEnv, j_y),
                      ::djinni::F32::toCpp(jniEnv, j_width),
                      ::djinni::F32::toCpp(jniEnv, j_height));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1drawString(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_text, jfloat j_x, jfloat j_y)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->drawString(::djinni::String::toCpp(jniEnv, j_text),
                        ::djinni::F32::toCpp(jniEnv, j_x),
                        ::djinni::F32::toCpp(jniEnv, j_y));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1drawLine(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_x1, jfloat j_y1, jfloat j_x2, jfloat j_y2, jfloat j_strength)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->drawLine(::djinni::F32::toCpp(jniEnv, j_x1),
                      ::djinni::F32::toCpp(jniEnv, j_y1),
                      ::djinni::F32::toCpp(jniEnv, j_x2),
                      ::djinni::F32::toCpp(jniEnv, j_y2),
                      ::djinni::F32::toCpp(jniEnv, j_strength));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1fillTriangle(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_x1, jfloat j_y1, jfloat j_x2, jfloat j_y2, jfloat j_x3, jfloat j_y3)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->fillTriangle(::djinni::F32::toCpp(jniEnv, j_x1),
                          ::djinni::F32::toCpp(jniEnv, j_y1),
                          ::djinni::F32::toCpp(jniEnv, j_x2),
                          ::djinni::F32::toCpp(jniEnv, j_y2),
                          ::djinni::F32::toCpp(jniEnv, j_x3),
                          ::djinni::F32::toCpp(jniEnv, j_y3));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1setPipeline(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_pip)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->setPipeline(::djinni_generated::NativePipelineState::toCpp(jniEnv, j_pip));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1scissor(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_x, jint j_y, jint j_width, jint j_height)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->scissor(::djinni::I32::toCpp(jniEnv, j_x),
                     ::djinni::I32::toCpp(jniEnv, j_y),
                     ::djinni::I32::toCpp(jniEnv, j_width),
                     ::djinni::I32::toCpp(jniEnv, j_height));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1disableScissor(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->disableScissor();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1getTransformation(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        auto r = ref->get_transformation();
        return ::djinni::release(::djinni_generated::NativeMat3::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1getProjectionMatrix(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        auto r = ref->get_projectionMatrix();
        return ::djinni::release(::djinni_generated::NativeMat4::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1getFontGlyphs(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        auto r = ref->get_fontGlyphs();
        return ::djinni::release(::djinni::List<::djinni::I32>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1begin(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_renderTargets, jint j_width, jint j_height, jboolean j_clear, jint j_clearColor)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->begin(::djinni::Bool::toCpp(jniEnv, j_renderTargets),
                   ::djinni::I32::toCpp(jniEnv, j_width),
                   ::djinni::I32::toCpp(jniEnv, j_height),
                   ::djinni::Bool::toCpp(jniEnv, j_clear),
                   ::djinni::I32::toCpp(jniEnv, j_clearColor));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1clear(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_color)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->clear(::djinni::I32::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1flush(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->flush();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1end(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->end();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1drawVideoInternal(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_x, jfloat j_y, jfloat j_width, jfloat j_height)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->drawVideoInternal(::djinni::F32::toCpp(jniEnv, j_x),
                               ::djinni::F32::toCpp(jniEnv, j_y),
                               ::djinni::F32::toCpp(jniEnv, j_width),
                               ::djinni::F32::toCpp(jniEnv, j_height));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1drawVideo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_x, jfloat j_y, jfloat j_width, jfloat j_height)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->drawVideo(::djinni::F32::toCpp(jniEnv, j_x),
                       ::djinni::F32::toCpp(jniEnv, j_y),
                       ::djinni::F32::toCpp(jniEnv, j_width),
                       ::djinni::F32::toCpp(jniEnv, j_height));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1getColor(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        auto r = ref->getColor();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1setColor(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_color)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->setColor(::djinni::F32::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jfloat JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1getOpacity(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        auto r = ref->getOpacity();
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1setOpacity(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_opacity)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->setOpacity(::djinni::F32::toCpp(jniEnv, j_opacity));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1getImageScaleQuality(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        auto r = ref->getImageScaleQuality();
        return ::djinni::release(::djinni_generated::NativeImageScaleQuality::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1setImageScaleQuality(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->setImageScaleQuality(::djinni_generated::NativeImageScaleQuality::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1getMipmapScaleQuality(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        auto r = ref->getMipmapScaleQuality();
        return ::djinni::release(::djinni_generated::NativeImageScaleQuality::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1setMipmapScaleQuality(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->setMipmapScaleQuality(::djinni_generated::NativeImageScaleQuality::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1getFont(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        auto r = ref->getFont();
        return ::djinni::release(::djinni_generated::NativeKavur::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1getFontSize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        auto r = ref->getFontSize();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1setFontSize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_value)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->setFontSize(::djinni::I32::toCpp(jniEnv, j_value));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jdouble JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1getFontColor(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        auto r = ref->getFontColor();
        return ::djinni::release(::djinni::F64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Graphics2_00024CppProxy_native_1setFontColor(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jdouble j_color)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Graphics2>(nativeRef);
        ref->setFontColor(::djinni::F64::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
