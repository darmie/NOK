// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from nok.djinni

#include "NativeKavur.hpp"  // my header
#include "Marshal.hpp"
#include "NativeAlignedQuad.hpp"
#include "NativeFontStyle.hpp"
#include "NativeTexture.hpp"

namespace djinni_generated {

NativeKavur::NativeKavur() : ::djinni::JniInterface<::nok::Kavur, NativeKavur>("co/zenturi/nok/Kavur$CppProxy") {}

NativeKavur::~NativeKavur() = default;


CJNIEXPORT void JNICALL Java_co_zenturi_nok_Kavur_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::nok::Kavur>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_Kavur_00024CppProxy_native_1getWidth(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Kavur>(nativeRef);
        auto r = ref->get_width();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Kavur_00024CppProxy_native_1setWidth(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_w)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Kavur>(nativeRef);
        ref->set_width(::djinni::I32::toCpp(jniEnv, j_w));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_co_zenturi_nok_Kavur_00024CppProxy_native_1getHeight(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Kavur>(nativeRef);
        auto r = ref->get_height();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_co_zenturi_nok_Kavur_00024CppProxy_native_1setHeight(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_h)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Kavur>(nativeRef);
        ref->set_height(::djinni::I32::toCpp(jniEnv, j_h));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Kavur_load(JNIEnv* jniEnv, jobject /*this*/, jstring j_name, jobject j_style, jfloat j_size)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::nok::Kavur::load(::djinni::String::toCpp(jniEnv, j_name),
                                    ::djinni_generated::NativeFontStyle::toCpp(jniEnv, j_style),
                                    ::djinni::F32::toCpp(jniEnv, j_size));
        return ::djinni::release(::djinni_generated::NativeKavur::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Kavur_00024CppProxy_native_1getTexture(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Kavur>(nativeRef);
        auto r = ref->getTexture();
        return ::djinni::release(::djinni_generated::NativeTexture::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_co_zenturi_nok_Kavur_00024CppProxy_native_1getBakedQuad(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_charIndex, jfloat j_xpos, jfloat j_ypos)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Kavur>(nativeRef);
        auto r = ref->getBakedQuad(::djinni::I32::toCpp(jniEnv, j_charIndex),
                                   ::djinni::F32::toCpp(jniEnv, j_xpos),
                                   ::djinni::F32::toCpp(jniEnv, j_ypos));
        return ::djinni::release(::djinni_generated::NativeAlignedQuad::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jfloat JNICALL Java_co_zenturi_nok_Kavur_00024CppProxy_native_1getHeight(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Kavur>(nativeRef);
        auto r = ref->getHeight();
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jfloat JNICALL Java_co_zenturi_nok_Kavur_00024CppProxy_native_1charsWidth(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_ch, jint j_offset, jint j_length)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Kavur>(nativeRef);
        auto r = ref->charsWidth(::djinni::String::toCpp(jniEnv, j_ch),
                                 ::djinni::I32::toCpp(jniEnv, j_offset),
                                 ::djinni::I32::toCpp(jniEnv, j_length));
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jfloat JNICALL Java_co_zenturi_nok_Kavur_00024CppProxy_native_1stringWidth(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_ch, jint j_length)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Kavur>(nativeRef);
        auto r = ref->stringWidth(::djinni::String::toCpp(jniEnv, j_ch),
                                  ::djinni::I32::toCpp(jniEnv, j_length));
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jfloat JNICALL Java_co_zenturi_nok_Kavur_00024CppProxy_native_1getBaselinePosition(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::nok::Kavur>(nativeRef);
        auto r = ref->getBaselinePosition();
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
